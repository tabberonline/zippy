[{"F:\\Github\\zippy1\\src\\index.js":"1","F:\\Github\\zippy1\\src\\reportWebVitals.js":"2","F:\\Github\\zippy1\\src\\App.js":"3","F:\\Github\\zippy1\\src\\screens\\ContactScreen\\ContactScreen.js":"4","F:\\Github\\zippy1\\src\\screens\\HomeScreen\\HomeScreen.js":"5","F:\\Github\\zippy1\\src\\screens\\AboutScreen\\AboutScreen.js":"6","F:\\Github\\zippy1\\src\\screens\\DisplayScreen\\DisplayScreen.js":"7","F:\\Github\\zippy1\\src\\screens\\PortfolioScreen\\PortfolioScreen.js":"8","F:\\Github\\zippy1\\src\\utility\\localStorageControl.js":"9","F:\\Github\\zippy1\\src\\components\\FAQCard\\FAQCard.js":"10","F:\\Github\\zippy1\\src\\components\\AchievementCard\\AchievementCard.js":"11","F:\\Github\\zippy1\\src\\components\\Header\\Header1.js":"12","F:\\Github\\zippy1\\src\\components\\FeatureCard\\FeatureCard.js":"13","F:\\Github\\zippy1\\src\\components\\Footer\\Footer.js":"14","F:\\Github\\zippy1\\src\\components\\Header\\Header.js":"15","F:\\Github\\zippy1\\src\\components\\modals\\PortfolioModal.js":"16","F:\\Github\\zippy1\\src\\components\\modals\\ShareModal.js":"17","F:\\Github\\zippy1\\src\\components\\modals\\ContestProfileModal.js":"18","F:\\Github\\zippy1\\src\\components\\modals\\ProjectModal.js":"19","F:\\Github\\zippy1\\src\\components\\ContestCard\\ContestCard.js":"20","F:\\Github\\zippy1\\src\\components\\ProjectCard\\ProjectCard.js":"21","F:\\Github\\zippy1\\src\\components\\ProjectCard\\ProjectCardDisplay.js":"22","F:\\Github\\zippy1\\src\\components\\ContestCard\\ContestCardDisplay.js":"23","F:\\Github\\zippy1\\src\\components\\modals\\CodingProfileModal.js":"24","F:\\Github\\zippy1\\src\\components\\CodingCard\\CodingCardDisplay.js":"25","F:\\Github\\zippy1\\src\\components\\CodingCard\\CodingCard.js":"26","F:\\Github\\zippy1\\src\\AdminServices\\AdminService.js":"27","F:\\Github\\zippy1\\src\\components\\GoogleBtn.js":"28","F:\\Github\\zippy1\\src\\AdminServices\\dataService.js":"29","F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateCodingProfile.js":"30","F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateContestProfile.js":"31","F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateProject.js":"32","F:\\Github\\zippy1\\src\\utility\\reducer.js":"33","F:\\Github\\zippy1\\src\\utility\\StateProvider.js":"34","F:\\Github\\zippy1\\src\\screens\\PolicyScreen\\PolicyScreen.js":"35","F:\\Github\\zippy1\\src\\screens\\TermsScreen\\TermsScreen.js":"36","F:\\Github\\zippy1\\src\\components\\modals\\SendViaEmail.js":"37","F:\\Github\\zippy1\\src\\components\\modals\\AttachResume.js":"38","F:\\Github\\zippy1\\src\\components\\MailPreview\\MailPreview.js":"39","F:\\Github\\zippy1\\src\\components\\modals\\SentHistory.js":"40","F:\\Github\\zippy1\\src\\AdminServices\\baseUrl.js":"41"},{"size":1908,"mtime":1611356572024,"results":"42","hashOfConfig":"43"},{"size":362,"mtime":1610430732000,"results":"44","hashOfConfig":"43"},{"size":557,"mtime":1610996793644,"results":"45","hashOfConfig":"43"},{"size":4819,"mtime":1611326115981,"results":"46","hashOfConfig":"43"},{"size":6270,"mtime":1613930590511,"results":"47","hashOfConfig":"43"},{"size":2386,"mtime":1611324498222,"results":"48","hashOfConfig":"43"},{"size":4699,"mtime":1613930583090,"results":"49","hashOfConfig":"43"},{"size":8949,"mtime":1613930822753,"results":"50","hashOfConfig":"43"},{"size":3041,"mtime":1610430732000,"results":"51","hashOfConfig":"43"},{"size":1298,"mtime":1610498564435,"results":"52","hashOfConfig":"43"},{"size":635,"mtime":1611680678327,"results":"53","hashOfConfig":"43"},{"size":1606,"mtime":1611321850691,"results":"54","hashOfConfig":"43"},{"size":572,"mtime":1611503969703,"results":"55","hashOfConfig":"43"},{"size":759,"mtime":1611351261128,"results":"56","hashOfConfig":"43"},{"size":1127,"mtime":1611085328806,"results":"57","hashOfConfig":"43"},{"size":6465,"mtime":1614070417551,"results":"58","hashOfConfig":"43"},{"size":2740,"mtime":1613082646561,"results":"59","hashOfConfig":"43"},{"size":5581,"mtime":1611343299198,"results":"60","hashOfConfig":"43"},{"size":4540,"mtime":1612827969878,"results":"61","hashOfConfig":"43"},{"size":10571,"mtime":1613930746780,"results":"62","hashOfConfig":"43"},{"size":8453,"mtime":1613930756312,"results":"63","hashOfConfig":"43"},{"size":893,"mtime":1610500837174,"results":"64","hashOfConfig":"43"},{"size":1323,"mtime":1610500821083,"results":"65","hashOfConfig":"43"},{"size":6454,"mtime":1611343095636,"results":"66","hashOfConfig":"43"},{"size":1130,"mtime":1610500809531,"results":"67","hashOfConfig":"43"},{"size":10775,"mtime":1613930736048,"results":"68","hashOfConfig":"43"},{"size":1920,"mtime":1613932589442,"results":"69","hashOfConfig":"43"},{"size":3338,"mtime":1614070756258,"results":"70","hashOfConfig":"43"},{"size":2350,"mtime":1613930364484,"results":"71","hashOfConfig":"43"},{"size":5337,"mtime":1610616437296,"results":"72","hashOfConfig":"43"},{"size":5688,"mtime":1610616445721,"results":"73","hashOfConfig":"43"},{"size":4612,"mtime":1610430732000,"results":"74","hashOfConfig":"43"},{"size":1124,"mtime":1610457107933,"results":"75","hashOfConfig":"43"},{"size":373,"mtime":1610473541120,"results":"76","hashOfConfig":"43"},{"size":9007,"mtime":1611353178319,"results":"77","hashOfConfig":"43"},{"size":9010,"mtime":1611356514983,"results":"78","hashOfConfig":"43"},{"size":3922,"mtime":1613930843651,"results":"79","hashOfConfig":"43"},{"size":3395,"mtime":1613931648654,"results":"80","hashOfConfig":"43"},{"size":2207,"mtime":1612832365310,"results":"81","hashOfConfig":"43"},{"size":3502,"mtime":1613118657747,"results":"82","hashOfConfig":"43"},{"size":165,"mtime":1613930185166,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"17xg5nk",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"86"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"86"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"86"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"86"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"86"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"86"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"86"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"86"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"86"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"F:\\Github\\zippy1\\src\\index.js",[],["186","187"],"F:\\Github\\zippy1\\src\\reportWebVitals.js",[],"F:\\Github\\zippy1\\src\\App.js",["188"],"import React, {useEffect} from 'react';\nimport './App.css';\nimport HomeScreen from './screens/HomeScreen/HomeScreen';\nimport {setItem, getItem} from './utility/localStorageControl';\n\nfunction App() {  \n  useEffect(() => {\n    setItem('login', false);\n    setItem('access_token', '');\n    setItem('name', '');\n    setItem('image', '');\n    setItem('portfolio', false);\n    setItem('projects', []);\n    setItem('rank', []);\n    setItem('contest', []);\n  }, []);\n  return (\n    <div className=\"App\">\n      <HomeScreen />\n    </div>\n  );\n}\n\nexport default App;\n","F:\\Github\\zippy1\\src\\screens\\ContactScreen\\ContactScreen.js",["189"],"import React, { useState } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './ContactScreen.css';\nimport Footer from '../../components/Footer/Footer';\nimport contactimg from '../../assets/images/Contactimg.png';\nimport {Form} from 'react-bootstrap';\nimport Header1 from '../../components/Header/Header1';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\nimport { Animated } from 'react-animated-css';\n\nfunction ContactScreen() {\n    const [name, setName] = useState('');\n    const [subject, setSubject] = useState('');\n    const [message, setMessage] = useState('');\n\n    const SendMail = async () => {\n        if(name.length > 0 && subject.length > 0 && message.length > 0){\n            const mailContent = {\n                'subject': subject,\n                'text': message\n            }\n            AdminService.sendMail(mailContent)\n                .then(resp => {\n                    toast.success('Mail Sent!', {\n                        position: \"top-center\",\n                        autoClose: 2000,\n                        hideProgressBar: true,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        progress: undefined,\n                    });\n                    window.open('/contact', '_self')\n                })\n                .catch(err => {\n                    toast.error('Invalid entries!', {\n                        position: \"top-center\",\n                        autoClose: 2000,\n                        hideProgressBar: true,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        progress: undefined,\n                    });\n                })\n        } else{\n            toast.error('Error, Fields cannot be empty!', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n        }\n\n    }\n  return (\n    <div className=\"contact-screen\">\n        <Header1 />\n        <div id=\"contact-section\">\n          <div className=\"mw1100 flexColumn\">\n            <Animated isVisible={true} animationIn=\"slideInUp\">\n                <div className=\"flexColumn flexAlignCenter flexCenter mh-20 contact-header\">\n                    <img src={contactimg} alt=\"\" style={{width: '90%'}} />\n                </div>\n            </Animated>\n            <ToastContainer\n                position=\"top-center\"\n                autoClose={3000}\n                hideProgressBar={true}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n            />\n            <Animated isVisible={true} animationIn=\"slideInUp\">\n                <div className=\"flexColumn contact-section\">\n                    <h1 className=\"contact-heading\">Have anything to ask?</h1>\n                    <div className=\"flexColumn flexAround flexAlignCenter mv-40\">\n                        <Form style={{width: '75%'}}>\n                            <Form.Group controlId=\"formBasicEmail\" className=\"mb-20\">\n                                <Form.Label>Name*</Form.Label>\n                                <Form.Control type=\"name\" defaultValue={name} onChange={(e) => setName(e.target.value)} />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"formBasicPassword2\" className=\"mb-20\">\n                                <Form.Label>Subject*</Form.Label>\n                                <Form.Control type=\"text\" defaultValue={subject} onChange={(e) => setSubject(e.target.value)} />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"formBasicPassword3\">\n                                <Form.Label>Message*</Form.Label>\n                                <Form.Control as=\"textarea\" rows={5} defaultValue={message} onChange={(e) => setMessage(e.target.value)} />\n                            </Form.Group>\n\n                            <div className=\"share\" onClick={() => SendMail()} style={{cursor: 'pointer', justifyContent: 'flex-start', paddingLeft: 0, paddingTop: 30}}>\n                                <a className=\"flexAlignCenter modal-button\">Send</a>\n                            </div>\n                        </Form>\n                    </div>\n                </div>\n            </Animated>\n          </div>\n      </div>\n        <Footer />\n    </div>\n  );\n}\n\nexport default ContactScreen;\n","F:\\Github\\zippy1\\src\\screens\\HomeScreen\\HomeScreen.js",["190","191","192"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {useEffect, useState} from 'react';\nimport '../../styles/HelperStyles.css';\nimport './HomeScreen.css';\nimport Header from '../../components/Header/Header';\nimport introimg from '../../assets/images/handshake-colour.png';\nimport whytabber from '../../assets/images/drawkit-content-man-colour.png'\nimport {BiCheckCircle} from 'react-icons/bi';\nimport FeatureCard from '../../components/FeatureCard/FeatureCard';\nimport AchievementCard from '../../components/AchievementCard/AchievementCard';\nimport FAQCard from '../../components/FAQCard/FAQCard';\nimport Footer from '../../components/Footer/Footer';\nimport 'react-toastify/dist/ReactToastify.css';\nimport PortfolioModal from '../../components/modals/PortfolioModal';\nimport { Animated } from 'react-animated-css';\nimport Axios from 'axios';\nimport users from '../../assets/images/users.png';\nimport links from '../../assets/images/links.png';\nimport review from '../../assets/images/Review.png';\nimport onpoint from '../../assets/images/OnPoint.png';\nimport modify from '../../assets/images/Modifiable.png';\nimport nolimit from '../../assets/images/NoLimit.png';\nimport projects from '../../assets/images/Projects.png';\nimport achievements from '../../assets/images/Achievements.png';\nimport {setItem, getItem} from '../../utility/localStorageControl'\nimport { ToastContainer } from 'react-toastify';\nimport {API_ENDPOINT} from '../../AdminServices/baseUrl';\n\nfunction HomeScreen() {\n  const [QnA, setQnA] = useState([]);\n  const [Achievements, setAments] = useState([]);\n  const [Features, setFeatures] = useState([]);\n\n  const getData = async () =>{\n    Axios.get(`${API_ENDPOINT}/fe/get?page_type=Home&key=QnA`)\n      .then(resp => {\n        setQnA(resp.data.value);\n      })\n    Axios.get(`${API_ENDPOINT}/fe/get?page_type=Home&key=Achievements`)\n      .then(resp => {\n        setAments(resp.data.value)\n      })\n    Axios.get(`${API_ENDPOINT}/fe/get?page_type=Home&key=Features`)\n      .then(resp => {\n        setFeatures(resp.data.value)\n      })\n  }\n\n  window.onload = () => {\n    getData();\n  }\n  \n  return (\n    <div className=\"#home-screen\">\n      <Header />\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n        <div id=\"intro-section\">\n          <div className=\"mw1100 mobile-column flexRow flexAround flexAlignCenter\">\n            <img className=\"intro-img\" src={introimg} alt=\"intro\" />\n            <div className=\"mw600 mobile-center flexColumn\">\n                <h1 className=\"intro-text\">\n                    Improve your chances of getting hired, just Tab it for \n                    <span style={{color: 'rgba(0,229,216,1)'}}> FREE</span>\n                </h1>\n                <PortfolioModal home={true} />\n            </div>\n          </div>\n        </div>\n      </Animated>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar={true}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n      <div id=\"why-tabber\">\n        <div className=\"mw1100 flexRow mobile-column flexAround flexAlignCenter\">\n          <div className=\"mw600 flexColumn mv-40\">\n              <h1 className=\"whytabber-heading\">Why <span style={{color: '#077A73'}}>tabber?</span></h1>\n              <p className=\"whytabber-text\">Are you tired of sending <strong>each and every link</strong> to recruiters taking the hassle of mentioning each and every <strong>rank</strong>? Say no more! because Tabber is here to make this a possibility.</p>\n              <p className=\"whytabber-features mt-50 mb-20\">The features which are covered in this</p>\n              <p className=\"ml-20 whytabber-point flexAlignCenter\"><BiCheckCircle style={{color: '#077A73', marginRight: 10}} />Add all your portfolio profiles.</p>\n              <p className=\"ml-20 whytabber-point flexAlignCenter\"><BiCheckCircle style={{color: '#077A73', marginRight: 10}} />Edit your resume live on the go.</p>\n              <p className=\"ml-20 pb-100 whytabber-point flexAlignCenter\"><BiCheckCircle style={{color: '#077A73', marginRight: 10}} />Get a single shareable link.</p>\n          </div>\n          <img className=\"intro-img\" src={whytabber} alt=\"why-tabber\" />\n        </div>\n      </div>\n      </Animated>\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n      <div id=\"tabberfeatures\">\n        <div className=\"mw1100 pl-40 flexColumn\">\n          <h1 className=\"tabberfeatures-heading\">What we got you</h1>\n          <div className=\"flexRow flexBetween\" style={{flexWrap: 'wrap'}}>\n              {Features.map(feature => (\n                  <FeatureCard key={feature.sr} name={feature.name} desc={feature.desc} \n                    img={feature.sr === 1 ? review :\n                      feature.sr === 2 ? onpoint : \n                      feature.sr === 3 ? modify : \n                      feature.sr === 4 ? nolimit :\n                      feature.sr === 5 ? projects : achievements} \n                  />\n              ))}\n          </div>\n        </div>\n      </div>\n      </Animated>\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n      <div id=\"achievements\">\n        <div className=\"mw1100 pl-40 flexColumn\">\n          <h1 className=\"achievements-heading\">Achievements we have made, so far</h1>\n          <div className=\"flexRow flexCenter\" style={{flexWrap: 'wrap'}}>\n              {Achievements.map(achievement => (\n                  <AchievementCard key={achievement.sr} name={achievement.name} desc={achievement.desc} image={achievement.sr === 1 ? users : links} />\n              ))}\n          </div>\n        </div>\n      </div>\n      </Animated>\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n      <div id=\"faq\">\n        <div className=\"mw1100 ph-40 flexColumn\">\n          <h1 className=\"tabberfeatures-heading\">Frequently Asked Questions</h1>\n          {QnA.map(ques => (\n              <FAQCard key={ques.sr} ques={ques.ques} ans={ques.ans} />\n          ))}\n        </div>\n       </div>\n      </Animated>\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n        <Footer />\n      </Animated>\n    </div>\n  );\n}\n\nexport default HomeScreen;\n","F:\\Github\\zippy1\\src\\screens\\AboutScreen\\AboutScreen.js",[],"F:\\Github\\zippy1\\src\\screens\\DisplayScreen\\DisplayScreen.js",[],"F:\\Github\\zippy1\\src\\screens\\PortfolioScreen\\PortfolioScreen.js",["193","194","195","196","197","198"],"import React, { useEffect, useState } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './PortfolioScreen.css';\nimport Footer from '../../components/Footer/Footer';\nimport CodingCard from '../../components/CodingCard/CodingCard';\nimport ContestCard from '../../components/ContestCard/ContestCard';\nimport ProjectCard from '../../components/ProjectCard/ProjectCard';\nimport CodingProfileModal from '../../components/modals/CodingProfileModal';\nimport ContestProfileModal from '../../components/modals/ContestProfileModal';\nimport ProjectModal from '../../components/modals/ProjectModal';\nimport ShareModal from '../../components/modals/ShareModal';\nimport SentHistoryModal from '../../components/modals/SentHistory';\nimport { AiOutlineCheck, AiOutlineEdit, AiOutlinePlusCircle} from 'react-icons/ai';\nimport $ from 'jquery';\nimport Header1 from '../../components/Header/Header1';\nimport { getItem, setItem, ReversePortalMap } from '../../utility/localStorageControl';\nimport AdminService from '../../AdminServices/AdminService';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {isMobile} from 'react-device-detect';\nimport AttachResumeModal from '../../components/modals/AttachResume';\nimport SendViaEmail from '../../components/modals/SendViaEmail';\nconst API_KEY = 'AFjzy7b0VSvCEJhKDtcQ6z';\nconst processAPI = 'https://cdn.filestackcontent.com';\n\nfunction PortfolioScreen() {\n  const [name, setname] = useState(getItem('name'));\n  var title = getItem('titlePortfolio');\n  var desc = getItem('descPortfolio');\n  const [edit1, setedit] = useState(true);\n  const [edit2, setedit2] = useState(true);\n  const [rankWidgets, setrankwidgets] = useState(getItem('rankWidgets'));\n  const [contestWidgets, setcontestwidgets] = useState(getItem('contestWidgets'));\n  const [projectWidgets, setprojectwidgets] = useState(getItem('projectWidgets'));\n\n  const Edit1 = () => {\n    $(\".title\").prop(\"readonly\", false);\n    setedit(false);\n  } \n  const Edit2 = () => {\n    $(\".desc\").prop(\"readonly\", false);\n    setedit2(false);\n  } \n  const Save1 = () => {\n    $(\".title\").prop(\"readonly\", true);\n    setedit(true);\n    setItem('titlePortfolio', title);\n    UpdatePortfolio();\n  } \n  const Save2 = () => {\n    $(\".desc\").prop(\"readonly\", true);\n    setedit2(true);\n    setItem('descPortfolio', desc);\n    UpdatePortfolio();\n  } \n  const UpdatePortfolio = async () =>{\n    if(desc.length > 0 && title.length > 0){\n      const UpdatePortfolioData = {\n        'title': title,\n        'description': desc,\n      }\n      AdminService.updatePortfolio(UpdatePortfolioData)\n        .then(resp => {\n          toast.success('Details Updated!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        })\n        .catch(err => {\n          console.log('Error', err);\n          toast.error('Error, Please retry!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        });\n    } else {\n      toast.error('Error, Fields cannot be empty!', {\n        position: \"top-center\",\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n  }\n\n  return (\n    <div className=\"#portfolio-screen\">      \n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar={true}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n      <Header1 />\n      <div className=\"flexRow mw1100 flexBetween\" style={{}}>\n        <SendViaEmail />\n        <SentHistoryModal />\n        <ShareModal id={getItem('user_id')} />\n      </div>\n      <div className=\"mw1100\">\n        <div className=\"p-40 flexColumn portfolio-section\">\n          <div className=\"flexColumn\">\n            <div className=\"flexRow flexCenter flexAlignCenter\">\n              <input type=\"text\" autoComplete=\"off\" autoCorrect=\"off\" autoCapitalize=\"off\" spellCheck=\"false\" className=\"title\" defaultValue={title} onChange={(event) => title = event.target.value} placeholder=\"Portfolio Title\" readOnly />\n              <div className=\"flexRow flexCenter flexAlignCenter iconcontainer1\" style={{left: -15, top: -15}}>\n                {\n                  edit1 ? <AiOutlineEdit className=\"portfolio-icon\" onClick={()=>Edit1()} style={{cursor: 'pointer'}} />\n                  : <AiOutlineCheck className=\"portfolio-icon\" onClick={()=>Save1()} style={{cursor: 'pointer'}} />\n                }\n              </div>\n            </div>\n            <hr style={{color : '#717070', width: '80%', margin: 'auto', marginTop: 10}} />\n            <div className=\"flexColumn info-sec\">\n              <p className=\"name mb-20 pl-20\">Hello! I am <strong>{name}</strong></p>\n              <div className=\"flexRow\">\n                <textarea autocomplete=\"off\" autoCorrect=\"off\" autoCapitalize=\"off\" spellCheck=\"false\" rows=\"5\" className=\"desc\" defaultValue={desc} onChange={(event) => desc = event.target.value} readOnly placeholder=\"Enter your College and profile description here\" />\n                <div className=\"flexRow flexCenter flexAlignCenter iconcontainer1\" style={{left: -15, top: -15}}>\n                {\n                  edit2 ?<AiOutlineEdit className=\"portfolio-icon\" onClick={()=>Edit2()} style={{cursor: 'pointer'}} />\n                  : <AiOutlineCheck className=\"portfolio-icon\" onClick={()=>Save2()} style={{cursor: 'pointer'}} />\n                }\n                </div>\n              </div>\n            </div>\n            <div className=\"flexColumn mv-20\">\n              <p className=\"card-heading mb-20\">Resume</p>\n              <AttachResumeModal />\n            </div>\n            <div className=\"coding-profile mv-20\">\n              <p className=\"card-heading mb-20\">Coding Profile</p>\n              <div className=\"flexRow flexWrap\">\n                { rankWidgets !== [''] ?\n                    (\n                      rankWidgets.map(profile => (\n                        <CodingCard name={ReversePortalMap.get(profile.website_id.toString()).name} id={profile.website_username} rank={profile.rank} logo={ReversePortalMap.get(profile.website_id.toString()).logo} hide={profile.invisible} />\n                      ))\n                    ) : null\n                }\n                {\n                  rankWidgets.length <= 5 ? (\n                    <CodingProfileModal />\n                  ) : null\n                }\n              </div>\n            </div>\n            <div className=\"coding-profile mv-20\">\n              <p className=\"card-heading mb-20\">Contests Won</p>\n              <div className=\"flexRow flexWrap\">\n                { contestWidgets !== [''] ?\n                    (\n                      contestWidgets.map(profile => (\n                        <ContestCard card_id={profile.id} name={ReversePortalMap.get(profile.website_id.toString()).name} id={profile.website_username} rank={profile.rank} logo={ReversePortalMap.get(profile.website_id.toString()).logo} contest={profile.contest_name} hide={profile.invisible} />\n                      ))\n                    ) : null\n                }\n                {\n                  contestWidgets.length <= 5 ? (\n                    <ContestProfileModal />\n                  ) : null\n                }\n              </div>\n            </div>\n            <div className=\"coding-profile mv-20\">\n              <p className=\"card-heading mb-20\">Personal Projects</p>\n              <div className=\"flexRow flexWrap\">\n                { projectWidgets !== [''] ?\n                    (\n                      projectWidgets.map(project => (\n                        <ProjectCard name={project.title} url={project.link} img={`${processAPI}/${API_KEY}/urlscreenshot=agent:${isMobile ? 'mobile' : 'desktop'}/${project.link}`} id={project.id} hide={project.invisible} />\n                      ))\n                    ) : null\n                }   \n                {\n                  projectWidgets.length <= 5 ? ( \n                    <ProjectModal />\n                  ) : null\n                }             \n              </div>\n            </div>\n          </div>\n          <div className=\"flexRow flexCenter end-section ph-20 flexAlignCenter mv-40\">\n            <hr style={{width: '35%', color: 'rgba(154,154,154,1)'}} />\n            <p className=\"end-text\">Thats all folks</p>\n            <hr style={{width: '35%', color: 'rgba(154,154,154,1)'}} />\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default PortfolioScreen;\n","F:\\Github\\zippy1\\src\\utility\\localStorageControl.js",[],"F:\\Github\\zippy1\\src\\components\\FAQCard\\FAQCard.js",[],"F:\\Github\\zippy1\\src\\components\\AchievementCard\\AchievementCard.js",[],"F:\\Github\\zippy1\\src\\components\\Header\\Header1.js",["199","200"],"import {React, useState} from 'react';\nimport './Header.css';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport splashlogo from '../../assets/images/logo.png';\nimport GoogleBtn from '../GoogleBtn';\nimport Avatar from '@material-ui/core/Avatar';\nimport { getItem, setItem } from '../../utility/localStorageControl';\n\nfunction Header1(){\n    return (\n        <header className=\"header\">\n            <Navbar sticky=\"top\" expand=\"lg\" className=\"flexRow flexAlignCenter navbar\">\n                <Navbar.Brand className=\"flexColumn flexAlignCenter\" href=\"/home\">\n                    <img src={splashlogo} width=\"150\" height=\"30\" className=\"d-inline-block mr-80\" alt=\"logo\" />\n                </Navbar.Brand>\n                <div className=\"w100 flexRow flexAlignCenter flexBetween\">\n                    <Nav className=\"mr-auto flexRow\">\n                        <Nav.Link className=\"grow2\" href=\"/about\">About</Nav.Link>\n                        <Nav.Link className=\"grow2\" href=\"/home#faq\">FAQ</Nav.Link>\n                        <Nav.Link className=\"grow2\" href=\"/contact\">Contact</Nav.Link>\n                    </Nav>\n                    {getItem('login') ? (\n                        <div className=\"avatar\">\n                            <Avatar alt=\"img\" src={getItem('image')} />\n                            <p className=\"avatar-name\">Welcome<br/><p className=\"name\">{getItem('name')}</p></p>\n                        </div>\n                    ) : (\n                        <GoogleBtn />\n                    )}\n                </div>\n            </Navbar>\n        </header>\n    );\n}\n\nexport default Header1;","F:\\Github\\zippy1\\src\\components\\FeatureCard\\FeatureCard.js",[],"F:\\Github\\zippy1\\src\\components\\Footer\\Footer.js",[],"F:\\Github\\zippy1\\src\\components\\Header\\Header.js",["201"],"import {React, useState} from 'react';\nimport './Header.css';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport splashlogo from '../../assets/images/logo.png';\nimport GoogleBtn from '../GoogleBtn';\n\nfunction Header(){\n    return (\n        <header className=\"header\">\n            <Navbar sticky=\"top\" expand=\"lg\" className=\"flexRow flexAlignCenter navbar\">\n                <Navbar.Brand className=\"flexColumn flexAlignCenter\" href=\"/home\">\n                    <img src={splashlogo} width=\"150\" height=\"30\" className=\"d-inline-block mr-80\" alt=\"logo\" />\n                </Navbar.Brand>\n                <div className=\"w100 flexRow flexAlignCenter flexBetween\">\n                    <Nav className=\"mr-auto flexRow\">\n                        <Nav.Link className=\"grow2\" href=\"/about\">About</Nav.Link>\n                        <Nav.Link className=\"grow2\" href=\"/home#faq\">FAQ</Nav.Link>\n                        <Nav.Link className=\"grow2\" href=\"/contact\">Contact</Nav.Link>\n                    </Nav>\n                    <GoogleBtn />\n                </div>\n            </Navbar>\n        </header>\n    );\n}\n\nexport default Header;","F:\\Github\\zippy1\\src\\components\\modals\\PortfolioModal.js",["202"],"F:\\Github\\zippy1\\src\\components\\modals\\ShareModal.js",[],"F:\\Github\\zippy1\\src\\components\\modals\\ContestProfileModal.js",["203"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Modal, Form } from 'react-bootstrap';\nimport {AiOutlineCloseCircle, AiOutlinePlusCircle} from 'react-icons/ai';\nimport { PortalMap, setItem, getItem } from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\n\nexport default function ContestProfileModal() {\n  const [modalShow, setModalShow] = React.useState(false);\n  var portal = \"Eg. GeeksforGeeks, CodeChef\";\n  const data = ['Geeks for Geeks', 'CodeChef', 'CodeForces', 'HackerRank', 'TopCoder', 'LeetCode'];\n  var contest = '';\n  var rank = '';\n  var username = '';\n\n  const formatPortal = portal => {\n    return portal.split(' ').join('').toLowerCase();\n  }\n\n  const createWidget = async () => {\n    if(portal && username && rank && contest){\n      const contestWidgetData = {\n        'rank' : getItem('Contestrank'),\n        'website_id' : getItem('website_id'),\n        'username' : getItem('Contestusername'),\n        'contest_name': getItem('Contestname')\n      }\n      AdminService.createContestWidget(contestWidgetData)\n        .then(response => {\n          toast.success('Details Entered!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n          AdminService.getUserData()\n            .then(resp => {\n              setItem('contestWidgets', resp.data.contest_widgets);\n              window.open('/portfolio', '_self');\n              setModalShow(false);\n            })\n            .catch(err => console.log(err));\n        })\n        .catch(error => {\n          toast.error('Error, Enter correct details!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        });\n    } else {\n      toast.error('Error, Fields cannot be empty!', {\n        position: \"top-center\",\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n  }\n\n  const getPortalDetails = (portal) => {\n    if(portal !== ''){\n      setItem('url', PortalMap.get(portal).url);\n      setItem('website_id', PortalMap.get(portal).id);\n      setItem('logo', PortalMap.get(portal).logo);\n    }\n  }\n\n  const UpdateCard = () => {\n    setItem('Contestportal', portal);\n    getPortalDetails(formatPortal(getItem('Contestportal')));\n    setItem('Contestusername', username);\n    setItem('Contestrank', rank);\n    setItem('Contestname', contest);\n    createWidget();\n  }\n\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">Add Contests won</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\" className=\" flexColumn mb-20\">\n              <Form.Label>Website Name</Form.Label>\n              <select defaultValue={portal} onChange={(e) => portal = (e.target.value)}>\n                <option value=\"Eg. GeeksforGeeks, CodeChef\" disabled>Eg. GeeksforGeeks, CodeChef</option>\n                {data.map(platform => (\n                  <option value={platform}>{platform}</option>\n                ))}\n              </select>\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword1\" className=\"mb-20\">\n              <Form.Label>Your Profile Username </Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. abc_234\" defaultValue={username} onChange={(e) => username = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword2\" className=\"mb-20\">\n              <Form.Label>Contest Name</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. 2020 Hackathon\" defaultValue={contest} onChange={(e) => contest = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword3\">\n              <Form.Label>Your Rank</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. 2514\" defaultValue={rank} onChange={(e) => rank = (e.target.value)} />\n            </Form.Group>\n  \n          </Form>\n  \n          <div className=\"share\" style={{justifyContent: 'center'}}>\n            <a onClick={() => UpdateCard()} className=\"flexAlignCenter modal-button\">Add to Profile</a>\n          </div>\n  \n        </div>\n      </Modal>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"grow1 flexColumn flexCenter flexAlignCenter add-card1\" style={{height: 250}}>\n        <button onClick={() => setModalShow(true)}>\n          <AiOutlinePlusCircle style={{fontSize: 80, color: '#C0C0C0'}} />\n        </button>\n      </div>\n\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </>\n  );\n}\n","F:\\Github\\zippy1\\src\\components\\modals\\ProjectModal.js",["204"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Modal, Form } from 'react-bootstrap';\nimport {AiOutlineCloseCircle, AiOutlinePlusCircle} from 'react-icons/ai';\nimport { setItem, getItem } from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\n\nexport default function ProjectModal() {\n  const [modalShow, setModalShow] = React.useState(false);\n  var url = '';\n  var project = '';\n\n  const createWidget = async () => {\n    if(url.length > 0 && project.length > 0 ){\n      const projectWidgetData = {\n        'title' : getItem('Projectname'),\n        'link' : getItem('Projectid')\n      }\n      AdminService.createProjectWidget(projectWidgetData)\n        .then(response => {\n          console.log(response);\n          toast.success('Details Entered!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n          AdminService.getUserData()\n            .then(resp => {\n              setItem('projectWidgets', resp.data.personal_projects);\n              window.open('/portfolio', '_self');\n              setModalShow(false);\n            })\n            .catch(err => console.log(err));\n        })\n        .catch(error => {\n          toast.error('Error, Enter correct details!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        });\n    } else {\n      toast.error('Error, Fields cannot be empty!', {\n        position: \"top-center\",\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n  }\n\n  const UpdateCard = () => {\n    setItem('Projectname', project);\n    setItem('Projectid', url);\n    createWidget();\n    setModalShow(false);\n  }\n\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">Add your work</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\" className=\"mb-20\">\n              <Form.Label>Project Title</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. Automated System\" defaultValue={project} onChange={(e) => project = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword1\" className=\"mb-20\">\n              <Form.Label>Project URL</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"http://www.google.com/\" defaultValue={url} onChange={(e) => url = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword2\" className=\"mb-20\">\n              <Form.Label>Cover Image</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Click on “upload cover” to upload an image of less than 2MB for your website cover.\" />\n            </Form.Group>\n  \n            <div className=\"grow5 share\">\n              <a className=\"flexAlignCenter upload-button\">Upload Cover</a>\n            </div>\n  \n          </Form>\n  \n          <div className=\"share\" style={{justifyContent: 'center'}}>\n            <a onClick={() => UpdateCard()} className=\"flexAlignCenter modal-button\">Add to Profile</a>\n          </div>\n  \n        </div>\n      </Modal>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"grow1 flexColumn flexCenter flexAlignCenter add-card\" style={{height: 280}}>\n        <button onClick={() => setModalShow(true)}>\n          <AiOutlinePlusCircle style={{fontSize: 80, color: '#C0C0C0'}} />\n        </button>\n      </div>\n\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </>\n  );\n}","F:\\Github\\zippy1\\src\\components\\ContestCard\\ContestCard.js",["205"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useState } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './ContestCard.css';\nimport {BsThreeDotsVertical} from 'react-icons/bs';\nimport deleted from '../../assets/images/Bin-Icon.png';\nimport edited from '../../assets/images/Edit-Icon.png';\nimport hidden from '../../assets/images/Hide-Icon.png';\nimport hidecards from '../../assets/images/hiddeeen.png';\nimport {setItem, PortalMap} from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\nimport UpdateContestProfile from '../UpdateModals/UpdateContestProfile';\nimport { Form, Modal } from 'react-bootstrap';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\n\nexport default function ContestCard({name, rank, id, logo, contest, card_id, hide}){\n\n    const [ bullets, setbullets ] = useState(true);\n    const [ drawer, setdrawer ] = useState(false);\n    const [option1, setoption1] = useState(false);\n    const [option2, setoption2] = useState(false);\n    const [option3, setoption3] = useState(false);\n    const [icon1, seticon1] = useState(true);\n    const [icon2, seticon2] = useState(true);\n    const [icon3, seticon3] = useState(true); \n    const [modalShow, setModalShow] = useState(false);    \n    var invisible = hide;\n\n    const OptionDrawer = () => {\n        setdrawer(true);\n        setbullets(false);\n    }\n    const CloseOptionDrawer = () => {\n        setdrawer(false);\n        setbullets(true);\n    }\n\n    const formatPortal = portal => {\n        return portal.split(' ').join('').toLowerCase();\n    }\n\n    const updateWidget = async () => {  \n        var website_name = formatPortal(name);\n        var website_id = PortalMap.get(website_name).id;\n        const updateWidgetData = {\n            'rank' : rank,\n            'website_id' : website_id,\n            'username' : name,\n            'contest_name' : contest,\n            'invisible': invisible,\n          }\n        console.log(updateWidgetData);\n        AdminService.updateContestWidget(card_id, updateWidgetData)\n          .then(response => {\n            toast.success('Card Updated!', {\n              position: \"top-center\",\n              autoClose: 2000,\n              hideProgressBar: true,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            AdminService.getUserData()\n              .then(resp => {\n                setItem('contestWidgets', resp.data.contest_widgets);\n              })\n              .catch(err => console.log(err));\n          })\n          .catch(error => {\n            toast.error('Error updating!', {\n              position: \"top-center\",\n              autoClose: 2000,\n              hideProgressBar: true,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n          });\n      }\n\n    const unHideCard = () => {\n      invisible = false;\n      updateWidget();\n    }\n\n    const HideCard = () => {\n      invisible = true;\n      updateWidget()\n    }\n\n    function DeleteModal(props) {\n        return (\n          <Modal\n            {...props}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n          >\n            <div className=\"flexColumn\">\n              <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n                <div style={{width: 20}}></div>\n                <h2 className=\"modal-head\">Delete Card</h2>\n                <button onClick={props.onHide}>\n                  <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n                </button>\n              </div>\n              <Form>\n                <Form.Group controlId=\"formBasicEmail\" className=\"flexColumn mb-20\">\n                  <Form.Label style={{textAlign: 'center'}}>Are you sure you want to delete this card?</Form.Label>\n                </Form.Group>\n              </Form>\n      \n              <div className=\"share\" style={{justifyContent: 'center'}}>\n                <a onClick={(e) => DeleteCard(card_id)} style={{marginRight: 10}} className=\"flexAlignCenter modal-button\">Delete</a>\n                <a onClick={props.onHide} className=\"flexAlignCenter modal-button\">Cancel</a>\n              </div>\n      \n            </div>\n          </Modal>\n        );\n      }\n\n    const DeleteCard = async (card_id) => {\n        \n        AdminService.deleteContestWidget(card_id)\n            .then(response => {\n                toast.success('Card deleted successfully!', {\n                    position: \"top-center\",\n                    autoClose: 2000,\n                    hideProgressBar: true,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n                AdminService.getUserData()\n                    .then(resp => {\n                      setItem('contestWidgets', resp.data.contest_widgets);\n                    })\n                    .catch(err => console.log(err));\n                })\n            .catch(error => {\n                toast.error('Error, Cannot delete this card!', {\n                    position: \"top-center\",\n                    autoClose: 2000,\n                    hideProgressBar: true,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                })\n            });\n    }\n\n    const DeleteCardPortal = (card_id) => {\n        setModalShow(true);\n    }\n\n    return(\n        <div className=\"grow1 card11 flexColumn achievement-card\" onMouseLeave={() => CloseOptionDrawer()}>\n            {\n                invisible ? (\n                    <div id=\"overlay\" onClick={() => unHideCard()} className=\"flexColumn flexCenter flexAlignCenter\">\n                        <img src={hidecards} alt=\"hidden\" className=\"hide-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\n                        <p className=\"options-text\" style={{color: 'white'}}>Hidden</p>\n                    </div>\n                ) : null\n            }\n            <div className=\"flexRow flexCenter\" style={{position: 'relative'}}>\n                {logo === \"\" ? (\n                    <div className=\"flexRow flexCenter flexAlignCenter empty-logo\">\n                        <p className=\"profile-name\" style={{fontWeight: 700, color: 'white'}}>LOGO</p>\n                    </div>\n                ) : (\n                    <img className=\"logo\" src={logo} alt=\"logo\" />\n                )}\n                { bullets ? (\n                    <div onClick={() => OptionDrawer()} className=\"flexRow option-drawer flexCenter flexAlignCenter iconcontainer\">\n                        <BsThreeDotsVertical className=\"portfolio-icon\" />                    \n                    </div>\n                    ) : null \n                }\n                { drawer ? (\n                    <div className=\"flexColumn flexStart options\" style={{position: 'absolute', top: '-15%', right:'-2%'}}>\n                        {icon1 ? (<img src={deleted} alt=\"delete\" onMouseEnter={() => {setoption1(true); seticon1(false);}} className=\"delete-icon\" style={{height:30, width: 30, marginBottom: 10, marginLeft: option2 ? 50 : null || option3 ? 50 : null}} />) : null }\n                        { option1 ? (\n                            <div className=\"flexRow flexAlignCenter option delete-option\" onClick={() => DeleteCardPortal(card_id)} onMouseLeave={() => {setoption1(false); seticon1(true);}} style={{ marginBottom: 10, position: 'relative', left: 40 }}>\n                                <img src={deleted} alt=\"delete\" style={{height:30, width: 30, marginRight: 10}} />\n                                <p className=\"options-text\">Delete</p>\n                            </div>                            \n                            ) : null\n                        }\n                        {icon2 ? (<img src={edited} alt=\"edit\" onMouseEnter={() => {setoption2(true); seticon2(false);}} className=\"edit-icon\" style={{height:30, width: 30, marginBottom: 10, marginLeft: option1 ? 50 : null || option3 ? 50 : null}} />) : null}\n                        { option2 ? (\n                            <div className=\"flexRow flexAlignCenter option edit-option\" onMouseLeave={() => {setoption2(false); seticon2(true);}} style={{ marginBottom: 10, position: 'relative', left: 40 }}>\n                                <UpdateContestProfile portalName={name} Rank={rank} userName={id} id={card_id} ContestName={contest} />\n                                <p className=\"options-text\">Edit</p>\n                            </div>\n                            ) : null\n                        }\n                        {icon3 ? (<img src={hidden} alt=\"hide\" onMouseEnter={() => {setoption3(true); seticon3(false);}} className=\"hide-icon\" style={{height:30, width: 30, marginBottom: 10, marginLeft: option2 ? 50 : null || option1 ? 50 : null}} />) : null}\n                        { option3 ? (\n                            <div className=\"flexRow flexAlignCenter option hide-option\" onClick={() => HideCard()} onMouseLeave={() => {setoption3(false); seticon3(true);}} style={{ marginBottom: 10, position: 'relative', left: 40 }}>\n                                <img src={hidden} alt=\"hide\" style={{height:30, width: 30, marginRight: 10}} />\n                                <p className=\"options-text\">Hide</p>\n                            </div>\n                            ) : null\n                        }\n                    </div>\n                    ) : null\n                }\n            </div>\n            <DeleteModal\n                show={modalShow}\n                onHide={() => setModalShow(false)}\n            />\n            <p className=\"profile-head mb-10\"> {name === \"\" ? \"Company Name\" : name}</p>\n            <div className=\"flexRow flexBetween conv\"> \n                <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">ID:</span> {id === \"\" ?  \"Id here\" : id }</p>\n                <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">Rank:</span> {rank === \"\" ?  \"?\" : rank  }</p>\n            </div>\n            <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">Contest Name: </span>{contest === \"\" ? \"Contest Name\" : contest }</p>\n        </div>\n    );\n}","F:\\Github\\zippy1\\src\\components\\ProjectCard\\ProjectCard.js",["206","207"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useState, useEffect } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './ProjectCard.css';\nimport deleted from '../../assets/images/Bin-Icon.png';\nimport hidden from '../../assets/images/Hide-Icon.png';\nimport {setItem} from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\nimport UpdateProject from '../UpdateModals/UpdateProject';\nimport hidecards from '../../assets/images/hiddeeen.png';\nimport { Form, Modal } from 'react-bootstrap';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\n\nexport default function ProjectCard({name, url, id, img, hide}){\n    var invisible = hide;\n    const [namecard, setcard] = useState(true);\n    const [detailcard, setdetail] = useState(false);\n    const [modalShow, setModalShow] = useState(false);\n\n    const HideCard = () => {\n        invisible = true;\n        updateWidget();\n    }\n\n    const unHideCard = () => {\n        invisible = false;\n        updateWidget();\n    }\n\n    const updateWidget = async () => {\n        const projectWidgetData = {\n            'title' : name,\n            'link' : url,\n            'invisible': invisible\n        }\n        AdminService.updateProjectWidget(id, projectWidgetData)\n            .then(response => {\n              toast.success('Card Updated!', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n              AdminService.getUserData()\n                .then(resp => {\n                    setItem('projectWidgets', resp.data.personal_projects);\n                })\n                .catch(err => console.log(err));\n            })\n            .catch(error => {\n              toast.error('Error updating, Retry!', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n            });\n        }\n\n        function DeleteModal(props) {\n            return (\n              <Modal\n                {...props}\n                size=\"lg\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n              >\n                <div className=\"flexColumn\">\n                  <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n                    <div style={{width: 20}}></div>\n                    <h2 className=\"modal-head\">Delete Card</h2>\n                    <button onClick={props.onHide}>\n                      <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n                    </button>\n                  </div>\n                  <Form>\n                    <Form.Group controlId=\"formBasicEmail\" className=\"flexColumn mb-20\">\n                      <Form.Label style={{textAlign: 'center'}}>Are you sure you want to delete this card?</Form.Label>\n                    </Form.Group>\n                  </Form>\n          \n                  <div className=\"share\" style={{justifyContent: 'center'}}>\n                    <a onClick={(e) => DeleteCard(id)} className=\"flexAlignCenter modal-button\" style={{marginRight: 10}}>Delete</a>\n                    <a onClick={props.onHide} className=\"flexAlignCenter modal-button\">Cancel</a>\n                  </div>\n          \n                </div>\n              </Modal>\n            );\n          }\n\n    const DeleteCard = async (project_id) => {        \n        AdminService.deleteProjectWidget(project_id)\n            .then(response => {\n                toast.success('Card deleted successfully!', {\n                    position: \"top-center\",\n                    autoClose: 2000,\n                    hideProgressBar: true,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n                AdminService.getUserData()\n                    .then(resp => {\n                        setItem('projectWidgets', resp.data.personal_projects);\n                    })\n                    .catch(err => console.log(err));\n                })\n            .catch(error => {\n                toast.error('Error, Cannot delete this card!', {\n                    position: \"top-center\",\n                    autoClose: 2000,\n                    hideProgressBar: true,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                })\n            });\n    }\n\n    const DeleteCardPortal = (id) => {\n        setModalShow(true);\n    }\n\n    return(\n        <>\n            <DeleteModal\n                show={modalShow}\n                onHide={() => setModalShow(false)}\n            />\n            {\n                invisible ? (\n                    <div className=\"grow1 flexColumn project-card flexEnd\" \n                        style={{  \n                            backgroundImage: img === \"\" ? null : `url(\"${img}\")`,\n                            backgroundColor: 'rgba(219,219,219,1)',\n                            backgroundSize: 'cover',\n                            backgroundRepeat: 'no-repeat'\n                        }}\n                    >                 \n                        <div id=\"overlay\" onClick={() => unHideCard()} className=\"flexColumn flexCenter flexAlignCenter\">\n                            <img src={hidecards} alt=\"hidden\" className=\"hide-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\n                            <p className=\"options-text\" style={{color: 'white'}}>Hidden</p>\n                        </div>                    \n                        <div onMouseEnter={() => {setcard(false); setdetail(true);}} className=\"flexColumn flexCenter flexAlignCenter project-textbox\">\n                            <p className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p>\n                        </div>\n                    </div>  \n                ) : (\n                    <div className=\"grow1 flexColumn project-card flexEnd\" \n                        style={{  \n                            backgroundImage: img === \"\" ? null : `url(\"${img}\")`,\n                            backgroundColor: 'rgba(219,219,219,1)',\n                            backgroundSize: 'cover',\n                            backgroundRepeat: 'no-repeat'\n                        }}\n                    >             \n                        {\n                            namecard ? (\n                                <div onMouseEnter={() => {setcard(false); setdetail(true);}} className=\"flexColumn flexCenter flexAlignCenter project-textbox\">\n                                    <p className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p>\n                                </div>\n                            ) : null\n                        }\n                        {\n                            detailcard ? (\n                                <div onMouseLeave={() => {setdetail(false); setcard(true);}} className=\"flexColumn flexCenter flexAlignCenter project-textbox1\">\n                                    <p className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p>\n                                    <div className=\"flexRow flexAround flexAlignCenter\" style={{position: 'absolute', bottom: 30, width: '75%'}}>\n                                        <img src={deleted} onClick={() => DeleteCardPortal(id)} alt=\"delete\" className=\"delete-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\n                                        <UpdateProject projectName={name} projectlink={url} projectImage={img} projectId={id}/>\n                                        <img src={hidden} onClick={() => HideCard()} alt=\"hidden\" className=\"delete-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\n                                    </div>\n                                </div>\n                            ) : null\n                        }\n                    </div>\n                )\n            }\n        </>\n    );\n}","F:\\Github\\zippy1\\src\\components\\ProjectCard\\ProjectCardDisplay.js",["208","209"],"import React, { useState, useEffect } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './ProjectCard.css';\n\nexport default function ProjectCardDisplay({name, img, url}){\n    const [namecard, setcard] = useState(true);\n    return(\n        <div className=\"grow1 flexColumn project-card flexEnd\" \n            style={{  \n                backgroundImage: img === \"\" ? null : `url(\"${img}\")`,\n                backgroundColor: 'rgba(219,219,219,1)',\n                backgroundSize: 'cover',\n                backgroundRepeat: 'no-repeat'\n            }}\n        >\n            {\n                namecard ? (\n                    <div className=\"flexColumn flexCenter flexAlignCenter project-textbox\">\n                        <p className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p>\n                    </div>\n                ) : null\n            }\n        </div>\n    );\n}","F:\\Github\\zippy1\\src\\components\\ContestCard\\ContestCardDisplay.js",[],"F:\\Github\\zippy1\\src\\components\\modals\\CodingProfileModal.js",["210","211","212","213"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Form, Modal } from 'react-bootstrap';\nimport {AiOutlineCloseCircle, AiOutlinePlusCircle} from 'react-icons/ai';\nimport { PortalMap, setItem, getItem } from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\nimport AdminService from '../../AdminServices/AdminService';\n\n  export default function CodingProfileModal() {\n    const [modalShow, setModalShow] = React.useState(false);\n    const [rankWidgets, setrankWidgets] = React.useState(getItem('rankWidgets'));\n    var username = \"\";\n    var rank = \"\";\n    var portal = \"Eg. GeeksforGeeks, CodeChef\";\n    const data = ['Geeks for Geeks', 'CodeChef', 'CodeForces', 'HackerRank', 'TopCoder', 'LeetCode'];\n\n    const formatPortal = portal => {\n      return portal.split(' ').join('').toLowerCase();\n    }\n\n    const createRankWidget = async () => {\n      var portalsArray = [];\n      rankWidgets.map(rank => (\n        portalsArray.push((rank.website_id))\n      ))\n      var exist = portalsArray.includes(getItem('website_id'));\n      if(exist){\n        toast.error('Error, Site already exists!', {\n          position: \"top-center\",\n          autoClose: 2000,\n          hideProgressBar: true,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });setModalShow(false);\n      } else{\n        if(portal.length > 0 && username.length > 0 && rank.length > 0){\n          const rankWidgetData = {\n            'rank' : getItem('Codingrank'),\n            'website_id' : getItem('website_id'),\n            'username' : getItem('Codingusername'),\n          }\n          AdminService.createRankWidget(rankWidgetData)\n            .then(response => {\n              toast.success('Details Entered!', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n              AdminService.getUserData()\n                .then(resp => {\n                  setItem('rankWidgets', resp.data.rank_widgets);\n                  setModalShow(false);\n                  window.open('/portfolio', '_self');\n                })\n                .catch(err => console.log(err));\n            })\n            .catch(error => {\n              toast.error('Error, Enter correct details!', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n            });\n        } else {\n          toast.error('Error, Fields cannot be empty!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        }\n      }\n    }\n\n    const getPortalDetails = (portal) => {\n      if(portal !== ''){\n        setItem('url', PortalMap.get(portal).url);\n        setItem('website_id', PortalMap.get(portal).id);\n        setItem('logo', PortalMap.get(portal).logo);\n      }\n    }\n\n    const UpdateCard = () => {\n      setItem('Codingportal', portal);\n      getPortalDetails(formatPortal(getItem('Codingportal')));\n      setItem('Codingusername', username);\n      setItem('Codingrank', rank);\n      createRankWidget();\n    }\n\n    function MyVerticallyCenteredModal(props) {\n      return (\n        <Modal\n          {...props}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">Add Coding Profile</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n\n            <Form.Group controlId=\"formBasicEmail\" className=\" flexColumn mb-20\">\n              <Form.Label>Website Name</Form.Label>\n              <select defaultValue={portal} onChange={(e) => portal = (e.target.value)}>\n                <option value=\"Eg. GeeksforGeeks, CodeChef\" disabled>Eg. GeeksforGeeks, CodeChef</option>\n                {data.map(platform => (\n                  <option value={platform}>{platform}</option>\n                ))}\n              </select>\n            </Form.Group>\n\n            {/* <Form.Group controlId=\"formBasicEmail\" className=\"mb-20\">\n              <Form.Label>Website Name</Form.Label>\n              <Form.Control placeholder=\"Eg. GeeksforGeeks, CodeChef\" type=\"text\" defaultValue={portal} onChange={(e) => portal = (e.target.value)} />\n            </Form.Group> */}\n  \n            <Form.Group controlId=\"formBasicPassword\" className=\"mb-20\">\n              <Form.Label>Your Profile Username </Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. abc_234\" defaultValue={username} onChange={(e) => username = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword1\">\n              <Form.Label>Your Rank</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. 2512\" defaultValue={rank} onChange={(e) => rank = (e.target.value)} />\n            </Form.Group>\n  \n          </Form>\n  \n          <div className=\"share\" style={{justifyContent: 'center'}}>\n            <a onClick={() => UpdateCard() } className=\"flexAlignCenter modal-button\">Add to Profile</a>\n          </div>\n  \n        </div>\n        </Modal>\n      );\n    }\n  \n    return (\n      <>\n        <div className=\"grow1 flexColumn flexCenter flexAlignCenter add-card\" style={{height: 250}}>\n            <button onClick={() => setModalShow(true)}>\n                <AiOutlinePlusCircle style={{fontSize: 80, color: '#C0C0C0'}} />\n            </button>\n        </div>\n  \n        <MyVerticallyCenteredModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n        />\n      </>\n    );\n  }","F:\\Github\\zippy1\\src\\components\\CodingCard\\CodingCardDisplay.js",[],"F:\\Github\\zippy1\\src\\components\\CodingCard\\CodingCard.js",["214","215"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useState } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './CodingCard.css';\nimport {BsThreeDotsVertical} from 'react-icons/bs';\nimport deleted from '../../assets/images/Bin-Icon.png';\nimport edited from '../../assets/images/Edit-Icon.png';\nimport hidden from '../../assets/images/Hide-Icon.png';\nimport hidecards from '../../assets/images/hiddeeen.png';\nimport {setItem, getItem, PortalMap} from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\nimport UpdateCodingProfile from '../UpdateModals/UpdateCodingProfile';\nimport { Modal } from 'react-bootstrap';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\nimport { Form } from 'react-bootstrap';\n\nexport default function CodingCard({name, rank, id, logo, hide}){        \n    var invisible = hide;\n    const [ bullets, setbullets ] = useState(true);\n    const [ drawer, setdrawer ] = useState(false);\n    const [option1, setoption1] = useState(false);\n    const [option2, setoption2] = useState(false);\n    const [option3, setoption3] = useState(false);\n    const [icon1, seticon1] = useState(true);\n    const [icon2, seticon2] = useState(true);\n    const [icon3, seticon3] = useState(true);\n    const [modalShow, setModalShow] = React.useState(false);\n\n    const OptionDrawer = () => {\n        setdrawer(true);\n        setbullets(false);\n    }\n    const CloseOptionDrawer = () => {\n        setdrawer(false);\n        setbullets(true);\n    }\n\n    const formatPortal = portal => {\n        return portal.split(' ').join('').toLowerCase();\n    }\n\n    const updateRankWidget = async (name) => {        \n          var website_name = formatPortal(name);\n          var website_id = PortalMap.get(website_name).id;\n          const rankWidgetData = {\n            'website_id' : website_id,\n            'rank' : rank,\n            'username': id,\n            'invisible' : invisible,\n          }\n          console.log(rankWidgetData);\n          AdminService.updateRankWidget(rankWidgetData)\n            .then(response => {\n              toast.success('Card Updated!', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n              AdminService.getUserData()\n                .then(resp => {\n                  setItem('rankWidgets', resp.data.rank_widgets);\n                })\n                .catch(err => console.log(err));\n            })\n            .catch(error => {\n              toast.error('Error updating!', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n            });\n        }\n\n      const unHideCard = (name) => {\n        invisible = false;\n        updateRankWidget(name);\n      }\n  \n      const HideCard = (name) => {\n        invisible = true;\n        updateRankWidget(name)\n      }\n\n      function DeleteModal(props) {\n        return (\n          <Modal\n            {...props}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n          >\n            <div className=\"flexColumn\">\n              <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n                <div style={{width: 20}}></div>\n                <h2 className=\"modal-head\">Delete Card</h2>\n                <button onClick={props.onHide}>\n                  <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n                </button>\n              </div>\n              <Form>\n                <Form.Group controlId=\"formBasicEmail\" className=\"flexColumn mb-20\">\n                  <Form.Label style={{textAlign: 'center'}}>Are you sure you want to delete this card?</Form.Label>\n                </Form.Group>\n              </Form>\n      \n              <div className=\"share\" style={{justifyContent: 'center'}}>\n                <a onClick={(e) => {DeleteCard(name); setModalShow(false); }} style={{marginRight: 10}} className=\"flexAlignCenter modal-button\">Delete</a>\n                <a onClick={props.onHide} className=\"flexAlignCenter modal-button\">Cancel</a>\n              </div>\n      \n            </div>\n          </Modal>\n        );\n      }\n\n    const DeleteCard = async (name) => {\n        var website_name = formatPortal(name);\n        var website_id = PortalMap.get(website_name).id;\n\n        AdminService.deleteRankWidget(website_id)\n            .then(response => {\n                toast.success('Card deleted successfully!', {\n                    position: \"top-center\",\n                    autoClose: 2000,\n                    hideProgressBar: true,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n                AdminService.getUserData()\n                    .then(resp => {\n                      setItem('rankWidgets', resp.data.rank_widgets);\n                    })\n                    .catch(err => console.log(err));\n                })\n            .catch(error => {\n                toast.error('Error, Cannot delete this card!', {\n                    position: \"top-center\",\n                    autoClose: 2000,\n                    hideProgressBar: true,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                })\n            });\n    }\n\n    const DeleteCardPortal = (name) => {\n        setModalShow(true);\n    }\n\n    return(\n            <div className=\"grow1 card11 flexColumn profile-card\" onMouseLeave={() => CloseOptionDrawer()}>\n                {\n                    invisible ? (\n                        <div id=\"overlay\" onClick={() => unHideCard(name)} className=\"flexColumn flexCenter flexAlignCenter\">\n                            <img src={hidecards} alt=\"hidden\" className=\"hide-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\n                            <p className=\"options-text\" style={{color: 'white'}}>Hidden</p>\n                        </div>\n                    ) : null\n                }\n                <div className=\"flexRow flexCenter\" style={{position: 'relative'}}>\n                    {logo === \"\" ? (\n                        <div className=\"flexRow flexCenter flexAlignCenter empty-logo\">\n                            <p className=\"profile-name\" style={{fontWeight: 700, color: 'white'}}>LOGO</p>\n                        </div>\n                    ) : (\n                        <img className=\"logo\" src={logo} alt=\"logo\" />\n                    )}\n                    { bullets ? (\n                        <div onClick={() => OptionDrawer()} className=\"flexRow option-drawer flexCenter flexAlignCenter iconcontainer\">\n                            <BsThreeDotsVertical className=\"portfolio-icon\" />                    \n                        </div>\n                        ) : null \n                    }\n                    { drawer ? (\n                        <div className=\"flexColumn flexStart options\" style={{position: 'absolute', top: '-15%', right:'-2%'}}>\n                            {icon1 ? (<img src={deleted} alt=\"delete\" onMouseEnter={() => {setoption1(true); seticon1(false);}} onClick={() => DeleteCardPortal(name)} className=\"delete-icon\" style={{height:30, width: 30, marginBottom: 10, marginLeft: option2 ? 50 : null || option3 ? 50 : null}} />) : null }\n                            { option1 ? (\n                                <div className=\"flexRow flexAlignCenter option delete-option\" onClick={() => DeleteCardPortal(name)} onMouseLeave={() => {setoption1(false); seticon1(true);}} style={{ marginBottom: 10, position: 'relative', left: 40 }}>\n                                    <img src={deleted} alt=\"delete\" style={{height:30, width: 30, marginRight: 10}} />\n                                    <p className=\"options-text\">Delete</p>\n                                </div>                            \n                                ) : null\n                            }\n                            {icon2 ? (<img src={edited} alt=\"edit\" onMouseEnter={() => {setoption2(true); seticon2(false);}} className=\"edit-icon\" style={{height:30, width: 30, marginBottom: 10, marginLeft: option1 ? 50 : null || option3 ? 50 : null}} />) : null}\n                            { option2 ? (\n                                <div className=\"flexRow flexAlignCenter option edit-option\" onMouseLeave={() => {setoption2(false); seticon2(true);}} style={{ marginBottom: 10, position: 'relative', left: 40 }}>\n                                    <UpdateCodingProfile portalName={name} Rank={rank} userName={id} />\n                                    <p className=\"options-text\">Edit</p>\n                                </div>\n                                ) : null\n                            }\n                            {icon3 ? (<img src={hidden} alt=\"hide\" onMouseEnter={() => {setoption3(true); seticon3(false);}} className=\"hide-icon\" style={{height:30, width: 30, marginBottom: 10, marginLeft: option2 ? 50 : null || option1 ? 50 : null}} />) : null}\n                            { option3 ? (\n                                <div className=\"flexRow flexAlignCenter option hide-option\" onClick={() => HideCard(name)} onMouseLeave={() => {setoption3(false); seticon3(true);}} style={{ marginBottom: 10, position: 'relative', left: 40 }}>\n                                    <img src={hidden} alt=\"hide\" style={{height:30, width: 30, marginRight: 10}} />\n                                    <p className=\"options-text\">Hide</p>\n                                </div>\n                                ) : null\n                            }\n                        </div>\n                        ) : null\n                    }\n                </div>\n                <DeleteModal\n                    show={modalShow}\n                    onHide={() => setModalShow(false)}\n                />\n                <p className=\"profile-head mb-10\"> {name === \"\" ? \"Company Name\" : name}</p>\n                <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">ID:</span> {id === \"\" ?  \"Id here\" : id }</p>\n                <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">Rank:</span> {rank === \"\" ?  \"?\" : rank  }</p>\n            </div>\n    );\n}","F:\\Github\\zippy1\\src\\AdminServices\\AdminService.js",[],"F:\\Github\\zippy1\\src\\components\\GoogleBtn.js",["216"],"F:\\Github\\zippy1\\src\\AdminServices\\dataService.js",[],"F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateCodingProfile.js",["217"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Form, Modal } from 'react-bootstrap';\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\nimport { PortalMap, setItem, getItem } from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\nimport edited from '../../assets/images/Edit-Icon.png';\n\n  export default function UpdateCodingProfile(portalName, Rank, userName) {\n    const [modalShow, setModalShow] = React.useState(false);\n    var portal1 = portalName;\n    var portal = portal1.portalName;\n    const data = ['Geeks for Geeks', 'CodeChef', 'CodeForces', 'HackerRank', 'TopCoder', 'LeetCode'];\n    var username = portal1.userName;\n    var rank = portal1.Rank;\n\n    const formatPortal = portal => {\n      return portal.split(' ').join('').toLowerCase();\n    }\n\n    const updateRankWidget = async () => {\n      if(portal.length > 0 && username.length > 0 && rank.length > 0){\n        const rankWidgetData = {\n          'rank' : getItem('Codingrank'),\n          'website_id' : getItem('website_id'),\n          'username': getItem('Codingusername'),\n        }\n        AdminService.updateRankWidget(rankWidgetData)\n          .then(response => {\n            toast.success('Card Updated!', {\n              position: \"top-center\",\n              autoClose: 2000,\n              hideProgressBar: true,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            AdminService.getUserData()\n              .then(resp => {\n                setItem('rankWidgets', resp.data.rank_widgets);\n                window.open('/portfolio', '_self')\n                setModalShow(false);\n              })\n              .catch(err => console.log(err));\n          })\n          .catch(error => {\n            toast.error('Error, Enter correct details!', {\n              position: \"top-center\",\n              autoClose: 2000,\n              hideProgressBar: true,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n          });\n      } else {\n        toast.error('Error, Fields cannot be empty!', {\n          position: \"top-center\",\n          autoClose: 2000,\n          hideProgressBar: true,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n      }\n    }\n\n    const getPortalDetails = (portal) => {\n      if(portal !== ''){\n        setItem('url', PortalMap.get(portal).url);\n        setItem('website_id', PortalMap.get(portal).id);\n        setItem('logo', PortalMap.get(portal).logo);\n      }\n    }\n\n    const UpdateCard = () => {\n      setItem('Codingportal', portal);\n      getPortalDetails(formatPortal(getItem('Codingportal')));\n      setItem('Codingusername', username);\n      setItem('Codingrank', rank);\n      updateRankWidget();\n    }\n\n    function MyVerticallyCenteredModal(props) {\n      return (\n        <Modal\n          {...props}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">Update Coding Profile</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\" className=\" flexColumn mb-20\">\n              <Form.Label>Website Name</Form.Label>\n              <select defaultValue={portal} onChange={(e) => portal = (e.target.value)}>\n                <option value=\"Eg. GeeksforGeeks, CodeChef\" disabled>Eg. GeeksforGeeks, CodeChef</option>\n                {data.map(platform => (\n                  <option value={platform}>{platform}</option>\n                ))}\n              </select>\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword\" className=\"mb-20\">\n              <Form.Label>Your Profile Username </Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. abc_234\" defaultValue={username} onChange={(e) => username = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword1\">\n              <Form.Label>Your Rank</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. 2512\" defaultValue={rank} onChange={(e) => rank = (e.target.value)} />\n            </Form.Group>\n  \n          </Form>\n  \n          <div className=\"share\" style={{justifyContent: 'center'}}>\n            <a onClick={() => UpdateCard() } className=\"flexAlignCenter modal-button\">Update</a>\n          </div>\n  \n        </div>\n        </Modal>\n      );\n    }\n  \n    return (\n      <>\n        <img src={edited} alt=\"edit\" onClick={() => setModalShow(true)} style={{height:30, width: 30, marginRight: 10}} />\n  \n        <MyVerticallyCenteredModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n        />\n      </>\n    );\n  }","F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateContestProfile.js",[],"F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateProject.js",[],"F:\\Github\\zippy1\\src\\utility\\reducer.js",[],["218","219"],"F:\\Github\\zippy1\\src\\utility\\StateProvider.js",[],"F:\\Github\\zippy1\\src\\screens\\PolicyScreen\\PolicyScreen.js",[],"F:\\Github\\zippy1\\src\\screens\\TermsScreen\\TermsScreen.js",[],"F:\\Github\\zippy1\\src\\components\\modals\\SendViaEmail.js",["220"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {useState} from 'react';\r\nimport '../../styles/HelperStyles.css'\r\nimport { Modal, Form } from 'react-bootstrap';\r\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport MailPreview from '../MailPreview/MailPreview';\r\nimport { getItem, setItem } from '../../utility/localStorageControl';\r\nimport AdminService from '../../AdminServices/AdminService';\r\n\r\nexport default function SendViaEmail() {\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n     var mails = \"\";\r\n     var resume = \"\";\r\n     const resumeData = new FormData();\r\n\r\n     const handleInput = (event) => {\r\n      resume = event.target.files[0]\r\n     }\r\n\r\n    const UploadResume = () => {\r\n      resumeData.append('file', resume)\r\n      setItem('resumeLink', resume);\r\n      console.log(getItem('resumeLink'))\r\n    }\r\n\r\n    const SendMail =  async () => {\r\n      AdminService.sendMailwithAttachment(mails, resumeData)\r\n        .then(resp => setModalShow(false))\r\n        .catch(err => console.log(err));\r\n    }\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <div className=\"flexColumn\">\r\n            <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\r\n              <div style={{width: 20}}></div>\r\n              <h2 className=\"modal-head\">Send via Email</h2>\r\n              <button onClick={props.onHide}>\r\n                <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\r\n              </button>\r\n            </div>\r\n            <Form>\r\n              <Form.Group controlId=\"formBasic1\" className=\"mb-20\">\r\n                <Form.Label>Enter the mail ID you would like to send the mail to<span style={{color: 'red'}}>*</span> </Form.Label>\r\n                <Form.Control type=\"text\" defaultValue={mails} onChange={(event) => mails = (event.target.value)} placeholder=\"example: anything@gmail.com\" />\r\n              </Form.Group>    \r\n              <Form.Group controlId=\"formBasic12\" className=\"mb-20\">\r\n                <Form.Label>Upload Resume (Optional)</Form.Label>\r\n                <Form.Control type=\"file\" defaultValue={resume} onChange={(event) => handleInput(event)} placeholder=\"Click on Upload to attach resume\" />\r\n              </Form.Group>   \r\n            </Form>\r\n\r\n            <div className=\"flexRow flexBetween\">\r\n                <div className=\"flexColumn\">\r\n                    <span className=\"modal-list\">• File size should not more than 10 MB.</span>\r\n                    <span className=\"modal-list\">• File should be in PDF format.</span>\r\n                </div>\r\n                <div className=\"grow5 share\">\r\n                    <a className=\"flexAlignCenter upload-button\" onClick={UploadResume}>Upload</a>\r\n                </div>\r\n            </div>\r\n    \r\n            <div className=\"share\" style={{justifyContent: 'center'}}>\r\n              <a onClick={SendMail} className=\"flexAlignCenter modal-button\">Send Mail</a>\r\n            </div>\r\n\r\n            <div className=\"flexRow flexCenter end-section ph-20 flexAlignCenter mv-40\">\r\n                <hr style={{width: '35%', color: 'rgba(154,154,154,1)'}} />\r\n                <p className=\"end-text\" style={{fontSize: 16}}>Mail Preview</p>\r\n                <hr style={{width: '35%', color: 'rgba(154,154,154,1)'}} />\r\n            </div>\r\n\r\n            <MailPreview />\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"share\" style={{justifyContent: 'center'}}>\r\n        <a className=\"flexAlignCenter modal-button\" onClick={() => setModalShow(true)}>Send Email with Profile</a>\r\n      </div>\r\n\r\n      <MyVerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","F:\\Github\\zippy1\\src\\components\\modals\\AttachResume.js",["221"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {useState} from 'react';\r\nimport '../../styles/HelperStyles.css'\r\nimport { Modal, Form } from 'react-bootstrap';\r\nimport {AiOutlinePlusCircle, AiOutlineCloseCircle, AiOutlineCloudDownload} from 'react-icons/ai';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport { getItem, setItem } from '../../utility/localStorageControl';\r\n\r\nexport default function AttachResumeModal() {\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  var url = getItem('resumeLink');\r\n\r\n  const ResumeAttach = async () => {\r\n    if(url !== getItem('resumeLink')){\r\n      setItem('resumeLink', url)\r\n    }\r\n    AdminService.AttachResume(url)\r\n      .then(resp => {\r\n        toast.success('Resume Link Added!', {\r\n          position: \"top-center\",\r\n          autoClose: 2000,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n        setModalShow(false);\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <div className=\"flexColumn\">\r\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\r\n            <div style={{width: 20}}></div>\r\n            <h2 className=\"modal-head\">Attach your Resume</h2>\r\n            <button onClick={props.onHide}>\r\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\r\n            </button>\r\n          </div>\r\n          <Form>\r\n            <Form.Group controlId=\"formBasicEmail\" className=\"flexColumn mb-20\">\r\n              <Form.Label style={{fontStyle: 'Poppins'}}>Enter your Resume link in the form of PDF below</Form.Label>\r\n              <textarea style={{fontStyle: 'Poppins', borderRadius: 32, margin: '10px 0'}} rows={5} type=\"text\" class=\"form-control\" defaultValue={url} placeholder=\"Example https://www.gdrive.com/profile/abc,.pdf\" onChange={(event) => url = event.target.value} />\r\n            </Form.Group>\r\n          </Form>\r\n\r\n          <span className=\"modal-list\">• Enter a proper Gdrive/Dropbox or any cloud link.</span>\r\n          <span className=\"modal-list\">• Upload the file in cloud in pdf format (Recommended).</span>\r\n\r\n          <div className=\"share\" style={{justifyContent: 'center'}}>\r\n            <a className=\"flexAlignCenter modal-button\" onClick={() => ResumeAttach()}>Add to profile</a>\r\n          </div>\r\n  \r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"grow1 attach-resume flexRow flexAlignCenter flexEvenly\">\r\n        <p className=\"resume-head\">{url.length > 0 ? 'View attached PDF' : 'Attach your Resume'}</p>\r\n        {url.length > 0 ?\r\n        (<AiOutlineCloudDownload onClick={() => setModalShow(true)} className=\"grow2\" style={{fontSize: 40, color: '#C0C0C0'}} />) :\r\n        (<AiOutlinePlusCircle onClick={() => setModalShow(true)} className=\"grow2\" style={{fontSize: 40, color: '#C0C0C0'}} />)}\r\n      </div>\r\n\r\n      <MyVerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","F:\\Github\\zippy1\\src\\components\\MailPreview\\MailPreview.js",["222","223","224","225"],"import React, {useState} from 'react';\r\nimport '../../styles/HelperStyles.css';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport {setItem, getItem} from '../../utility/localStorageControl'\r\n\r\nimport splashlogo from '../../assets/images/logo.png';\r\n\r\nexport default function MailPreview(){\r\n    return(\r\n        <div className=\"mail-box\">\r\n            <img src={splashlogo} width=\"200\" height=\"40\" style={{alignSelf: 'center'}} className=\"d-inline-block\" alt=\"logo\" />\r\n            <div className=\"mail-content-box\">\r\n                <div style={{backgroundColor: 'rgba(255,217,135,1)', borderTopLeftRadius: 8, borderTopRightRadius: 8}}>\r\n                    <h6 className=\"mailcontent-header\">{getItem('titlePortfolio')}</h6>\r\n                </div>\r\n                <div style={{padding: 20, gap: 30}} className=\"flexRow\">\r\n                    <img src={getItem('image')} className=\"profile-pic\" alt=\"profile\" />\r\n                    <div className=\"flexColumn\">\r\n                        <h2 className=\"mailcontent-name\">{getItem('name')}</h2>\r\n                        <h4 className=\"mailcontent-mail\">{getItem('email')}</h4>\r\n                        <div className=\"flexRow\" style={{alignItems: 'baseline', gap: 50}}>\r\n                            <div className=\"flexRow\" style={{alignItems: 'baseline', gap: 10}}>\r\n                                <h1 className=\"mailcontent-number\">{getItem('rankWidgets').length}</h1>\r\n                                <h5 className=\"mailcontent-sec\">Profiles</h5>\r\n                            </div>\r\n                            <div className=\"flexRow\" style={{alignItems: 'baseline', gap: 10}}>\r\n                                <h1 className=\"mailcontent-number\">{getItem('contestWidgets').length}</h1>\r\n                                <h5 className=\"mailcontent-sec\">Coding Contests</h5>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"share\" style={{justifyContent: 'center', padding: 0}} >\r\n                <a onClick className=\"flexAlignCenter modal-button\">Visit Profile</a>\r\n            </div>\r\n        </div>\r\n    );\r\n}","F:\\Github\\zippy1\\src\\components\\modals\\SentHistory.js",["226"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {useState} from 'react';\r\nimport '../../styles/HelperStyles.css'\r\nimport { Modal, Form, Table, Pagination } from 'react-bootstrap';\r\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport { setItem, getItem } from '../../utility/localStorageControl';\r\n\r\nexport default function SentHistoryModal() {\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    const [active, setActive] = useState(1);\r\n    var history = [];\r\n    let items = [];\r\n    for (let number = 1; number <= 10; number++) {\r\n    items.push(\r\n        <Pagination.Item key={number} active={number === active} onClick={() => {\r\n          setActive(number);}}>\r\n        {number}\r\n        </Pagination.Item>,\r\n    );\r\n    }\r\n\r\n    const GetHistory = async (page, item) => {\r\n      AdminService.SentHistory(page, item)\r\n        .then(resp => {\r\n          history = resp.data.mail_history;\r\n          setItem('history', history)\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n  GetHistory(active ,5);\r\n\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <div className=\"flexColumn\">\r\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\r\n            <div style={{width: 20}}></div>\r\n            <h2 className=\"modal-head\">List of E-mail Sent History</h2>\r\n            <button onClick={props.onHide}>\r\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\r\n            </button>\r\n          </div>\r\n          <Table striped bordered hover style={{borderRadius: 8}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"table-head\">Date</th>\r\n                        <th className=\"table-head\">Email ID</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {getItem('history').map((table) => (\r\n                    <tr>\r\n                        <td className=\"table-date\">{table.date.split(' ')[0]}</td>\r\n                        <td className=\"table-element\">{table.email}</td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </Table>\r\n            <div>\r\n                <Pagination className=\"pageNumbers\">\r\n                  <Pagination.Item key=\"First\" active={1 === active} disabled={active===1 ? true : false} onClick={() => {\r\n                    setActive(1); \r\n                  }}>\r\n                    First\r\n                  </Pagination.Item>\r\n                  {items}\r\n                  <Pagination.Item key=\"Next\" active={true} disabled={active===10 ? true : false} onClick={() => {\r\n                    setActive(active+1); \r\n                  }}>\r\n                    Next\r\n                  </Pagination.Item>\r\n                </Pagination>\r\n            </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"history\">\r\n          <button className=\"flexAlignCenter history-button\" style={{outline: 'none'}} onClick={() => setModalShow(true)} >\r\n              View Sent History        \r\n          </button>\r\n        </div>\r\n\r\n      <MyVerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","F:\\Github\\zippy1\\src\\AdminServices\\baseUrl.js",[],{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","severity":1,"message":"232","line":4,"column":18,"nodeType":"233","messageId":"234","endLine":4,"endColumn":25},{"ruleId":"235","severity":1,"message":"236","line":103,"column":33,"nodeType":"237","endLine":103,"endColumn":77},{"ruleId":"231","severity":1,"message":"238","line":2,"column":16,"nodeType":"233","messageId":"234","endLine":2,"endColumn":25},{"ruleId":"231","severity":1,"message":"239","line":25,"column":9,"nodeType":"233","messageId":"234","endLine":25,"endColumn":16},{"ruleId":"231","severity":1,"message":"232","line":25,"column":18,"nodeType":"233","messageId":"234","endLine":25,"endColumn":25},{"ruleId":"231","severity":1,"message":"238","line":1,"column":17,"nodeType":"233","messageId":"234","endLine":1,"endColumn":26},{"ruleId":"231","severity":1,"message":"240","line":13,"column":41,"nodeType":"233","messageId":"234","endLine":13,"endColumn":60},{"ruleId":"231","severity":1,"message":"241","line":27,"column":16,"nodeType":"233","messageId":"234","endLine":27,"endColumn":23},{"ruleId":"231","severity":1,"message":"242","line":32,"column":23,"nodeType":"233","messageId":"234","endLine":32,"endColumn":37},{"ruleId":"231","severity":1,"message":"243","line":33,"column":26,"nodeType":"233","messageId":"234","endLine":33,"endColumn":43},{"ruleId":"231","severity":1,"message":"244","line":34,"column":26,"nodeType":"233","messageId":"234","endLine":34,"endColumn":43},{"ruleId":"231","severity":1,"message":"245","line":1,"column":16,"nodeType":"233","messageId":"234","endLine":1,"endColumn":24},{"ruleId":"231","severity":1,"message":"239","line":7,"column":19,"nodeType":"233","messageId":"234","endLine":7,"endColumn":26},{"ruleId":"231","severity":1,"message":"245","line":1,"column":16,"nodeType":"233","messageId":"234","endLine":1,"endColumn":24},{"ruleId":"231","severity":1,"message":"246","line":7,"column":17,"nodeType":"233","messageId":"234","endLine":7,"endColumn":31},{"ruleId":"231","severity":1,"message":"246","line":7,"column":10,"nodeType":"233","messageId":"234","endLine":7,"endColumn":24},{"ruleId":"231","severity":1,"message":"246","line":7,"column":10,"nodeType":"233","messageId":"234","endLine":7,"endColumn":24},{"ruleId":"231","severity":1,"message":"246","line":11,"column":10,"nodeType":"233","messageId":"234","endLine":11,"endColumn":24},{"ruleId":"231","severity":1,"message":"238","line":2,"column":27,"nodeType":"233","messageId":"234","endLine":2,"endColumn":36},{"ruleId":"231","severity":1,"message":"246","line":8,"column":10,"nodeType":"233","messageId":"234","endLine":8,"endColumn":24},{"ruleId":"231","severity":1,"message":"238","line":1,"column":27,"nodeType":"233","messageId":"234","endLine":1,"endColumn":36},{"ruleId":"231","severity":1,"message":"247","line":6,"column":22,"nodeType":"233","messageId":"234","endLine":6,"endColumn":29},{"ruleId":"231","severity":1,"message":"246","line":7,"column":10,"nodeType":"233","messageId":"234","endLine":7,"endColumn":24},{"ruleId":"231","severity":1,"message":"248","line":9,"column":10,"nodeType":"233","messageId":"234","endLine":9,"endColumn":24},{"ruleId":"231","severity":1,"message":"249","line":9,"column":26,"nodeType":"233","messageId":"234","endLine":9,"endColumn":34},{"ruleId":"231","severity":1,"message":"250","line":14,"column":25,"nodeType":"233","messageId":"234","endLine":14,"endColumn":39},{"ruleId":"231","severity":1,"message":"232","line":10,"column":18,"nodeType":"233","messageId":"234","endLine":10,"endColumn":25},{"ruleId":"231","severity":1,"message":"246","line":11,"column":10,"nodeType":"233","messageId":"234","endLine":11,"endColumn":24},{"ruleId":"231","severity":1,"message":"246","line":6,"column":10,"nodeType":"233","messageId":"234","endLine":6,"endColumn":24},{"ruleId":"231","severity":1,"message":"246","line":7,"column":10,"nodeType":"233","messageId":"234","endLine":7,"endColumn":24},{"ruleId":"227","replacedBy":"251"},{"ruleId":"229","replacedBy":"252"},{"ruleId":"231","severity":1,"message":"245","line":2,"column":16,"nodeType":"233","messageId":"234","endLine":2,"endColumn":24},{"ruleId":"231","severity":1,"message":"245","line":2,"column":16,"nodeType":"233","messageId":"234","endLine":2,"endColumn":24},{"ruleId":"231","severity":1,"message":"245","line":1,"column":16,"nodeType":"233","messageId":"234","endLine":1,"endColumn":24},{"ruleId":"231","severity":1,"message":"253","line":3,"column":8,"nodeType":"233","messageId":"234","endLine":3,"endColumn":20},{"ruleId":"231","severity":1,"message":"239","line":4,"column":9,"nodeType":"233","messageId":"234","endLine":4,"endColumn":16},{"ruleId":"235","severity":1,"message":"236","line":35,"column":17,"nodeType":"237","endLine":35,"endColumn":69},{"ruleId":"231","severity":1,"message":"254","line":4,"column":17,"nodeType":"233","messageId":"234","endLine":4,"endColumn":21},"no-native-reassign",["255"],"no-negated-in-lhs",["256"],"no-unused-vars","'getItem' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","'setItem' is defined but never used.","'AiOutlinePlusCircle' is defined but never used.","'setname' is assigned a value but never used.","'setrankwidgets' is assigned a value but never used.","'setcontestwidgets' is assigned a value but never used.","'setprojectwidgets' is assigned a value but never used.","'useState' is defined but never used.","'ToastContainer' is defined but never used.","'setcard' is assigned a value but never used.","'DropdownButton' is defined but never used.","'Dropdown' is defined but never used.","'setrankWidgets' is assigned a value but never used.",["255"],["256"],"'AdminService' is defined but never used.","'Form' is defined but never used.","no-global-assign","no-unsafe-negation"]