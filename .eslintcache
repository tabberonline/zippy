[{"/home/vikraant/GitHub/zippy/src/index.js":"1","/home/vikraant/GitHub/zippy/src/App.js":"2","/home/vikraant/GitHub/zippy/src/utility/userContext.js":"3","/home/vikraant/GitHub/zippy/src/screens/Error404.js":"4","/home/vikraant/GitHub/zippy/src/screens/PortfolioScreen/PortfolioScreen.js":"5","/home/vikraant/GitHub/zippy/src/screens/AboutScreen/AboutScreen.js":"6","/home/vikraant/GitHub/zippy/src/screens/ContactScreen/ContactScreen.js":"7","/home/vikraant/GitHub/zippy/src/screens/DisplayScreen/DisplayScreen.js":"8","/home/vikraant/GitHub/zippy/src/screens/HomeScreen/HomeScreen.js":"9","/home/vikraant/GitHub/zippy/src/screens/PolicyScreen/PolicyScreen.js":"10","/home/vikraant/GitHub/zippy/src/screens/TermsScreen/TermsScreen.js":"11","/home/vikraant/GitHub/zippy/src/utility/localStorageControl.js":"12","/home/vikraant/GitHub/zippy/src/AdminServices/baseUrl.js":"13","/home/vikraant/GitHub/zippy/src/AdminServices/AdminService.js":"14","/home/vikraant/GitHub/zippy/src/components/Header/Header.js":"15","/home/vikraant/GitHub/zippy/src/components/CodingCard/CodingCard.js":"16","/home/vikraant/GitHub/zippy/src/components/Header/Header1.js":"17","/home/vikraant/GitHub/zippy/src/components/CodingCard/CodingCardDisplay.js":"18","/home/vikraant/GitHub/zippy/src/components/ContestCard/ContestCard.js":"19","/home/vikraant/GitHub/zippy/src/components/modals/CodingProfileModal.js":"20","/home/vikraant/GitHub/zippy/src/components/modals/ContestProfileModal.js":"21","/home/vikraant/GitHub/zippy/src/components/Footer/Footer.js":"22","/home/vikraant/GitHub/zippy/src/components/modals/ProjectModal.js":"23","/home/vikraant/GitHub/zippy/src/components/modals/SendViaEmail.js":"24","/home/vikraant/GitHub/zippy/src/components/modals/SentHistory.js":"25","/home/vikraant/GitHub/zippy/src/components/ProjectCard/ProjectCard.js":"26","/home/vikraant/GitHub/zippy/src/components/ContestCard/ContestCardDisplay.js":"27","/home/vikraant/GitHub/zippy/src/components/Loader/Loader.js":"28","/home/vikraant/GitHub/zippy/src/components/FeatureCard/FeatureCard.js":"29","/home/vikraant/GitHub/zippy/src/components/ProjectCard/ProjectCardDisplay.js":"30","/home/vikraant/GitHub/zippy/src/components/AchievementCard/AchievementCard.js":"31","/home/vikraant/GitHub/zippy/src/components/modals/ShareModal.js":"32","/home/vikraant/GitHub/zippy/src/components/modals/PortfolioModal.js":"33","/home/vikraant/GitHub/zippy/src/components/FAQCard/FAQCard.js":"34","/home/vikraant/GitHub/zippy/src/components/modals/AttachResume.js":"35","/home/vikraant/GitHub/zippy/src/components/modals/LinkedInProfile.js":"36","/home/vikraant/GitHub/zippy/src/AdminServices/dataService.js":"37","/home/vikraant/GitHub/zippy/src/components/UpdateModals/UpdateProject.js":"38","/home/vikraant/GitHub/zippy/src/components/MailPreview/MailPreview.js":"39","/home/vikraant/GitHub/zippy/src/components/GoogleBtn.js":"40","/home/vikraant/GitHub/zippy/src/components/UpdateModals/UpdateCodingProfile.js":"41","/home/vikraant/GitHub/zippy/src/components/UpdateModals/UpdateContestProfile.js":"42","/home/vikraant/GitHub/zippy/src/app/store.js":"43","/home/vikraant/GitHub/zippy/src/features/user/userSlice.js":"44"},{"size":438,"mtime":1625312404410,"results":"45","hashOfConfig":"46"},{"size":1570,"mtime":1625318108230,"results":"47","hashOfConfig":"46"},{"size":818,"mtime":1625291301747,"results":"48","hashOfConfig":"46"},{"size":638,"mtime":1625291301747,"results":"49","hashOfConfig":"46"},{"size":9757,"mtime":1625310888245,"results":"50","hashOfConfig":"46"},{"size":2386,"mtime":1625291301747,"results":"51","hashOfConfig":"46"},{"size":4405,"mtime":1625310697620,"results":"52","hashOfConfig":"46"},{"size":6244,"mtime":1625310729056,"results":"53","hashOfConfig":"46"},{"size":7384,"mtime":1625310811741,"results":"54","hashOfConfig":"46"},{"size":8912,"mtime":1625291301747,"results":"55","hashOfConfig":"46"},{"size":8915,"mtime":1625291301747,"results":"56","hashOfConfig":"46"},{"size":3867,"mtime":1625310063355,"results":"57","hashOfConfig":"46"},{"size":160,"mtime":1625291301739,"results":"58","hashOfConfig":"46"},{"size":2157,"mtime":1625291301739,"results":"59","hashOfConfig":"46"},{"size":2250,"mtime":1625319527346,"results":"60","hashOfConfig":"46"},{"size":10683,"mtime":1625310118472,"results":"61","hashOfConfig":"46"},{"size":2760,"mtime":1625319509018,"results":"62","hashOfConfig":"46"},{"size":1196,"mtime":1625291301743,"results":"63","hashOfConfig":"46"},{"size":10268,"mtime":1625310127816,"results":"64","hashOfConfig":"46"},{"size":5667,"mtime":1625310149268,"results":"65","hashOfConfig":"46"},{"size":5097,"mtime":1625310156096,"results":"66","hashOfConfig":"46"},{"size":759,"mtime":1625291301743,"results":"67","hashOfConfig":"46"},{"size":4288,"mtime":1625310313863,"results":"68","hashOfConfig":"46"},{"size":4096,"mtime":1625310318971,"results":"69","hashOfConfig":"46"},{"size":4303,"mtime":1625310076751,"results":"70","hashOfConfig":"46"},{"size":9038,"mtime":1625310428536,"results":"71","hashOfConfig":"46"},{"size":1323,"mtime":1625291301743,"results":"72","hashOfConfig":"46"},{"size":385,"mtime":1625291301743,"results":"73","hashOfConfig":"46"},{"size":572,"mtime":1625291301743,"results":"74","hashOfConfig":"46"},{"size":1870,"mtime":1625291301743,"results":"75","hashOfConfig":"46"},{"size":660,"mtime":1625291301743,"results":"76","hashOfConfig":"46"},{"size":2642,"mtime":1625310070147,"results":"77","hashOfConfig":"46"},{"size":4751,"mtime":1625310307362,"results":"78","hashOfConfig":"46"},{"size":1298,"mtime":1625291301743,"results":"79","hashOfConfig":"46"},{"size":3819,"mtime":1625310143108,"results":"80","hashOfConfig":"46"},{"size":4316,"mtime":1625310167045,"results":"81","hashOfConfig":"46"},{"size":2269,"mtime":1625291301739,"results":"82","hashOfConfig":"46"},{"size":4461,"mtime":1625310690512,"results":"83","hashOfConfig":"46"},{"size":2654,"mtime":1625291301743,"results":"84","hashOfConfig":"46"},{"size":2143,"mtime":1625318187319,"results":"85","hashOfConfig":"46"},{"size":5131,"mtime":1625310492957,"results":"86","hashOfConfig":"46"},{"size":5114,"mtime":1625310683364,"results":"87","hashOfConfig":"46"},{"size":285,"mtime":1625291581158,"results":"88","hashOfConfig":"46"},{"size":2538,"mtime":1625318874781,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"n4ksww",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"92"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"92"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"92"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"92"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"92"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"92"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"92"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"92"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"92"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"92"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"92"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"92"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"92"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"92"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"92"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"92"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"92"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"92"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/vikraant/GitHub/zippy/src/index.js",[],["197","198"],"/home/vikraant/GitHub/zippy/src/App.js",[],"/home/vikraant/GitHub/zippy/src/utility/userContext.js",[],"/home/vikraant/GitHub/zippy/src/screens/Error404.js",[],"/home/vikraant/GitHub/zippy/src/screens/PortfolioScreen/PortfolioScreen.js",["199"],"import React, { useContext, useState } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './PortfolioScreen.css';\nimport Footer from '../../components/Footer/Footer';\nimport CodingCard from '../../components/CodingCard/CodingCard';\nimport ContestCard from '../../components/ContestCard/ContestCard';\nimport ProjectCard from '../../components/ProjectCard/ProjectCard';\nimport CodingProfileModal from '../../components/modals/CodingProfileModal';\nimport ContestProfileModal from '../../components/modals/ContestProfileModal';\nimport ProjectModal from '../../components/modals/ProjectModal';\nimport ShareModal from '../../components/modals/ShareModal';\nimport SentHistoryModal from '../../components/modals/SentHistory';\nimport { AiOutlineCheck, AiOutlineEdit} from 'react-icons/ai';\nimport $ from 'jquery';\nimport Header1 from '../../components/Header/Header1';\nimport { getItem, setItem, ReversePortalMap, SuccessToast, ErrorToast } from '../../utility/localStorageControl';\nimport AdminService from '../../AdminServices/AdminService';\nimport { ToastContainer } from 'react-toastify';\nimport {isMobile} from 'react-device-detect';\nimport AttachResumeModal from '../../components/modals/AttachResume';\nimport SendViaEmail from '../../components/modals/SendViaEmail';\nimport Loader from '../../components/Loader/Loader';\nimport { ProgrammerContext } from '../../utility/userContext';\nimport LinkedInProfileModal from '../../components/modals/LinkedInProfile';\nconst API_KEY = 'AFjzy7b0VSvCEJhKDtcQ6z';\nconst processAPI = 'https://cdn.filestackcontent.com';\n\nfunction PortfolioScreen() {\n  const [user, setUser] = useContext(ProgrammerContext);\n  var title = user.portfolio.title;\n  var desc = user.portfolio.description;\n  const [edit1, setedit] = useState(true);\n  const [edit2, setedit2] = useState(true);\n  const [loader, setloader] = useState(false);\n\n  const Edit1 = () => {\n    $(\".title\").prop(\"readonly\", false);\n    setedit(false);\n  } \n  const Edit2 = () => {\n    $(\".desc\").prop(\"readonly\", false);\n    setedit2(false);\n  } \n  const Save1 = () => {\n    $(\".title\").prop(\"readonly\", true);\n    setedit(true);\n    setItem('titlePortfolio', title);\n    setloader(true);\n    UpdatePortfolio();\n  } \n  const Save2 = () => {\n    $(\".desc\").prop(\"readonly\", true);\n    setedit2(true);\n    setItem('descPortfolio', desc);\n    setloader(true);\n    UpdatePortfolio();\n  } \n  const UpdatePortfolio = async () =>{\n    if(desc.length > 0 && title.length > 0){\n      const UpdatePortfolioData = {\n        'title': title,\n        'description': desc,\n      }\n      AdminService.updatePortfolio(UpdatePortfolioData)\n        .then(resp => {\n          SuccessToast('Details Updated!')\n          AdminService.getUserData()\n            .then(resp => {\n              setloader(false);\n              setUser(prevUser => ({...prevUser,\n                portfolio: resp.data.portfolio,\n              }));\n            })\n            .catch(err => {\n              ErrorToast(\"Some Error Occured.\")\n              setloader(false);\n            });\n        })\n        .catch(err => {\n          ErrorToast('Error, Please retry!')\n          setloader(false);\n        });\n    } else {\n      ErrorToast('Error, Fields cannot be empty!')\n      setloader(false);\n    }\n  }\n\n  return (\n    <div className=\"#portfolio-screen\">    \n    {loader ? <Loader /> : null}  \n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar={true}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n      <Header1 open={() => setloader(true)} close={() => setloader(false)} />\n      <div className=\"flexRow mw1100 flexBetween\" style={{}}>\n        <SendViaEmail open={() => setloader(true)} close={() => setloader(false)} />\n        <SentHistoryModal open={() => setloader(true)} close={() => setloader(false)} />\n        <ShareModal open={() => setloader(true)} close={() => setloader(false)} />\n      </div>\n      <div className=\"mw1100\">\n        <div className=\"p-40 flexColumn portfolio-section\">\n          <div className=\"flexColumn\">\n            <div className=\"flexRow flexCenter flexAlignCenter\">\n              <input type=\"text\" style={{backgroundColor: edit1 ? 'inherit' : 'white', width: '75%'}} autoComplete=\"off\" autoCorrect=\"off\" autoCapitalize=\"off\" spellCheck=\"false\" className=\"title\" defaultValue={title} onChange={(event) => title = event.target.value} placeholder=\"Portfolio Title\" readOnly />\n              <div className=\"flexRow flexCenter flexAlignCenter iconcontainer1\" style={{left: -15, top: -15}}>\n                {\n                  edit1 ? <AiOutlineEdit className=\"portfolio-icon\" onClick={()=>Edit1()} style={{cursor: 'pointer'}} />\n                  : <AiOutlineCheck className=\"portfolio-icon\" onClick={()=>Save1()} style={{cursor: 'pointer'}} />\n                }\n              </div>\n            </div>\n            <hr style={{color : '#717070', width: '80%', margin: 'auto', marginTop: 10}} />\n            <div className=\"flexColumn info-sec\">\n              <p className=\"name mb-20 pl-20\">Hello! I am <strong>{user.name}</strong></p>\n              <div className=\"flexRow\">\n                <textarea style={{backgroundColor: edit2 ? 'inherit' : 'white'}} autocomplete=\"off\" autoCorrect=\"off\" autoCapitalize=\"off\" spellCheck=\"false\" rows=\"5\" className=\"desc\" value={desc} onChange={(event) => desc = event.target.value} readOnly placeholder=\"Enter your College and profile description here\" />\n                <div className=\"flexRow flexCenter flexAlignCenter iconcontainer1\" style={{left: -15, top: -15}}>\n                {\n                  edit2 ?<AiOutlineEdit className=\"portfolio-icon\" onClick={()=>Edit2()} style={{cursor: 'pointer'}} />\n                  : <AiOutlineCheck className=\"portfolio-icon\" onClick={()=>Save2()} style={{cursor: 'pointer'}} />\n                }\n                </div>\n              </div>\n            </div>\n            <div className=\"flexColumn mv-20\">\n              <p className=\"card-heading mb-20\">Resume</p>\n              <AttachResumeModal open={() => setloader(true)} close={() => setloader(false)} />\n            </div>\n            <div className=\"flexColumn mv-20\">\n              <p className=\"card-heading mb-20\">Socials</p>\n              <LinkedInProfileModal open={() => setloader(true)} close={() => setloader(false)} />\n            </div>\n            <div className=\"coding-profile mv-20\">\n              <p className=\"card-heading mb-20\">Coding Profile</p>\n              <div className=\"flexRow flexWrap\">\n                { user.rank_widgets !== [''] ?\n                    (\n                      user.rank_widgets.map(profile => (\n                        <CodingCard url={profile.link} open={() => setloader(true)} close={() => setloader(false)} name={ReversePortalMap.get(profile.website_id.toString()).name} id={profile.website_username} rank={profile.rank} logo={ReversePortalMap.get(profile.website_id.toString()).logo} hide={profile.invisible} />\n                      ))\n                    ) : null\n                }\n                {\n                  user.rank_widgets.length < 3 ? (\n                    <CodingProfileModal open={() => setloader(true)} close={() => setloader(false)} />\n                  ) : null\n                }\n              </div>\n            </div>\n            <div className=\"coding-profile mv-20\">\n              <p className=\"card-heading mb-20\">Contests Won</p>\n              <div className=\"flexRow flexWrap\">\n                { user.contest_widgets !== [''] ?\n                    (\n                      user.contest_widgets.map(profile => (\n                        <ContestCard open={() => setloader(true)} close={() => setloader(false)} card_id={profile.id} name={ReversePortalMap.get(profile.website_id.toString()).name} id={profile.website_username} rank={profile.rank} logo={ReversePortalMap.get(profile.website_id.toString()).logo} contest={profile.contest_name} hide={profile.invisible} />\n                      ))\n                    ) : null\n                }\n                {\n                  user.contest_widgets.length < 3 ? (\n                    <ContestProfileModal open={() => setloader(true)} close={() => setloader(false)} />\n                  ) : null\n                }\n              </div>\n            </div>\n            <div className=\"coding-profile mv-20\">\n              <p className=\"card-heading mb-20\">Personal Projects</p>\n              <div className=\"flexRow flexWrap\">\n                { user.project_widgets !== [''] ?\n                    (\n                      user.project_widgets.map(project => (\n                        <ProjectCard open={() => setloader(true)} close={() => setloader(false)} name={project.title} url={project.link} img={`${processAPI}/${API_KEY}/urlscreenshot=agent:${isMobile ? 'mobile' : 'desktop'}/${project.link}`} id={project.id} hide={project.invisible} techstack={project.tech_stack} desc={project.description} />\n                      ))\n                    ) : null\n                }   \n                {\n                  user.project_widgets.length < 3 ? ( \n                    <ProjectModal open={() => setloader(true)} close={() => setloader(false)} />\n                  ) : null\n                }             \n              </div>\n            </div>\n          </div>\n          <div className=\"flexRow flexCenter end-section ph-20 flexAlignCenter mv-40\">\n            <hr style={{width: '35%', color: 'rgba(154,154,154,1)'}} />\n            <p className=\"end-text\">That's all folks</p>\n            <hr style={{width: '35%', color: 'rgba(154,154,154,1)'}} />\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default PortfolioScreen;\n","/home/vikraant/GitHub/zippy/src/screens/AboutScreen/AboutScreen.js",[],"/home/vikraant/GitHub/zippy/src/screens/ContactScreen/ContactScreen.js",[],"/home/vikraant/GitHub/zippy/src/screens/DisplayScreen/DisplayScreen.js",[],"/home/vikraant/GitHub/zippy/src/screens/HomeScreen/HomeScreen.js",["200"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {useState} from 'react';\nimport '../../styles/HelperStyles.css';\nimport './HomeScreen.css';\nimport Header from '../../components/Header/Header';\nimport introimg from '../../assets/images/handshake-colour.png';\nimport whytabber from '../../assets/images/drawkit-content-man-colour.png'\nimport {BiCheckCircle} from 'react-icons/bi';\nimport FeatureCard from '../../components/FeatureCard/FeatureCard';\nimport AchievementCard from '../../components/AchievementCard/AchievementCard';\nimport FAQCard from '../../components/FAQCard/FAQCard';\nimport Footer from '../../components/Footer/Footer';\nimport PortfolioModal from '../../components/modals/PortfolioModal';\nimport { Animated } from 'react-animated-css';\nimport Axios from 'axios';\nimport users from '../../assets/images/users.png';\nimport links from '../../assets/images/links.png';\nimport review from '../../assets/images/Review.png';\nimport onpoint from '../../assets/images/OnPoint.png';\nimport modify from '../../assets/images/Modifiable.png';\nimport nolimit from '../../assets/images/NoLimit.png';\nimport projects from '../../assets/images/Projects.png';\nimport achievements from '../../assets/images/Achievements.png';\nimport {API_ENDPOINT} from '../../AdminServices/baseUrl';\nimport Loader from '../../components/Loader/Loader';\nimport { ErrorToast } from '../../utility/localStorageControl';\nimport {ToastContainer} from 'react-toastify';\n\nfunction HomeScreen() {\n  const [QnA, setQnA] = useState([]);\n  const [Achievements, setAments] = useState([]);\n  const [Features, setFeatures] = useState([]);\n  const [loader, setloader] = useState(false);\n\n  const getData = async () =>{\n    setloader(true);\n    Axios.get(`${API_ENDPOINT}/fe/get?page_type=Home&key=QnA`)\n      .then(resp => {\n        setQnA(resp.data.value);\n      })\n    .catch(err => ErrorToast(\"Some Error Occured.\"));\n    Axios.get(`${API_ENDPOINT}/fe/get?page_type=Home&key=Achievements`)\n      .then(resp => {\n        setAments(resp.data.value)\n      })\n      .catch(err => ErrorToast(\"Some Error Occured.\"));\n    Axios.get(`${API_ENDPOINT}/fe/get?page_type=Home&key=Features`)\n      .then(resp => {\n        setFeatures(resp.data.value);\n        setloader(false);\n      })\n      .catch(err => {ErrorToast(\"Some Error Occured.\")\n        setloader(false);\n      })\n  }\n\n  window.onload = () => {\n    getData();\n  }\n  \n  return (\n    <div className=\"#home-screen\">\n      {loader ? <Loader /> : null}\n      <Header open={() => setloader(true)} close={() => setloader(false)} />\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n        <div id=\"intro-section\">\n          <div className=\"mw1100 mobile-column flexRow flexAround flexAlignCenter\">\n            {/* <img className=\"intro-img\" src={introimg} alt=\"intro\" /> */}\n            <div className=\"embed-responsive embed-responsive-16by9\">\n              <iframe title=\"Tabber Advertisement Video\" frameborder=\"0\" className=\"embed-responsive-item\" src=\"https://www.youtube.com/embed/_2S0x-YV3XQ?rel=0\" allowFullScreen />\n            </div>\n            <div className=\"mw600 mobile-center flexColumn\">\n                <h1 className=\"intro-text\">\n                    Improve your chances of getting hired, just Tab it for \n                    <span style={{color: 'rgba(0,229,216,1)'}}> FREE</span>\n                </h1>\n                <PortfolioModal open={() => setloader(true)} close={() => setloader(false)} home={true} />\n            </div>\n          </div>\n        </div>\n      </Animated>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar={true}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n      <div id=\"why-tabber\">\n        <div className=\"mw1100 flexRow mobile-column flexAround flexAlignCenter\">\n          <div className=\"mw600 flexColumn mv-40\">\n              <h1 className=\"whytabber-heading\">Why <span style={{color: '#077A73'}}>tabber?</span></h1>\n              <p className=\"whytabber-text\">Are you tired of sending <strong>each and every link</strong> to recruiters taking the hassle of mentioning each and every <strong>rank</strong>? Say no more! because Tabber is here to make this a possibility.</p>\n              <p className=\"whytabber-features mt-50 mb-20\">The features which are covered in this</p>\n              <p className=\"ml-19 whytabber-point flexAlignCenter\"><BiCheckCircle style={{color: '#077A73', marginRight: 10}} />Add all your portfolio profiles.</p>\n              <p className=\"ml-19 whytabber-point flexAlignCenter\"><BiCheckCircle style={{color: '#077A73', marginRight: 10}} />Edit your resume live on the go.</p>\n              <p className=\"ml-19 whytabber-point flexAlignCenter\"><BiCheckCircle style={{color: '#077A73', marginRight: 10}} />Send and keep track of emails to recruiters within Tabby.</p>\n              <p className=\"ml-19 whytabber-point flexAlignCenter\"><BiCheckCircle style={{color: '#077A73', marginRight: 10}} />Tabby avoids spamming, thus increasing the chances of you getting noticed! </p>\n              <p className=\"ml-19 pb-100 whytabber-point flexAlignCenter\"><BiCheckCircle style={{color: '#077A73', marginRight: 10}} />Get a single shareable link.</p>\n          </div>\n          <img className=\"intro-img\" src={whytabber} alt=\"why-tabber\" />\n        </div>\n      </div>\n      </Animated>\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n      <div id=\"tabberfeatures\">\n        <div className=\"mw1100 pl-40 flexColumn\">\n          <h1 className=\"tabberfeatures-heading\">What we got you</h1>\n          <div className=\"flexRow flexBetween\" style={{flexWrap: 'wrap'}}>\n              {Features.map(feature => (\n                  <FeatureCard key={feature.sr} name={feature.name} desc={feature.desc} \n                    img={feature.sr === 1 ? review :\n                      feature.sr === 2 ? onpoint : \n                      feature.sr === 3 ? modify : \n                      feature.sr === 4 ? nolimit :\n                      feature.sr === 5 ? projects : achievements} \n                  />\n              ))}\n          </div>\n        </div>\n      </div>\n      </Animated>\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n      <div id=\"achievements\">\n        <div className=\"mw1100 pl-40 flexColumn\">\n          <h1 className=\"achievements-heading\">Achievements we have made, so far</h1>\n          <div className=\"flexRow flexCenter\" style={{flexWrap: 'wrap'}}>\n              {Achievements.map(achievement => (\n                  <AchievementCard key={achievement.sr} name={achievement.name} desc={achievement.desc} image={achievement.sr === 1 ? users : links} />\n              ))}\n          </div>\n        </div>\n      </div>\n      </Animated>\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n      <div id=\"faq\">\n        <div className=\"mw1100 ph-40 flexColumn\">\n          <h1 className=\"tabberfeatures-heading\">Frequently Asked Questions</h1>\n          {QnA.map(ques => (\n              <FAQCard key={ques.sr} ques={ques.ques} ans={ques.ans} />\n          ))}\n        </div>\n       </div>\n      </Animated>\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n        <Footer />\n      </Animated>\n    </div>\n  );\n}\n\nexport default HomeScreen;\n","/home/vikraant/GitHub/zippy/src/screens/PolicyScreen/PolicyScreen.js",[],"/home/vikraant/GitHub/zippy/src/screens/TermsScreen/TermsScreen.js",[],"/home/vikraant/GitHub/zippy/src/utility/localStorageControl.js",[],"/home/vikraant/GitHub/zippy/src/AdminServices/baseUrl.js",[],"/home/vikraant/GitHub/zippy/src/AdminServices/AdminService.js",[],"/home/vikraant/GitHub/zippy/src/components/Header/Header.js",[],"/home/vikraant/GitHub/zippy/src/components/CodingCard/CodingCard.js",["201","202","203"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useState, useContext } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './CodingCard.css';\nimport {BsThreeDotsVertical} from 'react-icons/bs';\nimport deleted from '../../assets/images/Bin-Icon.png';\nimport edited from '../../assets/images/Edit-Icon.png';\nimport hidden from '../../assets/images/Hide-Icon.png';\nimport hidecards from '../../assets/images/hiddeeen.png';\nimport {setItem, getItem, PortalMap, SuccessToast, ErrorToast} from '../../utility/localStorageControl';\nimport AdminService from '../../AdminServices/AdminService';\nimport UpdateCodingProfile from '../UpdateModals/UpdateCodingProfile';\nimport { Modal } from 'react-bootstrap';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\nimport { Form } from 'react-bootstrap';\nimport { ProgrammerContext } from '../../utility/userContext';\nimport { ClickAwayListener } from '@material-ui/core';\n\nexport default function CodingCard({name, rank, id, logo, hide, open, close, url}){       \n  const [user, setUser] = useContext(ProgrammerContext); \n    var invisible = hide;\n    const [ bullets, setbullets ] = useState(true);\n    const [ drawer, setdrawer ] = useState(false);\n    const [option1, setoption1] = useState(false);\n    const [option2, setoption2] = useState(false);\n    const [option3, setoption3] = useState(false);\n    const [icon1, seticon1] = useState(true);\n    const [icon2, seticon2] = useState(true);\n    const [icon3, seticon3] = useState(true);\n    const [modalShow, setModalShow] = React.useState(false);\n\n    const OptionDrawer = () => {\n        setdrawer(true);\n        setbullets(false);\n    }\n    const CloseOptionDrawer = () => {\n        setdrawer(false);\n        setbullets(true);\n    }\n\n    const formatPortal = portal => {\n        return portal.split(' ').join('').toLowerCase();\n    }\n\n    const updateRankWidget = async (name) => { \n          open();       \n          var website_name = formatPortal(name);\n          var website_id = PortalMap.get(website_name).id;\n          const rankWidgetData = {\n            'website_id' : website_id,\n            'rank' : rank,\n            'username': id,\n            'invisible' : invisible,\n            'link' : url,\n          }\n          AdminService.updateRankWidget(rankWidgetData)\n            .then(response => {\n              SuccessToast('Card Updated!');\n              AdminService.getUserData()\n                .then(resp => {\n                  setUser(prevUser => ({...prevUser,\n                    rank_widgets: resp.data.rank_widgets,\n                  }));\n                  close();\n                })\n                .catch(err => {\n                  ErrorToast('Some Error Occured!');\n                  close();\n                });\n            })\n            .catch(error => {\n              ErrorToast('Error Updating!');\n              close();\n            });\n        }\n\n      const unHideCard = (name) => {\n        open();\n        invisible = false;\n        updateRankWidget(name);\n      }\n  \n      const HideCard = (name) => {\n        open();\n        invisible = true;\n        updateRankWidget(name)\n      }\n\n      function DeleteModal(props) {\n        return (\n          <Modal\n            {...props}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n          >\n            <div className=\"flexColumn\">\n              <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n                <div style={{width: 20}}></div>\n                <h2 className=\"modal-head\">Delete Card</h2>\n                <button onClick={props.onHide}>\n                  <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n                </button>\n              </div>\n              <Form>\n                <Form.Group controlId=\"formBasicEmail\" className=\"flexColumn mb-20\">\n                  <Form.Label style={{textAlign: 'center'}}>Are you sure you want to delete this card?</Form.Label>\n                </Form.Group>\n              </Form>\n      \n              <div className=\"share\" style={{justifyContent: 'center'}}>\n                <a onClick={(e) => {DeleteCard(name); setModalShow(false); }} style={{marginRight: 10}} className=\"flexAlignCenter modal-button\">Delete</a>\n                <a onClick={props.onHide} className=\"flexAlignCenter modal-button\">Cancel</a>\n              </div>\n      \n            </div>\n          </Modal>\n        );\n      }\n\n    const DeleteCard = async (name) => {\n        open();\n        var website_name = formatPortal(name);\n        var website_id = PortalMap.get(website_name).id;\n\n        AdminService.deleteRankWidget(website_id)\n            .then(response => {\n                SuccessToast('Card Successfully Deleted');\n                AdminService.getUserData()\n                    .then(resp => {\n                      setUser(prevUser => ({...prevUser,\n                        rank_widgets: resp.data.rank_widgets,\n                      }));\n                      close();\n                    })\n                    .catch(err => {\n                        console.log(err);\n                        close();\n                      });\n                })\n            .catch(error => {\n                ErrorToast('Error, Cannot delete this card!');\n                close();\n            });\n    }\n\n    const DeleteCardPortal = (name) => {\n        setModalShow(true);\n    }\n\n    return(\n          <ClickAwayListener onClickAway={() => CloseOptionDrawer()}>\n            <div className=\"grow1 card11 flexColumn profile-card\">\n                {\n                    invisible ? (\n                        <div id=\"overlay\" onClick={() => unHideCard(name)} className=\"flexColumn flexCenter flexAlignCenter\">\n                            <img src={hidecards} alt=\"hidden\" className=\"hide-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\n                            <p className=\"options-text\" style={{color: 'white'}}>Hidden</p>\n                        </div>\n                    ) : null\n                }\n                <div className=\"flexRow flexCenter\" style={{position: 'relative'}}>\n                    {logo === \"\" ? (\n                        <div className=\"flexRow flexCenter flexAlignCenter empty-logo\">\n                            <p className=\"profile-name\" style={{fontWeight: 700, color: 'white'}}>LOGO</p>\n                        </div>\n                    ) : (\n                        <img className=\"logo\" src={logo} alt=\"logo\" />\n                    )}\n                    { bullets ? (\n                        <div onClick={() => OptionDrawer()} className=\"flexRow option-drawer flexCenter flexAlignCenter iconcontainer\">\n                            <BsThreeDotsVertical className=\"portfolio-icon\" />                    \n                        </div>\n                        ) : null \n                    }\n                    { drawer ? (\n                        <div className=\"flexColumn flexStart options\" style={{position: 'absolute', top: '-15%', right:'-2%'}}>\n                            {icon1 ? (<img src={deleted} alt=\"delete\" onMouseEnter={() => {setoption1(true); seticon1(false);}} onClick={() => DeleteCardPortal(name)} className=\"delete-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer', marginLeft: option2 ? 50 : null || option3 ? 50 : null}} />) : null }\n                            { option1 ? (\n                                <div className=\"flexRow flexAlignCenter option delete-option\" onClick={() => DeleteCardPortal(name)} onMouseLeave={() => {setoption1(false); seticon1(true);}} style={{ marginBottom: 10, position: 'relative', left: 40, cursor: 'pointer' }}>\n                                    <img src={deleted} alt=\"delete\" style={{height:30, width: 30, marginRight: 10}} />\n                                    <p className=\"options-text\">Delete</p>\n                                </div>                            \n                                ) : null\n                            }\n                            {icon2 ? (<img src={edited} alt=\"edit\" onMouseEnter={() => {setoption2(true); seticon2(false);}} className=\"edit-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer', marginLeft: option1 ? 50 : null || option3 ? 50 : null}} />) : null}\n                            { option2 ? (\n                                <ClickAwayListener onClickAway={() => {setoption2(false); seticon2(true);}}>\n                                  <div className=\"flexRow flexAlignCenter option edit-option\" style={{ marginBottom: 10, position: 'relative', left: 40, cursor: 'pointer' }}>\n                                      <UpdateCodingProfile portalName={name} Rank={rank} userName={id} open={open} close={close} url={url} />\n                                      <p className=\"options-text\">Edit</p>\n                                  </div>                                \n                                </ClickAwayListener>\n                                ) : null\n                            }\n                            {icon3 ? (<img src={hidden} alt=\"hide\" onMouseEnter={() => {setoption3(true); seticon3(false);}} className=\"hide-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer', marginLeft: option2 ? 50 : null || option1 ? 50 : null}} />) : null}\n                            { option3 ? (\n                                <div className=\"flexRow flexAlignCenter option hide-option\" onClick={() => HideCard(name)} onMouseLeave={() => {setoption3(false); seticon3(true);}} style={{ marginBottom: 10, position: 'relative', left: 40, cursor: 'pointer' }}>\n                                    <img src={hidden} alt=\"hide\" style={{height:30, width: 30, marginRight: 10}} />\n                                    <p className=\"options-text\">Hide</p>\n                                </div>\n                                ) : null\n                            }\n                        </div>\n                        ) : null\n                    }\n                </div>\n                <DeleteModal\n                    show={modalShow}\n                    onHide={() => setModalShow(false)}\n                />\n                <div style={{cursor: 'pointer'}}  onClick={() => window.open(url)}>\n                  <p className=\"profile-head mb-10\"> {name === \"\" ? \"Company Name\" : name}</p>\n                  <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">ID:</span> {id === \"\" ?  \"Id here\" : id }</p>\n                  <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">Rank:</span> {rank === \"\" ?  \"?\" : rank  }</p>\n                </div>\n            </div>\n          </ClickAwayListener>\n    );\n}","/home/vikraant/GitHub/zippy/src/components/Header/Header1.js",[],"/home/vikraant/GitHub/zippy/src/components/CodingCard/CodingCardDisplay.js",[],"/home/vikraant/GitHub/zippy/src/components/ContestCard/ContestCard.js",["204"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useState, useContext } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './ContestCard.css';\nimport {BsThreeDotsVertical} from 'react-icons/bs';\nimport deleted from '../../assets/images/Bin-Icon.png';\nimport edited from '../../assets/images/Edit-Icon.png';\nimport hidden from '../../assets/images/Hide-Icon.png';\nimport hidecards from '../../assets/images/hiddeeen.png';\nimport {ErrorToast, PortalMap, SuccessToast} from '../../utility/localStorageControl';\nimport AdminService from '../../AdminServices/AdminService';\nimport UpdateContestProfile from '../UpdateModals/UpdateContestProfile';\nimport { Form, Modal } from 'react-bootstrap';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\nimport { ProgrammerContext } from '../../utility/userContext';\nimport { ClickAwayListener } from '@material-ui/core';\n\nexport default function ContestCard({name, rank, id, logo, contest, card_id, hide, open, close}){ \n    const [user, setUser] = useContext(ProgrammerContext); \n    const [ bullets, setbullets ] = useState(true);\n    const [ drawer, setdrawer ] = useState(false);\n    const [option1, setoption1] = useState(false);\n    const [option2, setoption2] = useState(false);\n    const [option3, setoption3] = useState(false);\n    const [icon1, seticon1] = useState(true);\n    const [icon2, seticon2] = useState(true);\n    const [icon3, seticon3] = useState(true); \n    const [modalShow, setModalShow] = useState(false);    \n    var invisible = hide;\n\n    const OptionDrawer = () => {\n        setdrawer(true);\n        setbullets(false);\n    }\n    const CloseOptionDrawer = () => {\n        setdrawer(false);\n        setbullets(true);\n    }\n\n    const formatPortal = portal => {\n        return portal.split(' ').join('').toLowerCase();\n    }\n\n    const updateWidget = async () => {  \n        var website_name = formatPortal(name);\n        var website_id = PortalMap.get(website_name).id;\n        const updateWidgetData = {\n            'rank' : rank,\n            'website_id' : website_id,\n            'username' : name,\n            'contest_name' : contest,\n            'invisible': invisible,\n          }\n        AdminService.updateContestWidget(card_id, updateWidgetData)\n          .then(response => {\n            SuccessToast('Card Updated!');\n            AdminService.getUserData()\n              .then(resp => {\n                setUser(prevUser => ({...prevUser,\n                  contest_widgets: resp.data.contest_widgets,\n                }));\n                close();\n              })\n              .catch(err => {\n                ErrorToast(\"Some Error Occured.\");\n                close();\n              });\n          })\n          .catch(error => {\n            ErrorToast('Error updating!')\n            close();\n          });\n      }\n\n    const unHideCard = () => {\n      invisible = false;\n      open();\n      updateWidget();\n    }\n\n    const HideCard = () => {\n      open();\n      invisible = true;\n      updateWidget()\n    }\n\n    function DeleteModal(props) {\n        return (\n          <Modal\n            {...props}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n          >\n            <div className=\"flexColumn\">\n              <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n                <div style={{width: 20}}></div>\n                <h2 className=\"modal-head\">Delete Card</h2>\n                <button onClick={props.onHide}>\n                  <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n                </button>\n              </div>\n              <Form>\n                <Form.Group controlId=\"formBasicEmail\" className=\"flexColumn mb-20\">\n                  <Form.Label style={{textAlign: 'center'}}>Are you sure you want to delete this card?</Form.Label>\n                </Form.Group>\n              </Form>\n      \n              <div className=\"share\" style={{justifyContent: 'center'}}>\n                <a onClick={(e) => {DeleteCard(card_id); setModalShow(false);}} style={{marginRight: 10}} className=\"flexAlignCenter modal-button\">Delete</a>\n                <a onClick={props.onHide} className=\"flexAlignCenter modal-button\">Cancel</a>\n              </div>\n      \n            </div>\n          </Modal>\n        );\n      }\n\n    const DeleteCard = async (card_id) => {\n        setModalShow(false);\n        open();        \n        AdminService.deleteContestWidget(card_id)\n            .then(response => {\n                SuccessToast('Card deleted successfully!')\n                AdminService.getUserData()\n                    .then(resp => {\n                      setUser(prevUser => ({...prevUser,\n                        contest_widgets: resp.data.contest_widgets,\n                      }));\n                      close();\n                    })\n                    .catch(err => {console.log(err);\n                      close();});\n                })\n            .catch(error => {\n                ErrorToast('Error, Cannot delete this card!');\n                close();\n            });\n    }\n\n    const DeleteCardPortal = (card_id) => {\n        setModalShow(true);\n    }\n\n    return(\n      <ClickAwayListener onClickAway={() => CloseOptionDrawer()}>\n        <div className=\"grow1 card11 flexColumn achievement-card\">\n            {\n                invisible ? (\n                    <div id=\"overlay\" onClick={() => unHideCard()} className=\"flexColumn flexCenter flexAlignCenter\">\n                        <img src={hidecards} alt=\"hidden\" className=\"hide-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\n                        <p className=\"options-text\" style={{color: 'white'}}>Hidden</p>\n                    </div>\n                ) : null\n            }\n            <div className=\"flexRow flexCenter\" style={{position: 'relative'}}>\n                {logo === \"\" ? (\n                    <div className=\"flexRow flexCenter flexAlignCenter empty-logo\">\n                        <p className=\"profile-name\" style={{fontWeight: 700, color: 'white'}}>LOGO</p>\n                    </div>\n                ) : (\n                    <img className=\"logo\" src={logo} alt=\"logo\" />\n                )}\n                { bullets ? (\n                    <div onClick={() => OptionDrawer()} className=\"flexRow option-drawer flexCenter flexAlignCenter iconcontainer\">\n                        <BsThreeDotsVertical className=\"portfolio-icon\" />                    \n                    </div>\n                    ) : null \n                }\n                { drawer ? (\n                    <div className=\"flexColumn flexStart options\" style={{position: 'absolute', top: '-15%', right:'-2%'}}>\n                        {icon1 ? (<img src={deleted} alt=\"delete\" onMouseEnter={() => {setoption1(true); seticon1(false);}} className=\"delete-icon\" style={{height:30, width: 30, marginBottom: 10, marginLeft: option2 ? 50 : null || option3 ? 50 : null, cursor: 'pointer'}} />) : null }\n                        { option1 ? (\n                            <div className=\"flexRow flexAlignCenter option delete-option\" onClick={() => DeleteCardPortal(card_id)} onMouseLeave={() => {setoption1(false); seticon1(true);}} style={{ marginBottom: 10, position: 'relative', left: 40, cursor: 'pointer' }}>\n                                <img src={deleted} alt=\"delete\" style={{height:30, width: 30, marginRight: 10}} />\n                                <p className=\"options-text\">Delete</p>\n                            </div>                            \n                            ) : null\n                        }\n                        {icon2 ? (<img src={edited} alt=\"edit\" onMouseEnter={() => {setoption2(true); seticon2(false);}} className=\"edit-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer', marginLeft: option1 ? 50 : null || option3 ? 50 : null}} />) : null}\n                        { option2 ? (\n                            <ClickAwayListener onClickAway={() => {setoption2(false); seticon2(true);}}>\n                              <div className=\"flexRow flexAlignCenter option edit-option\" style={{ marginBottom: 10, position: 'relative', left: 40, cursor: 'pointer' }}>\n                                  <UpdateContestProfile open={open} close={close} portalName={name} Rank={rank} userName={id} id={card_id} ContestName={contest} />\n                                  <p className=\"options-text\">Edit</p>\n                              </div>\n                            </ClickAwayListener>\n                            ) : null\n                        }\n                        {icon3 ? (<img src={hidden} alt=\"hide\" onMouseEnter={() => {setoption3(true); seticon3(false);}} className=\"hide-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer', marginLeft: option2 ? 50 : null || option1 ? 50 : null}} />) : null}\n                        { option3 ? (\n                            <div className=\"flexRow flexAlignCenter option hide-option\" onClick={() => HideCard()} onMouseLeave={() => {setoption3(false); seticon3(true);}} style={{ marginBottom: 10, position: 'relative', left: 40, cursor: 'pointer' }}>\n                                <img src={hidden} alt=\"hide\" style={{height:30, width: 30, marginRight: 10}} />\n                                <p className=\"options-text\">Hide</p>\n                            </div>\n                            ) : null\n                        }\n                    </div>\n                    ) : null\n                }\n            </div>\n            <DeleteModal\n                show={modalShow}\n                onHide={() => setModalShow(false)}\n            />\n            <p className=\"profile-head mb-10\"> {name === \"\" ? \"Company Name\" : name}</p>\n            <div className=\"flexRow flexBetween conv\"> \n                <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">ID:</span> {id === \"\" ?  \"Id here\" : id }</p>\n                <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">Rank:</span> {rank === \"\" ?  \"?\" : rank  }</p>\n            </div>\n            <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">Contest Name: </span>{contest === \"\" ? \"Contest Name\" : contest }</p>\n        </div>\n      </ClickAwayListener>\n    );\n}","/home/vikraant/GitHub/zippy/src/components/modals/CodingProfileModal.js",[],"/home/vikraant/GitHub/zippy/src/components/modals/ContestProfileModal.js",["205"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useContext } from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Modal, Form } from 'react-bootstrap';\nimport {AiOutlineCloseCircle, AiOutlinePlusCircle} from 'react-icons/ai';\nimport { PortalMap, setItem, getItem, ErrorToast, SuccessToast } from '../../utility/localStorageControl';\nimport AdminService from '../../AdminServices/AdminService';\nimport { ProgrammerContext } from '../../utility/userContext';\n\nexport default function ContestProfileModal({open, close}) {\n  const [user, setUser] = useContext(ProgrammerContext);\n  const [modalShow, setModalShow] = React.useState(false);\n  var portal = \"Eg. GeeksforGeeks, CodeChef\";\n  const data = ['Geeks for Geeks', 'CodeChef', 'CodeForces', 'HackerRank', 'TopCoder', 'LeetCode'];\n  var contest = '';\n  var rank = '';\n  var username = '';\n\n  const formatPortal = portal => {\n    return portal.split(' ').join('').toLowerCase();\n  }\n\n  const createWidget = async () => {\n    if(portal && username && rank && contest){\n      const contestWidgetData = {\n        'rank' : getItem('Contestrank'),\n        'website_id' : getItem('website_id'),\n        'username' : getItem('Contestusername'),\n        'contest_name': getItem('Contestname')\n      }\n      AdminService.createContestWidget(contestWidgetData)\n        .then(response => {\n          SuccessToast('Details Entered!')\n          AdminService.getUserData()\n            .then(resp => {\n              setUser(prevUser => ({...prevUser,\n                contest_widgets: resp.data.contest_widgets,\n              }));\n              close();\n              setModalShow(false);\n            })\n            .catch(err => ErrorToast(\"Some Error Occured.\"));\n            close();\n        })\n        .catch(error => {\n          ErrorToast('Error, Enter correct details!')\n          close();\n        });\n    } else {\n      ErrorToast('Error, Fields cannot be empty!')\n      close();\n    }\n  }\n\n  const getPortalDetails = (portal) => {\n    if(portal !== ''){\n      setItem('url', PortalMap.get(portal).url);\n      setItem('website_id', PortalMap.get(portal).id);\n      setItem('logo', PortalMap.get(portal).logo);\n    }\n  }\n\n  const UpdateCard = () => {\n    setModalShow(false);\n    open();\n    setItem('Contestportal', portal);\n    getPortalDetails(formatPortal(getItem('Contestportal')));\n    setItem('Contestusername', username);\n    setItem('Contestrank', rank);\n    setItem('Contestname', contest);\n    createWidget();\n  }\n\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">Add Contests won</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\" className=\" flexColumn mb-20\">\n              <Form.Label>Website Name</Form.Label>\n              <select defaultValue={portal} onChange={(e) => portal = (e.target.value)}>\n                <option value=\"Eg. GeeksforGeeks, CodeChef\" disabled>Eg. GeeksforGeeks, CodeChef</option>\n                {data.map(platform => (\n                  <option value={platform}>{platform}</option>\n                ))}\n              </select>\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword1\" className=\"mb-20\">\n              <Form.Label>Your Profile Username </Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. abc_234\" defaultValue={username} onChange={(e) => username = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword2\" className=\"mb-20\">\n              <Form.Label>Contest Name</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. 2020 Hackathon\" defaultValue={contest} onChange={(e) => contest = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword3\">\n              <Form.Label>Your Rank</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. 2514\" defaultValue={rank} onChange={(e) => rank = (e.target.value)} />\n            </Form.Group>\n  \n          </Form>\n  \n          <div className=\"share\" style={{justifyContent: 'center'}}>\n            <a onClick={() => UpdateCard()} className=\"flexAlignCenter modal-button\">Add to Profile</a>\n          </div>\n  \n        </div>\n      </Modal>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"grow1 flexColumn flexCenter flexAlignCenter add-card1\" style={{height: 250}}>\n        <button onClick={() => setModalShow(true)}>\n          <AiOutlinePlusCircle style={{fontSize: 80, color: '#C0C0C0'}} />\n        </button>\n      </div>\n\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </>\n  );\n}\n","/home/vikraant/GitHub/zippy/src/components/Footer/Footer.js",[],"/home/vikraant/GitHub/zippy/src/components/modals/ProjectModal.js",["206"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {useContext} from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Modal, Form } from 'react-bootstrap';\nimport {AiOutlineCloseCircle, AiOutlinePlusCircle} from 'react-icons/ai';import AdminService from '../../AdminServices/AdminService';\nimport { ProgrammerContext } from '../../utility/userContext';\nimport { ErrorToast, SuccessToast } from '../../utility/localStorageControl';\n\nexport default function ProjectModal({open, close}) {\n  const [user, setUser] = useContext(ProgrammerContext);\n  const [modalShow, setModalShow] = React.useState(false);\n  var url = '';\n  var project = '';\n  var description = '';\n  var stack = '';\n  var stacks = [];\n\n  const createWidget = async () => {\n    if(url.length > 0 && project.length > 0 ){\n      const projectWidgetData = {\n        'title' : project,\n        'link' : url,\n        'tech_stack' : stacks,\n        'description' : description\n      }\n      AdminService.createProjectWidget(projectWidgetData)\n        .then(response => {\n          SuccessToast('Details Entered!')\n          AdminService.getUserData()\n            .then(resp => {\n              setUser(prevUser => ({...prevUser,\n                project_widgets: resp.data.personal_projects,\n              }));\n              close();\n              setModalShow(false);\n            })\n            .catch(err => {\n              ErrorToast(\"Some Error Occured.\")\n              close();\n            });\n        })\n        .catch(error => {\n          ErrorToast('Error, Enter correct details!')\n          close();\n        });\n    } else {\n      ErrorToast('Error, Fields cannot be empty!')\n      close();\n    }\n  }\n\n  const UpdateCard = () => {\n    open();\n    stacks = stack.split(',')\n    createWidget();\n    setModalShow(false);\n  }\n\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">Add your work</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\" className=\"mb-20\">\n              <Form.Label>Project Title</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. Automated System\" defaultValue={project} onChange={(e) => project = (e.target.value)} />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicEmail2\" className=\"mb-20\">\n              <Form.Label>Project TechStack   *Separated by Commas(\",\")*</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. Arduino, IOT, React\" defaultValue={stack} onChange={(e) => stack = (e.target.value)} />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicEmail3\" className=\"mb-20\">\n              <Form.Label>Project Description</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. Automated System does this and that\" defaultValue={description} onChange={(e) => description = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword1\" className=\"mb-20\">\n              <Form.Label>Project URL</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"http://www.google.com/\" defaultValue={url} onChange={(e) => url = (e.target.value)} />\n            </Form.Group>\n  \n          </Form>\n  \n          <div className=\"share\" style={{justifyContent: 'center'}}>\n            <a onClick={() => UpdateCard()} className=\"flexAlignCenter modal-button\">Add to Profile</a>\n          </div>\n  \n        </div>\n      </Modal>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"grow1 flexColumn flexCenter flexAlignCenter add-card\" style={{height: 280}}>\n        <button onClick={() => setModalShow(true)}>\n          <AiOutlinePlusCircle style={{fontSize: 80, color: '#C0C0C0'}} />\n        </button>\n      </div>\n\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </>\n  );\n}","/home/vikraant/GitHub/zippy/src/components/modals/SendViaEmail.js",["207","208","209","210","211"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {useContext, useState} from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Modal, Form } from 'react-bootstrap';\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\nimport MailPreview from '../MailPreview/MailPreview';\nimport { ErrorToast, getItem, setItem, SuccessToast } from '../../utility/localStorageControl';\nimport AdminService from '../../AdminServices/AdminService';\nimport { ProgrammerContext } from '../../utility/userContext';\n\nexport default function SendViaEmail({open, close}) {\n  const [user, setUser] = useContext(ProgrammerContext);\n  const [modalShow, setModalShow] = React.useState(false);\n     var mails = \"\";\n     var resume = \"\";\n     const resumeData = new FormData();\n\n     const OptionalHeader = {\n      'Content-Type': 'multipart/form-data; boundary=<calculated when request is sent>',\n     }\n\n     const handleInput = (event) => {\n      resume = event.target.files[0]\n     }\n\n    const SendMail =  async () => {\n      setModalShow(false);\n      open();\n      resumeData.append('file', resume)\n      AdminService.sendMailwithAttachment(mails, resumeData, OptionalHeader)\n        .then(resp => {\n          if(resp.data.status === \"success\"){\n            SuccessToast('Email Succesfully Sent!')\n            close();\n          } else{\n            ErrorToast(resp.data.message)\n            close();\n          }\n        })\n        .catch(err => {\n          ErrorToast(\"Some Error occured.\")\n          close();\n        });\n    }\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <div className=\"flexColumn\">\n            <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n              <div style={{width: 20}}></div>\n              <h2 className=\"modal-head\">Send via Email</h2>\n              <button onClick={props.onHide}>\n                <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n              </button>\n            </div>\n            <Form>\n              <Form.Group controlId=\"formBasic1\" className=\"mb-20\">\n                <Form.Label>Enter the mail ID you would like to send the mail to<span style={{color: 'red'}}>*</span> </Form.Label>\n                <Form.Control type=\"text\" defaultValue={mails} onChange={(event) => mails = (event.target.value)} placeholder=\"example: anything@gmail.com\" />\n              </Form.Group>    \n              <Form.Group controlId=\"formBasic12\" className=\"mb-20\">\n                <Form.Label>Upload Resume (Optional)</Form.Label>\n                <Form.Control type=\"file\" defaultValue={resume} onChange={(event) => handleInput(event)} placeholder=\"Click on Upload to attach resume\" />\n              </Form.Group>   \n            </Form>\n\n            <div className=\"flexRow flexBetween\">\n                <div className=\"flexColumn\">\n                    <span className=\"modal-list\">• File size should not more than 10 MB.</span>\n                    <span className=\"modal-list\">• File should be in PDF format.</span>\n                </div>\n            </div>\n    \n            <div className=\"share\" style={{justifyContent: 'center'}}>\n              <a onClick={SendMail} className=\"flexAlignCenter modal-button\">Send Mail</a>\n            </div>\n\n            <div className=\"flexRow flexCenter end-section ph-20 flexAlignCenter mv-40\">\n                <hr style={{width: '35%', color: 'rgba(154,154,154,1)'}} />\n                <p className=\"end-text\" style={{fontSize: 16}}>Mail Preview</p>\n                <hr style={{width: '35%', color: 'rgba(154,154,154,1)'}} />\n            </div>\n\n            <MailPreview />\n        </div>\n      </Modal>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"share\">\n        <a className=\"flexRow flexAlignCenter email-button\" style={{cursor: 'pointer'}} onClick={() => setModalShow(true)}>Send Email</a>\n      </div>\n\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </>\n  );\n}\n","/home/vikraant/GitHub/zippy/src/components/modals/SentHistory.js",["212","213","214"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {useContext, useState} from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Modal, Form, Table, Pagination } from 'react-bootstrap';\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\nimport AdminService from '../../AdminServices/AdminService';\nimport { setItem, getItem, ErrorToast } from '../../utility/localStorageControl';\nimport { ProgrammerContext } from '../../utility/userContext';\n\nexport default function SentHistoryModal({open, close}) {\n    const [user, setUser] = useContext(ProgrammerContext);\n    const [modalShow, setModalShow] = React.useState(false);\n    const [active, setActive] = useState(1);\n    let items = [];\n    const pages = Math.floor(user.total_mails_sent/5) + 1;\n    for (let number = 1; number <= pages; number++) {\n    items.push(\n        <Pagination.Item key={number} active={number === active} onClick={() => {\n          setActive(number);\n          GetHistory(number, 5)\n          console.log(pages, active, user.sent_history);}} style={{cursor: 'pointer'}}>\n        {number}\n        </Pagination.Item>,\n    );\n    }\n\n    const GetHistory = async (page, item) => {\n      open();\n      AdminService.SentHistory(page, item)\n        .then(resp => {\n          setUser(prevUser => ({...prevUser,\n            sent_history: resp.data.mail_history,\n            total_mails_sent: resp.data.total_items\n          }));          \n          close();\n        })\n        .catch(err => {\n          ErrorToast(\"Some Error Occured.\")\n          close();\n      });\n    }\n\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">List of E-mail Sent History</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Table striped bordered hover style={{borderRadius: 8}}>\n                <thead>\n                    <tr>\n                        <th className=\"table-head\">Date</th>\n                        <th className=\"table-head\">Email ID</th>\n                    </tr>\n                </thead>\n                <tbody>\n                {\n                  props.history ? (\n                  props.history.map((table) => (\n                    <tr>\n                        <td className=\"table-date\">{table.date.split(' ')[0]}</td>\n                        <td className=\"table-element\">{table.email}</td>\n                    </tr>\n                  ))) : null\n                }\n                </tbody>\n            </Table>\n            <div>\n                <Pagination className=\"pageNumbers\">\n                  <Pagination.Item key=\"First\" active={1 === active} disabled={active === 1 ? true : false} onClick={() => {\n                    setActive(active === 1 ? 1 : active-1); \n                    GetHistory(active === 1 ? 1 : active-1,5);\n                    console.log(pages, active, user.sent_history);\n                  }} style={{cursor: 'pointer'}}>\n                    Prev\n                  </Pagination.Item>\n                  {items}\n                  <Pagination.Item key=\"Next\" active={true} disabled={active === pages ? true : false} onClick={() => {\n                    setActive(active+1);\n                    GetHistory(active+1,5);\n                    console.log(pages, active, user.sent_history); \n                  }} style={{cursor: 'pointer'}}>\n                    Next\n                  </Pagination.Item>\n                </Pagination>\n            </div>\n        </div>\n      </Modal>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"history\">\n          <button className=\"flexAlignCenter history-button\" style={{outline: 'none', marginRight: 0}} onClick={() => {setModalShow(true); GetHistory(1, 5);}} >\n              View Sent History        \n          </button>\n        </div>\n\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n        history = {user.sent_history}\n      />\n    </>\n  );\n}\n","/home/vikraant/GitHub/zippy/src/components/ProjectCard/ProjectCard.js",["215","216","217"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useState, useEffect, useContext } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './ProjectCard.css';\nimport deleted from '../../assets/images/Bin-Icon.png';\nimport hidden from '../../assets/images/Hide-Icon.png';\nimport {ErrorToast, setItem, SuccessToast} from '../../utility/localStorageControl';\nimport AdminService from '../../AdminServices/AdminService';\nimport UpdateProject from '../UpdateModals/UpdateProject';\nimport hidecards from '../../assets/images/hiddeeen.png';\nimport { Form, Modal } from 'react-bootstrap';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\nimport { ProgrammerContext } from '../../utility/userContext';\nimport { ClickAwayListener } from '@material-ui/core';\n\nexport default function ProjectCard({name, url, id, img, hide, open, close, techstack, desc}){\n    const [user, setUser] = useContext(ProgrammerContext);\n    var invisible = hide;\n    const [namecard, setcard] = useState(true);\n    const [detailcard, setdetail] = useState(false);\n    const [modalShow, setModalShow] = useState(false);\n\n    techstack = techstack ? techstack.map(e => e.trim()) : techstack;\n\n    const HideCard = () => {\n        open();\n        invisible = true;\n        updateWidget();\n    }\n\n    const unHideCard = () => {\n        open();\n        invisible = false;\n        updateWidget();\n    }\n\n    const updateWidget = async () => {\n        const projectWidgetData = {\n            'title' : name,\n            'link' : url,\n            'invisible' : invisible,\n            'techstack' : techstack,\n            'description' : desc,\n        }\n        AdminService.updateProjectWidget(id, projectWidgetData)\n            .then(response => {\n              SuccessToast('Card Updated!')\n              AdminService.getUserData()\n                .then(resp => {\n                    setUser(prevUser => ({...prevUser,\n                        project_widgets: resp.data.personal_projects,\n                    }));\n                    close();\n                    setModalShow(false);\n                })\n                .catch(err => {\n                    ErrorToast(\"Some Error Occured.\")\n                    close();\n                });\n            })\n            .catch(error => {\n              ErrorToast('Error updating, Retry!')\n              close();\n            });\n        }\n\n        function DeleteModal(props) {\n            return (\n              <Modal\n                {...props}\n                size=\"lg\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n              >\n                <div className=\"flexColumn\">\n                  <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n                    <div style={{width: 20}}></div>\n                    <h2 className=\"modal-head\">Delete Card</h2>\n                    <button onClick={props.onHide}>\n                      <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n                    </button>\n                  </div>\n                  <Form>\n                    <Form.Group controlId=\"formBasicEmail\" className=\"flexColumn mb-20\">\n                      <Form.Label style={{textAlign: 'center'}}>Are you sure you want to delete this card?</Form.Label>\n                    </Form.Group>\n                  </Form>\n          \n                  <div className=\"share\" style={{justifyContent: 'center'}}>\n                    <a onClick={(e) => DeleteCard(id)} className=\"flexAlignCenter modal-button\" style={{marginRight: 10}}>Delete</a>\n                    <a onClick={props.onHide} className=\"flexAlignCenter modal-button\">Cancel</a>\n                  </div>\n          \n                </div>\n              </Modal>\n            );\n          }\n\n    const DeleteCard = async (project_id) => {       \n        open(); \n        setModalShow(false);\n        AdminService.deleteProjectWidget(project_id)\n            .then(response => {\n                SuccessToast('Card deleted successfully!')\n                AdminService.getUserData()\n                    .then(resp => {\n                        setUser(prevUser => ({...prevUser,\n                            project_widgets: resp.data.personal_projects,\n                        }));\n                        setModalShow(false);\n                        close();\n                    })\n                    .catch(err => ErrorToast(\"Some Error Occured.\"));\n                      close();\n                })\n            .catch(error => {\n                ErrorToast('Error, Cannot delete this card!')\n                close();\n            });\n    }\n\n    const DeleteCardPortal = (id) => {\n        setModalShow(true);\n    }\n\n    return(\n        <>\n            <DeleteModal\n                show={modalShow}\n                onHide={() => setModalShow(false)}\n            />\n            {\n                invisible ? (\n                    <div className=\"grow1 flexColumn project-card flexEnd\" \n                        style={{  \n                            backgroundImage: img === \"\" ? null : `url(\"${img}\")`,\n                            backgroundColor: 'rgba(219,219,219,1)',\n                            backgroundSize: 'cover',\n                            backgroundRepeat: 'no-repeat'\n                        }}\n                    >                 \n                        <div id=\"overlay\" onClick={() => unHideCard()} className=\"flexColumn flexCenter flexAlignCenter\">\n                            <img src={hidecards} alt=\"hidden\" className=\"hide-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\n                            <p className=\"options-text\" style={{color: 'white'}}>Hidden</p>\n                        </div>                    \n                        <div onMouseEnter={() => {setcard(false); setdetail(true);}} className=\"flexColumn flexCenter flexAlignCenter project-textbox\">\n                            <p className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p>\n                        </div>\n                    </div>  \n                ) : (\n                    <div className=\"grow1 flexColumn project-card flexEnd\" \n                        style={{  \n                            backgroundImage: img === \"\" ? null : `url(\"${img}\")`,\n                            backgroundColor: 'rgba(219,219,219,1)',\n                            backgroundSize: 'cover',\n                            backgroundRepeat: 'no-repeat',\n                        }}\n                    >         \n                        <div onClick={() => window.open(url)} style={{fontSize: 30, position: 'absolute', top: 0, height: '60%', width: '100%', cursor: 'pointer'}} />    \n                        {\n                            namecard ? (\n                                <div onMouseEnter={() => {setcard(false); setdetail(true);}} className=\"flexColumn flexCenter flexAlignCenter project-textbox\">\n                                    <p className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p>\n                                </div>\n                            ) : null\n                        }\n                        {\n                            detailcard ? (\n                                <ClickAwayListener onClickAway={() => {setdetail(false); setcard(true);}}>\n                                    <div className=\"flexColumn flexAlignCenter project-textbox1\">\n                                        {/* <p style={{cursor: 'pointer'}} onClick={() => window.open(url)} className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p> */}\n                                        <p style={{cursor: 'pointer'}} onClick={() => window.open(url)} className=\"project-desc textAlignCenter\">{ desc.length > 0 ? desc = desc.length > 65 ? desc.slice(0,65)+\"...\" : desc : \"Sample Description\"}</p>\n                                        <p style={{cursor: 'pointer'}} onClick={() => window.open(url)} className=\"project-stack textAlignCenter\">{ techstack ? (techstack.slice(0,4).join(' | ')) : \"Sample Stack\"}</p>\n                                        <div className=\"actionsProject flexRow flexAround flexAlignCenter\">\n                                            <img src={deleted} onClick={() => DeleteCardPortal(id)} alt=\"delete\" className=\"delete-card-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer'}} />\n                                            <UpdateProject open={open} close={close} projectName={name} projectlink={url} projectImage={img} projectId={id} ProjectStack={techstack} ProjectDesc={desc}  />\n                                            <img src={hidden} onClick={() => HideCard()} alt=\"hidden\" className=\"delete-card-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer'}} />\n                                        </div>\n                                    </div>\n                                </ClickAwayListener>\n                            ) : null\n                        }\n                    </div>\n                )\n            }\n        </>\n    );\n}","/home/vikraant/GitHub/zippy/src/components/ContestCard/ContestCardDisplay.js",[],"/home/vikraant/GitHub/zippy/src/components/Loader/Loader.js",[],"/home/vikraant/GitHub/zippy/src/components/FeatureCard/FeatureCard.js",[],"/home/vikraant/GitHub/zippy/src/components/ProjectCard/ProjectCardDisplay.js",["218"],"import React, { useState, useEffect } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './ProjectCard.css';\n\nexport default function ProjectCardDisplay({name, img, url, techstack, desc}){\n    const [namecard, setcard] = useState(true);\n    const [detailcard, setdetail] = useState(false);   \n    desc = desc.length > 120 ? desc.slice(0,120)+\"...\" : desc;\n    techstack = techstack.map(e => e.trim());\n    return(\n        <div onClick={() => window.open(url)} className=\"grow1 flexColumn project-card flexEnd\" \n            style={{  \n                backgroundImage: img === \"\" ? null : `url(\"${img}\")`,\n                backgroundColor: 'rgba(219,219,219,1)',\n                backgroundSize: 'cover',\n                backgroundRepeat: 'no-repeat',\n                cursor: 'pointer'\n            }}\n        >\n            {\n                namecard ? (\n                    <div onMouseEnter={() => {setcard(false); setdetail(true);}} className=\"flexColumn flexCenter flexAlignCenter project-textbox\">\n                        <p style={{cursor: 'pointer'}} className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p>\n                    </div>\n                ) : null\n            }\n            {\n                detailcard ? (\n                    <div onMouseLeave={() => {setdetail(false); setcard(true);}} className=\"flexColumn flexAlignCenter flexCenter project-textbox1\">\n                        <p style={{cursor: 'pointer'}} onClick={() => window.open(url)} className=\"project-desc textAlignCenter\">{ desc.length > 0 ? desc : \"Sample Description\"}</p>\n                        <p style={{cursor: 'pointer'}} onClick={() => window.open(url)} className=\"project-stack textAlignCenter\">{ techstack ? (techstack.slice(0,4).join(' | ')) : \"Sample Stack\"}</p>\n                    </div>\n                ) : null\n            }\n        </div>\n    );\n}","/home/vikraant/GitHub/zippy/src/components/AchievementCard/AchievementCard.js",[],"/home/vikraant/GitHub/zippy/src/components/modals/ShareModal.js",["219","220","221"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {useState, useRef, useContext} from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Modal, Form } from 'react-bootstrap';\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\nimport AdminService from '../../AdminServices/AdminService';\nimport { ProgrammerContext } from '../../utility/userContext';\nimport { SuccessToast } from '../../utility/localStorageControl';\n\nexport default function ShareModal({id, open, close}) {\n  const [user, setUser] = useContext(ProgrammerContext);\n  const [modalShow, setModalShow] = React.useState(false);\n  const url = `https://tabber.online/d?id=${user.user_id}`;\n  const textAreaRef = useRef(null);\n\n  const CopyText = (e) => {\n    open();\n    textAreaRef.current.select();\n    document.execCommand('copy');\n    SuccessToast('Link Copied!')\n    setModalShow(false);\n    close();\n  }\n\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">Share Portfolio</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\" className=\"flexColumn mb-20\">\n              <Form.Label>Just copy and share this simple link !</Form.Label>\n              <input type=\"text\" class=\"form-control\" ref={textAreaRef} defaultValue={url} placeholder=\"https://tabber.com/123\" readOnly />\n            </Form.Group>\n          </Form>\n\n          <div className=\"flexRow flexAlignCenter flexCenter\">\n            <div className=\"share\">\n              <a onClick={(e) => CopyText(e)} className=\"flexAlignCenter modal-button\">Copy Link</a>\n            </div>\n            <div className=\"share\">\n              <a onClick={() => {window.open(url); setModalShow(false)}} className=\"flexAlignCenter modal-button\">Open Link</a>\n            </div>\n          </div>\n  \n        </div>\n      </Modal>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"share\">\n        <button className=\"flexAlignCenter share-button\" style={{outline: 'none', marginRight: 0}} onClick={() => {setModalShow(true);}}>\n          Share        \n        </button>\n      </div>\n\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </>\n  );\n}\n","/home/vikraant/GitHub/zippy/src/components/modals/PortfolioModal.js",["222","223"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useContext, useState } from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Form, Modal } from 'react-bootstrap';\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\nimport { ErrorToast, getItem, setItem, SuccessToast, WarningToast } from '../../utility/localStorageControl';\nimport AdminService from '../../AdminServices/AdminService';\nimport { ProgrammerContext } from '../../utility/userContext';\n  \n  export default function PortfolioModal({home, open, close}) {\n    const [user, setUser] = useContext(ProgrammerContext);\n    const [modalShow, setModalShow] = useState(false);\n    const [apicall, setcall] = useState('');\n    var title = '';\n    var desc = '';    \n\n    const createPortfolio = async () => {\n      if(user.token === \"\"){\n        ErrorToast('Access Token not Retrieved!')\n      } else{\n        if(title && desc){\n          const portfolioData = {\n              'title': title,\n              'picture_url': user.image,\n              'description': desc\n          };\n          AdminService.createPortfolio(portfolioData)\n            .then(resp => {\n              SuccessToast('Details Entered!')\n              setcall('Success');\n              AdminService.getUserData()\n                .then(resp => {\n                  setUser(prevUser => ({...prevUser,\n                    portfolio: resp.data.portfolio,\n                  }));    \n                  close();          \n                })\n                .catch(err => {\n                  ErrorToast(\"Some Error Occured.\")\n                  close();\n                });\n            })\n            .catch(err => {\n              ErrorToast('Error, One User, One Portfolio!')\n              close();\n            });\n        } else {\n          ErrorToast('Error, Fields cannot be empty!')\n          close();\n        }\n      }\n    };  \n\n    const Add = () => {\n      open();\n      createPortfolio();\n      setModalShow(false);  \n    }\n\n    const ModalOpen = () => {\n      apicall === 'Success' ? window.open('/portfolio', '_self') : setModalShow(true);\n    }\n\n    function MyVerticallyCenteredModal(props) {\n        return (\n          <Modal\n            {...props}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n          >\n            <div className=\"flexColumn\">\n            <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n              <div style={{width: 20}}></div>\n              <h2 className=\"modal-head\">Add Portfolio Details</h2>\n              <button onClick={props.onHide}>\n                <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n              </button>\n            </div>\n            <Form>    \n              <Form.Group controlId=\"formBasic1\" className=\"mb-20\">\n                <Form.Label>Your Portfolio Title<span style={{color: 'red'}}>*</span> </Form.Label>\n                <Form.Control type=\"text\" defaultValue={title} onChange={(e) => title = (e.target.value)} placeholder=\"Eg. Web Developer\" />\n              </Form.Group>    \n              <Form.Group controlId=\"formBasic2\">\n                <Form.Label>Your Description<span style={{color: 'red'}}>*</span></Form.Label>\n                <Form.Control type=\"text\" defaultValue={desc} onChange={(e) => desc = (e.target.value)} placeholder=\"Enter your College and profile description here\" />\n              </Form.Group>    \n            </Form>\n    \n            <div className=\"share\" style={{justifyContent: 'center'}}>\n              <a onClick={() => Add()} className=\"flexAlignCenter modal-button\">Create Portfolio</a>\n            </div>\n    \n          </div>\n          </Modal>\n        );\n      }\n  \n    return (\n      <>\n        {\n          home ? (\n            <a style={{cursor: 'pointer'}} onClick={() => {\n              if(user.login){\n                if(user.portfolio){\n                  window.open('/portfolio', '_self');\n                } else {\n                  setModalShow(true);\n                }\n              } else{\n                WarningToast('You need to Login first!');\n              }\n            }} className=\"flexAlignCenter intro-button\"\n          >\n            Get Started\n          </a>\n          ) :\n            (\n              <button onClick={() => {\n                  user.portfolio ? window.open('/portfolio', '_self') : ModalOpen()\n                }} \n                className=\"edit-your-portfolio grow1\"\n              >\n                {apicall === 'Success' || user.portfolio ? 'Move to your Portfolio' : 'Edit your Portfolio'}\n              </button>\n            )\n        }\n        <MyVerticallyCenteredModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n        />\n      </>\n    );\n  }","/home/vikraant/GitHub/zippy/src/components/FAQCard/FAQCard.js",[],"/home/vikraant/GitHub/zippy/src/components/modals/AttachResume.js",["224"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {useContext, useState} from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Modal, Form } from 'react-bootstrap';\nimport {AiOutlinePlusCircle, AiOutlineCloseCircle, AiOutlineLink} from 'react-icons/ai';\nimport {BsFillEyeFill} from 'react-icons/bs'\nimport AdminService from '../../AdminServices/AdminService';\nimport { ProgrammerContext } from '../../utility/userContext';\nimport { ErrorToast, SuccessToast } from '../../utility/localStorageControl';\n\nexport default function AttachResumeModal({open, close}) {\n  const [user, setUser] = useContext(ProgrammerContext);\n  const [modalShow, setModalShow] = React.useState(false);\n  var url = user.portfolio.cloud_resume_link;\n\n  const ResumeAttach = async () => {\n    if(url !== user.portfolio.cloud_resume_link){\n      setModalShow(false);\n      AdminService.AttachResume(url)\n        .then(resp => {\n          AdminService.getUserData()\n          .then(resp => {\n            setModalShow(false);\n            setUser(prevUser => ({...prevUser,\n              portfolio: resp.data.portfolio\n            }));\n            if(url.length > 0){\n              SuccessToast('Resume Added!');\n            } else{\n              SuccessToast('Resume Removed!')\n            }\n            \n          })\n          .catch(err => {\n            ErrorToast(\"Some Error Occured.\")\n          });\n        })\n        .catch(err => {\n          ErrorToast(\"Some Error Occured.\")\n        });\n      } else{\n          ErrorToast(\"Same Link.\");\n      }\n  }\n\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">Attach your Resume</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\" className=\"flexColumn mb-20\">\n              <Form.Label style={{fontStyle: 'Poppins'}}>Enter your Resume link in the form of PDF below</Form.Label>\n              <textarea style={{fontStyle: 'Poppins', borderRadius: 32, margin: '10px 0'}} rows={5} type=\"text\" class=\"form-control\" defaultValue={url ? url : \"\"} placeholder=\"Example https://www.gdrive.com/profile/abc,.pdf\" onChange={(event) => url = event.target.value} />\n            </Form.Group>\n          </Form>\n\n          <span className=\"modal-list\">• Enter a proper Gdrive/Dropbox or any cloud link.</span>\n          <span className=\"modal-list\">• Upload the file in cloud in pdf format (Recommended).</span>\n\n          <div className=\"share\" style={{justifyContent: 'center'}}>\n            <a className=\"flexAlignCenter modal-button\" onClick={() => ResumeAttach()}>Add to profile</a>\n          </div>\n  \n        </div>\n      </Modal>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"grow1 attach-resume flexRow flexAlignCenter flexEvenly\">\n        <p className=\"resume-head\">{url ? 'View attached PDF' : 'Attach your Resume'}</p>\n        {url && <div style={{display: 'flex', gap: 20}}>\n          <AiOutlineLink onClick={() => setModalShow(true)} className=\"grow2 attach-resume__icon\" />\n          <BsFillEyeFill onClick={() => window.open(url)} className=\"grow2 attach-resume__icon\" />\n        </div>}\n        {!url &&\n          <AiOutlinePlusCircle onClick={() => setModalShow(true)} className=\"grow2 attach-resume__icon\"/>\n        }\n      </div>\n\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </>\n  );\n}\n","/home/vikraant/GitHub/zippy/src/components/modals/LinkedInProfile.js",["225"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {useContext, useState} from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Modal, Form } from 'react-bootstrap';\nimport {AiOutlinePlusCircle, AiOutlineCloseCircle, AiOutlineLink, AiOutlineLinkedin} from 'react-icons/ai';\nimport AdminService from '../../AdminServices/AdminService';\nimport { ProgrammerContext } from '../../utility/userContext';\nimport { ErrorToast, SuccessToast } from '../../utility/localStorageControl';\n\nexport default function LinkedInProfileModal({open, close}) {\n  const [user, setUser] = useContext(ProgrammerContext);\n  const [modalShow, setModalShow] = React.useState(false);\n  let profile_link = '';\n  if(user.portfolio && user.portfolio.social_profiles){\n    profile_link = user.portfolio.social_profiles[0].link;\n  }\n  const LinkedInAttach = async () => {\n    if(!user.portfolio.social_profiles){\n      AdminService.SocialProfiles({\n        website_name: 'LinkedIn',\n        link: profile_link\n      })\n        .then(res => {\n            AdminService.getUserData()\n              .then(resp => {\n                setModalShow(false);\n                setUser(prevUser => ({...prevUser,\n                  portfolio: resp.data.portfolio\n                }));\n                SuccessToast('Details Added!')\n              })\n              .catch(err => {\n                ErrorToast(\"Some Error Occured.\")\n              });\n          })\n          .catch(err => {\n            ErrorToast(\"Some Error Occured.\")\n          });\n    } else{\n      AdminService.UpdateSocialProfiles({\n        website_name: 'LinkedIn',\n        link: profile_link\n      })\n        .then(res => {     \n            AdminService.getUserData()\n              .then(resp => {\n                setModalShow(false);\n                setUser(prevUser => ({...prevUser,\n                  portfolio: resp.data.portfolio\n                }));\n                SuccessToast('Details Updated!')\n              })\n              .catch(err => {\n                ErrorToast(\"Some Error Occured.\")\n              });\n          })\n          .catch(err => {\n            ErrorToast(\"User Profile doesn't exist.\")\n          })\n    }    \n  }\n\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">LinkedIn Profile</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\" className=\"flexColumn mb-20\">\n              <Form.Label style={{fontStyle: 'Poppins'}}>Enter your LinkedIn Profile link here</Form.Label>\n              <input style={{fontStyle: 'Poppins', borderRadius: 32, margin: '10px 0'}} type=\"text\" class=\"form-control\" defaultValue={profile_link ? profile_link : \"\"} placeholder=\"Example https://www.linkedin.com/in/123/\" onChange={(event) => profile_link = (event.target.value)} />\n            </Form.Group>\n          </Form>\n\n          <div className=\"share\" style={{justifyContent: 'center'}}>\n            <a className=\"flexAlignCenter modal-button\" onClick={() => LinkedInAttach()}>Add to profile</a>\n          </div>\n  \n        </div>\n      </Modal>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"grow1 attach-resume flexRow flexAlignCenter flexEvenly\">\n        <p className=\"resume-head\">{profile_link ? 'LinkedIn Profile' : 'Add your LinkedIn Profile link'}</p>\n        {profile_link ?\n          (<div style={{display: 'flex', gap: 20}}>\n            <AiOutlineLink onClick={() => setModalShow(true)} className=\"grow2 attach-resume__icon\" />\n            <AiOutlineLinkedin onClick={() => window.open(profile_link)} className=\"grow2 attach-resume__icon\" />\n          </div>) :\n          (\n            <AiOutlinePlusCircle onClick={() => setModalShow(true)} className=\"grow2 attach-resume__icon\"/>\n          )\n        }\n      </div>\n\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </>\n  );\n}\n","/home/vikraant/GitHub/zippy/src/AdminServices/dataService.js",[],"/home/vikraant/GitHub/zippy/src/components/UpdateModals/UpdateProject.js",["226"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useContext } from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Modal, Form } from 'react-bootstrap';\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\nimport AdminService from '../../AdminServices/AdminService';\nimport edited from '../../assets/images/Edit-Icon.png';\nimport { ProgrammerContext } from '../../utility/userContext';\nimport { ErrorToast, SuccessToast } from '../../utility/localStorageControl';\n\nexport default function UpdateProject({projectName, projectlink, ProjectDesc, ProjectStack, projectId, open, close}) {\n  const [user, setUser] = useContext(ProgrammerContext);\n  const [modalShow, setModalShow] = React.useState(false);\n  var url = projectlink;\n  var project = projectName;\n  var project_id = projectId;\n  var stack = ProjectStack;\n  var stacks = [];\n  var description = ProjectDesc;\n\n  const updateWidget = async (id) => {\n    if(url.length > 0 && project.length > 0 ){\n        const projectWidgetData = {\n          'title' : project,\n          'link' : url,\n          'tech_stack' : stacks,\n          'description' : description\n        }\n      AdminService.updateProjectWidget(id, projectWidgetData)\n        .then(response => {\n          SuccessToast('Card Updated!')\n          AdminService.getUserData()\n            .then(resp => {\n              setUser(prevUser => ({...prevUser,\n                project_widgets: resp.data.personal_projects,\n              }));\n              close();\n              setModalShow(false);\n            })\n            .catch(err => ErrorToast(\"Some Error Occured.\"));\n            close();\n        })\n        .catch(error => {\n          ErrorToast('Error, Enter correct details!')\n          close();\n        });\n    } else {\n      ErrorToast('Error, Fields cannot be empty!')\n      close();\n    }\n  }\n\n  const UpdateCard = (id) => {\n    open();\n    if(stack !== ProjectStack){\n      stacks = stack.split(',')\n    } else{\n      stacks = stack;\n    }\n    updateWidget(id);\n    setModalShow(false);\n  }\n\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">Update your Project</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\" className=\"mb-20\">\n              <Form.Label>Project Title</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. Automated System\" defaultValue={project} onChange={(e) => project = (e.target.value)} />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicEmail2\" className=\"mb-20\">\n              <Form.Label>Project TechStack   *Separated by Commas(\",\")*</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. Arduino, IOT, React\" defaultValue={stack} onChange={(e) => stack = (e.target.value)} />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicEmail3\" className=\"mb-20\">\n              <Form.Label>Project Description</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. Automated System does this and that\" defaultValue={description} onChange={(e) => description = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword1\" className=\"mb-20\">\n              <Form.Label>Project URL</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"http://www.google.com/\" defaultValue={url} onChange={(e) => url = (e.target.value)} />\n            </Form.Group>\n  \n          </Form>\n  \n          <div className=\"share\" style={{justifyContent: 'center'}}>\n            <a onClick={() => UpdateCard(project_id)} className=\"flexAlignCenter modal-button\">Update Card</a>\n          </div>\n  \n        </div>\n      </Modal>\n    );\n  }\n\n  return (\n    <>\n        <img src={edited} alt=\"hidden\" onClick={() => setModalShow(true)} className=\"edit-card-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer'}} />\n  \n        <MyVerticallyCenteredModal\n            show={modalShow}\n            onHide={() => setModalShow(false)}\n        />\n    </>\n  );\n}","/home/vikraant/GitHub/zippy/src/components/MailPreview/MailPreview.js",["227","228","229","230","231"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {useContext, useState} from 'react';\nimport '../../styles/HelperStyles.css';\nimport AdminService from '../../AdminServices/AdminService';\nimport {setItem, getItem} from '../../utility/localStorageControl'\n\nimport splashlogo from '../../assets/images/logo.png';\nimport { ProgrammerContext } from '../../utility/userContext';\n\nexport default function MailPreview(){\n    const [user, setUser] = useContext(ProgrammerContext);\n    return(\n        <div className=\"mail-box\">\n            <img src={splashlogo} width=\"200\" height=\"40\" style={{alignSelf: 'center'}} className=\"d-inline-block\" alt=\"logo\" />\n            <div className=\"mail-content-box\">\n                <div style={{backgroundColor: 'rgba(255,217,135,1)', borderTopLeftRadius: 8, borderTopRightRadius: 8}}>\n                    <h6 className=\"mailcontent-header\">{user.portfolio.title}</h6>\n                </div>\n                <div style={{padding: 20, gap: 30}} className=\"flexRow\">\n                    <img src={user.image} className=\"profile-pic\" alt=\"profile\" />\n                    <div className=\"flexColumn\">\n                        <h2 className=\"mailcontent-name\">{user.name}</h2>\n                        <h4 className=\"mailcontent-mail\">{user.email}</h4>\n                        <div className=\"flexRow numbers__code\">\n                            <div className=\"flexRow\" style={{alignItems: 'baseline', gap: 10}}>\n                                <h1 className=\"mailcontent-number\">{user.rank_widgets.length}</h1>\n                                <h5 className=\"mailcontent-sec\">Profiles</h5>\n                            </div>\n                            <div className=\"flexRow\" style={{alignItems: 'baseline', gap: 10}}>\n                                <h1 className=\"mailcontent-number\">{user.contest_widgets.length}</h1>\n                                <h5 className=\"mailcontent-sec\">Coding Contests</h5>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"share\" style={{justifyContent: 'center', padding: 0}} >\n                <a href={`/d?id=${user.user_id}`} className=\"flexAlignCenter modal-button\">Visit Profile</a>\n            </div>\n            <div className=\"imp\">\n                <h2 className=\"imp_header\">Important</h2>\n                <li className=\"imp_point\">Tabber is not accountable or liable for the content or truthfulness of the profile.</li>\n                <li className=\"imp_point\">If needed, kindly verify the candidate's information.</li>\n            </div>\n        </div>\n    );\n}","/home/vikraant/GitHub/zippy/src/components/GoogleBtn.js",[],"/home/vikraant/GitHub/zippy/src/components/UpdateModals/UpdateCodingProfile.js",["232"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useContext } from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Form, Modal } from 'react-bootstrap';\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\nimport { PortalMap, setItem, getItem, SuccessToast, ErrorToast } from '../../utility/localStorageControl';\nimport AdminService from '../../AdminServices/AdminService';\nimport edited from '../../assets/images/Edit-Icon.png';\nimport { ProgrammerContext } from '../../utility/userContext';\n\n  export default function UpdateCodingProfile({portalName, Rank, userName, open, close, url}) {\n    const [user, setUser] = useContext(ProgrammerContext);\n    const [modalShow, setModalShow] = React.useState(false);\n    var portal = portalName;\n    const data = ['Geeks for Geeks', 'CodeChef', 'CodeForces', 'HackerRank', 'TopCoder', 'LeetCode'];\n    var username = userName;\n    var rank = Rank;\n\n    const formatPortal = portal => {\n      return portal.split(' ').join('').toLowerCase();\n    }\n\n    const updateRankWidget = async () => {\n      if(portal && username && rank){\n        const rankWidgetData = {\n          'rank' : getItem('Codingrank'),\n          'website_id' : getItem('website_id'),\n          'username': getItem('Codingusername'),\n          'link': url,\n        }\n        console.log(rankWidgetData);\n        AdminService.updateRankWidget(rankWidgetData)\n          .then(response => {\n            SuccessToast('Card Updated!')\n            AdminService.getUserData()\n              .then(resp => {\n                setUser(prevUser => ({...prevUser,\n                    rank_widgets: resp.data.rank_widgets,\n                }));\n                close();\n                setModalShow(false);\n              })\n              .catch(err => ErrorToast(\"Some Error Occured.\"));\n              close();\n          })\n          .catch(error => {\n            ErrorToast('Error, Enter correct details!')\n            close();\n          });\n      } else {\n        ErrorToast('Error, Fields cannot be empty!')\n        close();\n      }\n    }\n\n    const getPortalDetails = (portal) => {\n      if(portal !== ''){\n        setItem('url', PortalMap.get(portal).url);\n        setItem('website_id', PortalMap.get(portal).id);\n        setItem('logo', PortalMap.get(portal).logo);\n      }\n    }\n\n    const UpdateCard = () => {\n      open();\n      setModalShow(false);\n      setItem('Codingportal', portal);\n      getPortalDetails(formatPortal(getItem('Codingportal')));\n      setItem('Codingusername', username);\n      setItem('Codingrank', rank);\n      updateRankWidget();\n    }\n\n    function MyVerticallyCenteredModal(props) {\n      return (\n        <Modal\n          {...props}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">Update Coding Profile</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\" className=\" flexColumn mb-20\">\n              <Form.Label>Website Name</Form.Label>\n              <select defaultValue={portal} onChange={(e) => portal = (e.target.value)}>\n                <option value=\"Eg. GeeksforGeeks, CodeChef\" disabled>Eg. GeeksforGeeks, CodeChef</option>\n                {data.map(platform => (\n                  <option value={platform}>{platform}</option>\n                ))}\n              </select>\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword\" className=\"mb-20\">\n              <Form.Label>Your Profile Username </Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. abc_234\" defaultValue={username} onChange={(e) => username = (e.target.value)} />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword2\" className=\"mb-20\">\n              <Form.Label>Your Profile Link </Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. https://www.codechef.com/users/abc1234\" defaultValue={url} onChange={(e) => url = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword1\">\n              <Form.Label>Your Rank</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. 2512\" defaultValue={rank} onChange={(e) => rank = (e.target.value)} />\n            </Form.Group>\n  \n          </Form>\n  \n          <div className=\"share\" style={{justifyContent: 'center'}}>\n            <a onClick={() => UpdateCard() } className=\"flexAlignCenter modal-button\">Update Profile</a>\n          </div>\n  \n        </div>\n        </Modal>\n      );\n    }\n  \n    return (\n      <>\n        <img src={edited} alt=\"edit\" onClick={() => setModalShow(true)} style={{height:30, width: 30, marginRight: 10}} />\n  \n        <MyVerticallyCenteredModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n        />\n      </>\n    );\n  }","/home/vikraant/GitHub/zippy/src/components/UpdateModals/UpdateContestProfile.js",["233"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useContext } from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Modal, Form } from 'react-bootstrap';\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\nimport { PortalMap, setItem, getItem, ErrorToast, SuccessToast } from '../../utility/localStorageControl';\nimport AdminService from '../../AdminServices/AdminService';\nimport edited from '../../assets/images/Edit-Icon.png';\nimport { ProgrammerContext } from '../../utility/userContext';\n\nexport default function UpdateContestProfile({portalName, Rank, userName, id, ContestName, open, close}) {\n  const [user, setUser] = useContext(ProgrammerContext);\n  const [modalShow, setModalShow] = React.useState(false);\n  var portal = portalName;\n  const data = ['Geeks for Geeks', 'CodeChef', 'CodeForces', 'HackerRank', 'TopCoder', 'LeetCode'];\n  var contest = ContestName;\n  var rank = Rank;\n  var username = userName;\n  var card_id = id;\n\n  const formatPortal = portal => {\n    return portal.split(' ').join('').toLowerCase();\n  }\n\n  const updateWidget = async (card_id) => {\n    if(portal && username && rank && contest){\n      const updateWidgetData = {\n        'rank' : getItem('Contestrank'),\n        'website_id' : getItem('website_id'),\n        'username' : getItem('Contestusername'),\n        'contest_name' : getItem('Contestname')\n      }\n      AdminService.updateContestWidget(card_id, updateWidgetData)\n        .then(response => {\n          SuccessToast('Card Updated!')\n          AdminService.getUserData()\n            .then(resp => {\n              setUser(prevUser => ({...prevUser,\n                contest_widgets: resp.data.contest_widgets,\n              }));\n              close();\n              setModalShow(false);\n            })\n            .catch(err => ErrorToast(\"Some Error Occured.\"));\n            close();\n        })\n        .catch(error => {\n          ErrorToast('Error, Enter correct details!')\n          close();\n        });\n    } else {\n      ErrorToast('Error, Fields cannot be empty!')\n      close();\n    }\n  }\n\n  \n  const getPortalDetails = (portal) => {\n    if(portal !== ''){\n      setItem('url', PortalMap.get(portal).url);\n      setItem('website_id', PortalMap.get(portal).id);\n      setItem('logo', PortalMap.get(portal).logo);\n    }\n  }\n\n  const UpdateCard = (card_id) => {\n    open();\n    setModalShow(false);\n    setItem('Contestportal', portal);\n    getPortalDetails(formatPortal(getItem('Contestportal')));\n    setItem('Contestusername', username);\n    setItem('Contestrank', rank);\n    setItem('Contestname', contest);\n    updateWidget(card_id);\n  }\n\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">Update Contests won</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\" className=\" flexColumn mb-20\">\n              <Form.Label>Website Name</Form.Label>\n              <select defaultValue={portal} onChange={(e) => portal = (e.target.value)}>\n                <option value=\"Eg. GeeksforGeeks, CodeChef\" disabled>Eg. GeeksforGeeks, CodeChef</option>\n                {data.map(platform => (\n                  <option value={platform}>{platform}</option>\n                ))}\n              </select>\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword1\" className=\"mb-20\">\n              <Form.Label>Your Profile Username </Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. abc_234\" defaultValue={username} onChange={(e) => username = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword2\" className=\"mb-20\">\n              <Form.Label>Contest Name</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. 2020 Hackathon\" defaultValue={contest} onChange={(e) => contest = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword3\">\n              <Form.Label>Your Rank</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. 2514\" defaultValue={rank} onChange={(e) => rank = (e.target.value)} />\n            </Form.Group>\n  \n          </Form>\n  \n          <div className=\"share\" style={{justifyContent: 'center'}}>\n            <a onClick={() => UpdateCard(card_id)} className=\"flexAlignCenter modal-button\">Update Profile</a>\n          </div>\n  \n        </div>\n      </Modal>\n    );\n  }\n\n  return (\n    <>\n        <img src={edited} alt=\"edit\" onClick={() => setModalShow(true)} style={{height:30, width: 30, marginRight: 10}} />\n  \n        <MyVerticallyCenteredModal\n            show={modalShow}\n            onHide={() => setModalShow(false)}\n        />\n    </>\n  );\n}\n","/home/vikraant/GitHub/zippy/src/app/store.js",[],"/home/vikraant/GitHub/zippy/src/features/user/userSlice.js",[],{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","severity":1,"message":"239","line":16,"column":10,"nodeType":"240","messageId":"241","endLine":16,"endColumn":17},{"ruleId":"238","severity":1,"message":"242","line":6,"column":8,"nodeType":"240","messageId":"241","endLine":6,"endColumn":16},{"ruleId":"238","severity":1,"message":"243","line":10,"column":9,"nodeType":"240","messageId":"241","endLine":10,"endColumn":16},{"ruleId":"238","severity":1,"message":"239","line":10,"column":18,"nodeType":"240","messageId":"241","endLine":10,"endColumn":25},{"ruleId":"238","severity":1,"message":"244","line":20,"column":10,"nodeType":"240","messageId":"241","endLine":20,"endColumn":14},{"ruleId":"238","severity":1,"message":"244","line":19,"column":12,"nodeType":"240","messageId":"241","endLine":19,"endColumn":16},{"ruleId":"238","severity":1,"message":"244","line":11,"column":10,"nodeType":"240","messageId":"241","endLine":11,"endColumn":14},{"ruleId":"238","severity":1,"message":"244","line":10,"column":10,"nodeType":"240","messageId":"241","endLine":10,"endColumn":14},{"ruleId":"238","severity":1,"message":"245","line":2,"column":28,"nodeType":"240","messageId":"241","endLine":2,"endColumn":36},{"ruleId":"238","severity":1,"message":"239","line":7,"column":22,"nodeType":"240","messageId":"241","endLine":7,"endColumn":29},{"ruleId":"238","severity":1,"message":"243","line":7,"column":31,"nodeType":"240","messageId":"241","endLine":7,"endColumn":38},{"ruleId":"238","severity":1,"message":"244","line":12,"column":10,"nodeType":"240","messageId":"241","endLine":12,"endColumn":14},{"ruleId":"238","severity":1,"message":"246","line":12,"column":16,"nodeType":"240","messageId":"241","endLine":12,"endColumn":23},{"ruleId":"238","severity":1,"message":"247","line":4,"column":17,"nodeType":"240","messageId":"241","endLine":4,"endColumn":21},{"ruleId":"238","severity":1,"message":"243","line":7,"column":10,"nodeType":"240","messageId":"241","endLine":7,"endColumn":17},{"ruleId":"238","severity":1,"message":"239","line":7,"column":19,"nodeType":"240","messageId":"241","endLine":7,"endColumn":26},{"ruleId":"238","severity":1,"message":"248","line":2,"column":27,"nodeType":"240","messageId":"241","endLine":2,"endColumn":36},{"ruleId":"238","severity":1,"message":"243","line":7,"column":21,"nodeType":"240","messageId":"241","endLine":7,"endColumn":28},{"ruleId":"238","severity":1,"message":"244","line":17,"column":12,"nodeType":"240","messageId":"241","endLine":17,"endColumn":16},{"ruleId":"238","severity":1,"message":"248","line":1,"column":27,"nodeType":"240","messageId":"241","endLine":1,"endColumn":36},{"ruleId":"238","severity":1,"message":"245","line":2,"column":16,"nodeType":"240","messageId":"241","endLine":2,"endColumn":24},{"ruleId":"238","severity":1,"message":"249","line":6,"column":8,"nodeType":"240","messageId":"241","endLine":6,"endColumn":20},{"ruleId":"238","severity":1,"message":"246","line":11,"column":16,"nodeType":"240","messageId":"241","endLine":11,"endColumn":23},{"ruleId":"238","severity":1,"message":"239","line":6,"column":22,"nodeType":"240","messageId":"241","endLine":6,"endColumn":29},{"ruleId":"238","severity":1,"message":"243","line":6,"column":31,"nodeType":"240","messageId":"241","endLine":6,"endColumn":38},{"ruleId":"238","severity":1,"message":"245","line":2,"column":28,"nodeType":"240","messageId":"241","endLine":2,"endColumn":36},{"ruleId":"238","severity":1,"message":"245","line":2,"column":28,"nodeType":"240","messageId":"241","endLine":2,"endColumn":36},{"ruleId":"238","severity":1,"message":"244","line":12,"column":10,"nodeType":"240","messageId":"241","endLine":12,"endColumn":14},{"ruleId":"238","severity":1,"message":"245","line":2,"column":28,"nodeType":"240","messageId":"241","endLine":2,"endColumn":36},{"ruleId":"238","severity":1,"message":"249","line":4,"column":8,"nodeType":"240","messageId":"241","endLine":4,"endColumn":20},{"ruleId":"238","severity":1,"message":"243","line":5,"column":9,"nodeType":"240","messageId":"241","endLine":5,"endColumn":16},{"ruleId":"238","severity":1,"message":"239","line":5,"column":18,"nodeType":"240","messageId":"241","endLine":5,"endColumn":25},{"ruleId":"238","severity":1,"message":"246","line":11,"column":18,"nodeType":"240","messageId":"241","endLine":11,"endColumn":25},{"ruleId":"238","severity":1,"message":"244","line":12,"column":12,"nodeType":"240","messageId":"241","endLine":12,"endColumn":16},{"ruleId":"238","severity":1,"message":"244","line":12,"column":10,"nodeType":"240","messageId":"241","endLine":12,"endColumn":14},"no-native-reassign",["250"],"no-negated-in-lhs",["251"],"no-unused-vars","'getItem' is defined but never used.","Identifier","unusedVar","'introimg' is defined but never used.","'setItem' is defined but never used.","'user' is assigned a value but never used.","'useState' is defined but never used.","'setUser' is assigned a value but never used.","'Form' is defined but never used.","'useEffect' is defined but never used.","'AdminService' is defined but never used.","no-global-assign","no-unsafe-negation"]