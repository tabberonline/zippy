[{"F:\\Github\\zippy1\\src\\index.js":"1","F:\\Github\\zippy1\\src\\reportWebVitals.js":"2","F:\\Github\\zippy1\\src\\App.js":"3","F:\\Github\\zippy1\\src\\screens\\ContactScreen\\ContactScreen.js":"4","F:\\Github\\zippy1\\src\\screens\\HomeScreen\\HomeScreen.js":"5","F:\\Github\\zippy1\\src\\screens\\AboutScreen\\AboutScreen.js":"6","F:\\Github\\zippy1\\src\\screens\\DisplayScreen\\DisplayScreen.js":"7","F:\\Github\\zippy1\\src\\screens\\PortfolioScreen\\PortfolioScreen.js":"8","F:\\Github\\zippy1\\src\\utility\\localStorageControl.js":"9","F:\\Github\\zippy1\\src\\components\\FAQCard\\FAQCard.js":"10","F:\\Github\\zippy1\\src\\components\\AchievementCard\\AchievementCard.js":"11","F:\\Github\\zippy1\\src\\components\\Header\\Header1.js":"12","F:\\Github\\zippy1\\src\\assets\\Datafiles\\AchievementsList.js":"13","F:\\Github\\zippy1\\src\\assets\\Datafiles\\QnA.js":"14","F:\\Github\\zippy1\\src\\components\\FeatureCard\\FeatureCard.js":"15","F:\\Github\\zippy1\\src\\assets\\Datafiles\\FeaturesList.js":"16","F:\\Github\\zippy1\\src\\components\\Footer\\Footer.js":"17","F:\\Github\\zippy1\\src\\components\\Header\\Header.js":"18","F:\\Github\\zippy1\\src\\components\\modals\\PortfolioModal.js":"19","F:\\Github\\zippy1\\src\\components\\modals\\ShareModal.js":"20","F:\\Github\\zippy1\\src\\components\\modals\\ContestProfileModal.js":"21","F:\\Github\\zippy1\\src\\components\\modals\\ProjectModal.js":"22","F:\\Github\\zippy1\\src\\components\\ContestCard\\ContestCard.js":"23","F:\\Github\\zippy1\\src\\components\\ProjectCard\\ProjectCard.js":"24","F:\\Github\\zippy1\\src\\components\\ProjectCard\\ProjectCardDisplay.js":"25","F:\\Github\\zippy1\\src\\components\\ContestCard\\ContestCardDisplay.js":"26","F:\\Github\\zippy1\\src\\components\\modals\\CodingProfileModal.js":"27","F:\\Github\\zippy1\\src\\components\\CodingCard\\CodingCardDisplay.js":"28","F:\\Github\\zippy1\\src\\components\\CodingCard\\CodingCard.js":"29","F:\\Github\\zippy1\\src\\AdminServices\\AdminService.js":"30","F:\\Github\\zippy1\\src\\components\\GoogleBtn.js":"31","F:\\Github\\zippy1\\src\\AdminServices\\dataService.js":"32","F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateCodingProfile.js":"33","F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateContestProfile.js":"34","F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateProject.js":"35","F:\\Github\\zippy1\\src\\utility\\reducer.js":"36","F:\\Github\\zippy1\\src\\utility\\StateProvider.js":"37"},{"size":1649,"mtime":1610504659917,"results":"38","hashOfConfig":"39"},{"size":362,"mtime":1610430732000,"results":"40","hashOfConfig":"39"},{"size":537,"mtime":1610430732000,"results":"41","hashOfConfig":"39"},{"size":5359,"mtime":1610499848906,"results":"42","hashOfConfig":"39"},{"size":4723,"mtime":1610743558254,"results":"43","hashOfConfig":"39"},{"size":2404,"mtime":1610499781929,"results":"44","hashOfConfig":"39"},{"size":4744,"mtime":1610504512082,"results":"45","hashOfConfig":"39"},{"size":8165,"mtime":1610912187897,"results":"46","hashOfConfig":"39"},{"size":3041,"mtime":1610430732000,"results":"47","hashOfConfig":"39"},{"size":1298,"mtime":1610498564435,"results":"48","hashOfConfig":"39"},{"size":606,"mtime":1610498486917,"results":"49","hashOfConfig":"39"},{"size":1605,"mtime":1610498921211,"results":"50","hashOfConfig":"39"},{"size":369,"mtime":1610430732000,"results":"51","hashOfConfig":"39"},{"size":1135,"mtime":1610430732000,"results":"52","hashOfConfig":"39"},{"size":552,"mtime":1610498595166,"results":"53","hashOfConfig":"39"},{"size":1225,"mtime":1610430732000,"results":"54","hashOfConfig":"39"},{"size":671,"mtime":1610498849268,"results":"55","hashOfConfig":"39"},{"size":1088,"mtime":1610498870267,"results":"56","hashOfConfig":"39"},{"size":6348,"mtime":1610500459035,"results":"57","hashOfConfig":"39"},{"size":2724,"mtime":1610504582310,"results":"58","hashOfConfig":"39"},{"size":5580,"mtime":1610616415399,"results":"59","hashOfConfig":"39"},{"size":4534,"mtime":1610500779139,"results":"60","hashOfConfig":"39"},{"size":9030,"mtime":1610500816524,"results":"61","hashOfConfig":"39"},{"size":6767,"mtime":1610500831322,"results":"62","hashOfConfig":"39"},{"size":893,"mtime":1610500837174,"results":"63","hashOfConfig":"39"},{"size":1323,"mtime":1610500821083,"results":"64","hashOfConfig":"39"},{"size":5763,"mtime":1610616401172,"results":"65","hashOfConfig":"39"},{"size":1130,"mtime":1610500809531,"results":"66","hashOfConfig":"39"},{"size":9132,"mtime":1610500798465,"results":"67","hashOfConfig":"39"},{"size":7435,"mtime":1610430732000,"results":"68","hashOfConfig":"39"},{"size":3304,"mtime":1610500171065,"results":"69","hashOfConfig":"39"},{"size":2332,"mtime":1610430732000,"results":"70","hashOfConfig":"39"},{"size":5337,"mtime":1610616437296,"results":"71","hashOfConfig":"39"},{"size":5688,"mtime":1610616445721,"results":"72","hashOfConfig":"39"},{"size":4612,"mtime":1610430732000,"results":"73","hashOfConfig":"39"},{"size":1124,"mtime":1610457107933,"results":"74","hashOfConfig":"39"},{"size":373,"mtime":1610473541120,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"17xg5nk",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"78"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"78"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},"F:\\Github\\zippy1\\src\\index.js",[],["168","169"],"F:\\Github\\zippy1\\src\\reportWebVitals.js",[],"F:\\Github\\zippy1\\src\\App.js",["170"],"import React, {useEffect} from 'react';\nimport HomeScreen from './screens/HomeScreen/HomeScreen';\nimport {setItem, getItem} from './utility/localStorageControl';\n\nfunction App() {  \n  useEffect(() => {\n    setItem('login', false);\n    setItem('access_token', '');\n    setItem('name', '');\n    setItem('image', '');\n    setItem('portfolio', false);\n    setItem('projects', []);\n    setItem('rank', []);\n    setItem('contest', []);\n  }, []);\n  return (\n    <div className=\"App\">\n      <HomeScreen />\n    </div>\n  );\n}\n\nexport default App;\n","F:\\Github\\zippy1\\src\\screens\\ContactScreen\\ContactScreen.js",["171"],"import React, { useState } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './ContactScreen.css';\nimport Footer from '../../components/Footer/Footer';\nimport contactimg from '../../assets/images/Contactimg.png';\nimport {Form} from 'react-bootstrap';\nimport Header1 from '../../components/Header/Header1';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\nimport { Animated } from 'react-animated-css';\n\nfunction ContactScreen() {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [subject, setSubject] = useState('');\n    const [message, setMessage] = useState('');\n\n    const SendMail = async () => {\n        if(name.length > 0 && email.length > 0 && subject.length > 0 && message.length > 0){\n            const mailContent = {\n                'name': name,\n                'email': email,\n                'subject': subject,\n                'message': message\n            }\n            AdminService.sendMail(mailContent)\n                .then(resp => {\n                    toast.success('Mail Sent!', {\n                        position: \"top-center\",\n                        autoClose: 2000,\n                        hideProgressBar: true,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        progress: undefined,\n                    });\n                    setName('');\n                    setEmail('');\n                    setMessage('');\n                    setSubject('');\n                })\n                .catch(err => {\n                    toast.error('Invalid entries!', {\n                        position: \"top-center\",\n                        autoClose: 2000,\n                        hideProgressBar: true,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        progress: undefined,\n                    });\n                })\n        } else{\n            toast.error('Error, Fields cannot be empty!', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n        }\n\n    }\n  return (\n    <div className=\"contact-screen\">\n        <Header1 />\n        <div id=\"intro-section\">\n          <div className=\"mw1100 flexColumn\">\n            <Animated isVisible={true} animationIn=\"slideInUp\">\n                <div className=\"flexColumn flexAlignCenter flexCenter mh-20\" style={{height: 300, borderRadius: 8}}>\n                    <img src={contactimg} alt=\"\" style={{width: '90%'}} />\n                </div>\n            </Animated>\n            <ToastContainer\n                position=\"top-center\"\n                autoClose={3000}\n                hideProgressBar={true}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n            />\n            <Animated isVisible={true} animationIn=\"slideInUp\">\n                <div className=\"flexColumn contact-section\">\n                    <h1 className=\"contact-heading\">Have anything to ask?</h1>\n                    <div className=\"flexColumn flexAround flexAlignCenter mv-40\">\n                        <Form style={{width: '60%'}}>\n                            <Form.Group controlId=\"formBasicEmail\" className=\"mb-20\">\n                                <Form.Label>Name*</Form.Label>\n                                <Form.Control type=\"name\" defaultValue={name} onChange={(e) => setName(e.target.value)} />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"formBasicPassword\" className=\"mb-20\">\n                                <Form.Label>Email* </Form.Label>\n                                <Form.Control type=\"text\" defaultValue={email} onChange={(e) => setEmail(e.target.value)} />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"formBasicPassword2\" className=\"mb-20\">\n                                <Form.Label>Subject*</Form.Label>\n                                <Form.Control type=\"text\" defaultValue={subject} onChange={(e) => setSubject(e.target.value)} />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"formBasicPassword3\">\n                                <Form.Label>Message*</Form.Label>\n                                <Form.Control as=\"textarea\" rows={5} defaultValue={message} onChange={(e) => setMessage(e.target.value)} />\n                            </Form.Group>\n\n                            <div className=\"share\" onClick={() => SendMail()} style={{justifyContent: 'flex-start', paddingLeft: 0, paddingTop: 30}}>\n                                <a className=\"flexAlignCenter modal-button\">Send</a>\n                            </div>\n                        </Form>\n                    </div>\n                </div>\n            </Animated>\n          </div>\n      </div>\n        <Footer />\n    </div>\n  );\n}\n\nexport default ContactScreen;\n","F:\\Github\\zippy1\\src\\screens\\HomeScreen\\HomeScreen.js",["172","173","174","175"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {useEffect} from 'react';\nimport '../../styles/HelperStyles.css';\nimport './HomeScreen.css';\nimport Header from '../../components/Header/Header';\nimport introimg from '../../assets/images/handshake-colour.png';\nimport whytabber from '../../assets/images/drawkit-content-man-colour.png'\nimport {BiCheckCircle} from 'react-icons/bi';\nimport FeaturesList from '../../assets/Datafiles/FeaturesList';\nimport FeatureCard from '../../components/FeatureCard/FeatureCard';\nimport AchievementsList from '../../assets/Datafiles/AchievementsList';\nimport AchievementCard from '../../components/AchievementCard/AchievementCard';\nimport QnA from '../../assets/Datafiles/QnA';\nimport FAQCard from '../../components/FAQCard/FAQCard';\nimport Footer from '../../components/Footer/Footer';\nimport { setItem, getItem } from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport PortfolioModal from '../../components/modals/PortfolioModal';\nimport { Animated } from 'react-animated-css';\n\nfunction HomeScreen() {\n  return (\n    <div className=\"#home-screen\">\n      <Header />\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n        <div id=\"intro-section\">\n          <div className=\"mw1100 flexRow flexAround flexAlignCenter\">\n            <img className=\"intro-img\" src={introimg} alt=\"intro\" />\n            <div className=\"mw600 flexColumn\">\n                <h1 className=\"intro-text\">\n                    Improve your chances of getting hired, just Tab it for \n                    <span style={{color: 'rgba(0,229,216,1)'}}> FREE</span>\n                </h1>\n                <PortfolioModal home={true} />\n            </div>\n          </div>\n        </div>\n      </Animated>\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n      <div id=\"why-tabber\">\n        <div className=\"mw1100 flexRow flexAround flexAlignCenter\">\n          <div className=\"mw600 flexColumn mv-40\">\n              <h1 className=\"whytabber-heading\">Why <span style={{color: '#077A73'}}>tabber?</span></h1>\n              <p className=\"whytabber-text\">Are you tired of sending <strong>each and every link</strong> to recruiters taking the hassle of mentioning each and every <strong>rank</strong>? Say no more! because Tabber is here to make this a possibility.</p>\n              <p className=\"whytabber-features mt-50 mb-20\">The features which are covered in this</p>\n              <p className=\"ml-20 whytabber-point flexAlignCenter\"><BiCheckCircle style={{color: '#077A73', marginRight: 10}} />Add all your portfolio profiles.</p>\n              <p className=\"ml-20 whytabber-point flexAlignCenter\"><BiCheckCircle style={{color: '#077A73', marginRight: 10}} />Edit your resume live on the go.</p>\n              <p className=\"ml-20 pb-100 whytabber-point flexAlignCenter\"><BiCheckCircle style={{color: '#077A73', marginRight: 10}} />Get a single shareable link.</p>\n          </div>\n          <img className=\"intro-img\" src={whytabber} alt=\"why-tabber\" />\n        </div>\n      </div>\n      </Animated>\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n      <div id=\"tabberfeatures\">\n        <div className=\"mw1100 pl-40 flexColumn\">\n          <h1 className=\"tabberfeatures-heading\">What we got you</h1>\n          <div className=\"flexRow flexBetween\" style={{flexWrap: 'wrap'}}>\n              {FeaturesList.map(feature => (\n                  <FeatureCard key={feature.sr} name={feature.name} desc={feature.desc} img={feature.img} />\n              ))}\n          </div>\n        </div>\n      </div>\n      </Animated>\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n      <div id=\"achievements\">\n        <div className=\"mw1100 pl-40 flexColumn\">\n          <h1 className=\"achievements-heading\">Achievements we have made, so far</h1>\n          <div className=\"flexRow flexCenter\" style={{flexWrap: 'wrap'}}>\n              {AchievementsList.map(achievement => (\n                  <AchievementCard key={achievement.sr} name={achievement.name} desc={achievement.desc} image={achievement.image} />\n              ))}\n          </div>\n        </div>\n      </div>\n      </Animated>\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n      <div id=\"faq\">\n        <div className=\"mw1100 ph-40 flexColumn\">\n          <h1 className=\"tabberfeatures-heading\">Frequently Asked Questions</h1>\n          {QnA.map(ques => (\n              <FAQCard key={ques.sr} ques={ques.ques} ans={ques.ans} />\n          ))}\n        </div>\n       </div>\n      </Animated>\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\n        <Footer />\n      </Animated>\n    </div>\n  );\n}\n\nexport default HomeScreen;\n","F:\\Github\\zippy1\\src\\screens\\AboutScreen\\AboutScreen.js",[],"F:\\Github\\zippy1\\src\\screens\\DisplayScreen\\DisplayScreen.js",[],"F:\\Github\\zippy1\\src\\screens\\PortfolioScreen\\PortfolioScreen.js",["176","177","178","179","180"],"import React, { useEffect, useState } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './PortfolioScreen.css';\nimport Footer from '../../components/Footer/Footer';\nimport CodingCard from '../../components/CodingCard/CodingCard';\nimport ContestCard from '../../components/ContestCard/ContestCard';\nimport ProjectCard from '../../components/ProjectCard/ProjectCard';\nimport CodingProfileModal from '../../components/modals/CodingProfileModal';\nimport ContestProfileModal from '../../components/modals/ContestProfileModal';\nimport ProjectModal from '../../components/modals/ProjectModal';\nimport ShareModal from '../../components/modals/ShareModal';\nimport {AiOutlineEdit} from 'react-icons/ai';\nimport $ from 'jquery';\nimport Header1 from '../../components/Header/Header1';\nimport { getItem, setItem, ReversePortalMap } from '../../utility/localStorageControl';\nimport AdminService from '../../AdminServices/AdminService';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {isMobile} from 'react-device-detect';\nconst API_KEY = 'AFjzy7b0VSvCEJhKDtcQ6z';\nconst processAPI = 'https://cdn.filestackcontent.com';\n\nfunction PortfolioScreen() {\n  const [name, setname] = useState(getItem('name'));\n  const [title, settitle] = useState(getItem('titlePortfolio'));\n  const [desc, setdesc] = useState(getItem('descPortfolio'));\n  const [rankWidgets, setrankwidgets] = useState(getItem('rankWidgets'));\n  const [contestWidgets, setcontestwidgets] = useState(getItem('contestWidgets'));\n  const [projectWidgets, setprojectwidgets] = useState(getItem('projectWidgets'));\n\n  const Edit1 = () => {\n    console.log('edittable1')\n    $(\".title\").prop(\"readonly\", false);\n  } \n  const Edit2 = () => {\n    console.log('edittable2')\n    $(\".desc\").prop(\"readonly\", false);\n  } \n  const updateTitle = (event) => {\n    settitle(event.target.value);\n    setItem('titlePortfolio', title);\n    UpdatePortfolio();\n  }\n  const updateDesc = (event) => {\n    setdesc(event.target.value);\n    setItem('descPortfolio', desc);\n    UpdatePortfolio();\n  }\n  const UpdatePortfolio = async () =>{\n    if(desc.length > 0 && title.length > 0){\n      const UpdatePortfolioData = {\n        'title': getItem('titlePortfolio'),\n        'description': getItem('descPortfolio'),\n      }\n      console.log(UpdatePortfolioData);\n      AdminService.updatePortfolio(UpdatePortfolioData)\n        .then(resp => {\n          console.log('Response', resp);\n          toast.success('Details Updated!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        })\n        .catch(err => {\n          console.log('Error', err);\n          toast.error('Error, Please retry!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        });\n    } else {\n      toast.error('Error, Fields cannot be empty!', {\n        position: \"top-center\",\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n  }\n\n  return (\n    <div className=\"#portfolio-screen\">      \n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar={true}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n      <Header1 />\n      <ShareModal id={getItem('user_id')} />\n      <div className=\"mw1100\">\n        <div className=\"p-40 flexColumn portfolio-section\">\n          <div className=\"flexColumn\">\n            <div className=\"flexRow flexCenter flexAlignCenter\">\n              <input type=\"text\" autoComplete=\"off\" autoCorrect=\"off\" autoCapitalize=\"off\" spellCheck=\"false\" className=\"title\" defaultValue={title} onBlur={(event) => updateTitle(event)} placeholder=\"Portfolio Title\" readOnly />\n              <div className=\"flexRow flexCenter flexAlignCenter iconcontainer1\">\n                <AiOutlineEdit className=\"portfolio-icon\" size=\"20\" onClick={()=>Edit1()} style={{cursor: 'pointer'}} />\n              </div>\n            </div>\n            <hr style={{color : '#717070', width: '80%', margin: 'auto', marginTop: 10}} />\n            <div className=\"flexColumn\" style={{margin: 40, marginLeft: 0, marginBottom: 0}}>\n              <p className=\"name mb-20 pl-20\">Hello! I am <strong>{name}</strong></p>\n              <div className=\"flexRow\">\n                <textarea autocomplete=\"off\" autoCorrect=\"off\" autoCapitalize=\"off\" spellCheck=\"false\" rows=\"5\" className=\"desc\" defaultValue={desc} onBlur={(event) => updateDesc(event)} readOnly placeholder=\"Enter your College and profile description here\" />\n                <div className=\"flexRow flexCenter flexAlignCenter iconcontainer1\" style={{left: -15, top: -15}}>\n                  <AiOutlineEdit className=\"portfolio-icon\" size=\"20\" onClick={()=>Edit2()} style={{cursor: 'pointer'}} />\n                </div>\n              </div>\n            </div>\n            <div className=\"coding-profile mv-20\">\n              <p className=\"card-heading mb-20\">Coding Profile</p>\n              <div className=\"flexRow flexWrap\">\n                { rankWidgets !== [''] ?\n                    (\n                      rankWidgets.map(profile => (\n                        <CodingCard name={ReversePortalMap.get(profile.website_id.toString()).name} id={profile.website_username} rank={profile.rank} logo={ReversePortalMap.get(profile.website_id.toString()).logo} hide={profile.invisible} />\n                      ))\n                    ) : null\n                }\n                {\n                  rankWidgets.length <= 5 ? (\n                    <CodingProfileModal />\n                  ) : null\n                }\n              </div>\n            </div>\n            <div className=\"coding-profile mv-20\">\n              <p className=\"card-heading mb-20\">Contests Won</p>\n              <div className=\"flexRow flexWrap\">\n                { contestWidgets !== [''] ?\n                    (\n                      contestWidgets.map(profile => (\n                        <ContestCard card_id={profile.id} name={ReversePortalMap.get(profile.website_id.toString()).name} id={profile.website_username} rank={profile.rank} logo={ReversePortalMap.get(profile.website_id.toString()).logo} contest={profile.contest_name} hide={profile.invisible} />\n                      ))\n                    ) : null\n                }\n                {\n                  contestWidgets.length <= 5 ? (\n                    <ContestProfileModal />\n                  ) : null\n                }\n              </div>\n            </div>\n            <div className=\"coding-profile mv-20\">\n              <p className=\"card-heading mb-20\">Personal Projects</p>\n              <div className=\"flexRow flexWrap\">\n                { projectWidgets !== [''] ?\n                    (\n                      projectWidgets.map(project => (\n                        <ProjectCard name={project.title} url={project.link} img={`${processAPI}/${API_KEY}/urlscreenshot=agent:${isMobile ? 'mobile' : 'desktop'}/${project.link}`} id={project.id} hide={project.invisible} />\n                      ))\n                    ) : null\n                }   \n                {\n                  projectWidgets.length <= 5 ? ( \n                    <ProjectModal />\n                  ) : null\n                }             \n              </div>\n            </div>\n          </div>\n          <div className=\"flexRow flexCenter ph-20 flexAlignCenter mv-40\">\n            <hr style={{width: '35%', color: 'rgba(154,154,154,1)'}} />\n            <p className=\"end-text\">Thats all folks</p>\n            <hr style={{width: '35%', color: 'rgba(154,154,154,1)'}} />\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default PortfolioScreen;\n","F:\\Github\\zippy1\\src\\utility\\localStorageControl.js",[],"F:\\Github\\zippy1\\src\\components\\FAQCard\\FAQCard.js",[],"F:\\Github\\zippy1\\src\\components\\AchievementCard\\AchievementCard.js",[],"F:\\Github\\zippy1\\src\\components\\Header\\Header1.js",["181","182"],"import {React, useState} from 'react';\nimport './Header.css';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport splashlogo from '../../assets/images/logo.png';\nimport GoogleBtn from '../GoogleBtn';\nimport Avatar from '@material-ui/core/Avatar';\nimport { getItem, setItem } from '../../utility/localStorageControl';\n\nfunction Header1(){\n    return (\n        <header className=\"header\">\n            <Navbar sticky=\"top\" expand=\"lg\" className=\"flexRow flexAlignCenter navbar\">\n                <Navbar.Brand href=\"/home\">\n                    <img src={splashlogo} width=\"150\" height=\"30\" className=\"d-inline-block mr-80\" alt=\"logo\" />\n                </Navbar.Brand>\n                <Navbar.Collapse id=\"basic-navbar-nav\" className=\"w100 flexRow flexAlignCenter flexBetween\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link className=\"grow2\" href=\"/about\">About</Nav.Link>\n                        <Nav.Link className=\"grow2\" href=\"/home#faq\">FAQ</Nav.Link>\n                        <Nav.Link className=\"grow2\" href=\"/contact\">Contact</Nav.Link>\n                    </Nav>\n                    {getItem('login') ? (\n                        <div className=\"avatar\">\n                            <Avatar alt=\"img\" src={getItem('image')} />\n                            <p className=\"avatar-name\">Welcome<br/><p className=\"name\">{getItem('name')}</p></p>\n                        </div>\n                    ) : (\n                        <GoogleBtn />\n                    )}\n                </Navbar.Collapse>\n            </Navbar>\n        </header>\n    );\n}\n\nexport default Header1;","F:\\Github\\zippy1\\src\\assets\\Datafiles\\AchievementsList.js",[],"F:\\Github\\zippy1\\src\\assets\\Datafiles\\QnA.js",[],"F:\\Github\\zippy1\\src\\components\\FeatureCard\\FeatureCard.js",[],"F:\\Github\\zippy1\\src\\assets\\Datafiles\\FeaturesList.js",[],"F:\\Github\\zippy1\\src\\components\\Footer\\Footer.js",[],"F:\\Github\\zippy1\\src\\components\\Header\\Header.js",["183"],"import {React, useState} from 'react';\nimport './Header.css';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport splashlogo from '../../assets/images/logo.png';\nimport GoogleBtn from '../GoogleBtn';\n\nfunction Header(){\n    return (\n        <header className=\"header\">\n            <Navbar sticky=\"top\" expand=\"lg\" className=\"flexRow flexAlignCenter navbar\">\n                <Navbar.Brand href=\"/home\">\n                    <img src={splashlogo} width=\"150\" height=\"30\" className=\"d-inline-block mr-80\" alt=\"logo\" />\n                </Navbar.Brand>\n                <div className=\"w100 flexRow flexAlignCenter flexBetween\">\n                    <Nav className=\"mr-auto flexRow\">\n                        <Nav.Link className=\"grow2\" href=\"/about\">About</Nav.Link>\n                        <Nav.Link className=\"grow2\" href=\"/home#faq\">FAQ</Nav.Link>\n                        <Nav.Link className=\"grow2\" href=\"/contact\">Contact</Nav.Link>\n                    </Nav>\n                    <GoogleBtn />\n                </div>\n            </Navbar>\n        </header>\n    );\n}\n\nexport default Header;","F:\\Github\\zippy1\\src\\components\\modals\\PortfolioModal.js",["184"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useState } from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Form, Modal } from 'react-bootstrap';\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\nimport { getItem, setItem } from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\n  \n  export default function PortfolioModal({home}) {\n    const [modalShow, setModalShow] = useState(false);\n    const [apicall, setcall] = useState('');\n    var name = '';\n    var title = '';\n    var desc = '';    \n\n    const createPortfolio = async () => {\n      const accessToken = getItem('access_token');\n      if(accessToken === \"\"){\n        toast.error('Access Token not Retrieved!', {\n          position: \"top-center\",\n          autoClose: 2000,\n          hideProgressBar: true,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          });\n      } else{\n        if(title.length > 0 && desc.length > 0){\n          const portfolioData = {\n              'title': getItem('titlePortfolio'),\n              'picture_url': getItem('image'),\n              'description': getItem('descPortfolio')\n          };\n          AdminService.createPortfolio(portfolioData)\n            .then(resp => {\n              toast.success('Details Entered!', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n              setcall('Success');\n              AdminService.getUserData()\n                .then(resp => {\n                  setItem('portfolio', resp.data.resume_present);\n                  setModalShow(false);\n                })\n                .catch(err => console.log(err));\n            })\n            .catch(err => {\n              toast.error('Error, One User, One Portfolio!', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n            });\n        } else {\n          toast.error('Error, Fields cannot be empty!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        }\n      }\n    };  \n\n    const Add = () => {\n      setItem('name', name);\n      setItem('titlePortfolio', title);\n      setItem('descPortfolio', desc);\n      createPortfolio();\n    }\n\n    const ModalOpen = () => {\n      apicall === 'Success' ? window.open('/portfolio', '_self') : setModalShow(true);\n    }\n\n    function MyVerticallyCenteredModal(props) {\n        return (\n          <Modal\n            {...props}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n          >\n            <div className=\"flexColumn\">\n            <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n              <div style={{width: 20}}></div>\n              <h2 className=\"modal-head\">Add Portfolio Details</h2>\n              <button onClick={props.onHide}>\n                <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n              </button>\n            </div>\n            <Form>\n              <Form.Group controlId=\"formBasic1\" className=\"mb-20\">\n                <Form.Label>Your Name<span style={{color: 'red'}}>*</span> </Form.Label>\n                <Form.Control type=\"text\" defaultValue={name} onChange={(e) => name = (e.target.value)} placeholder=\"Eg. Aarav Bansal\" />\n              </Form.Group>    \n              <Form.Group controlId=\"formBasic1\" className=\"mb-20\">\n                <Form.Label>Your Portfolio Title<span style={{color: 'red'}}>*</span> </Form.Label>\n                <Form.Control type=\"text\" defaultValue={title} onChange={(e) => title = (e.target.value)} placeholder=\"Eg. Web Developer\" />\n              </Form.Group>    \n              <Form.Group controlId=\"formBasic2\">\n                <Form.Label>Your Description<span style={{color: 'red'}}>*</span></Form.Label>\n                <Form.Control type=\"text\" defaultValue={desc} onChange={(e) => desc = (e.target.value)} placeholder=\"Enter your College and profile description here\" />\n              </Form.Group>    \n            </Form>\n    \n            <div className=\"share\" style={{justifyContent: 'center'}}>\n              <a onClick={() => Add()} className=\"flexAlignCenter modal-button\">Create Portfolio</a>\n            </div>\n    \n          </div>\n          </Modal>\n        );\n      }\n  \n    return (\n      <>\n        {\n          home ? (\n            <a style={{cursor: 'pointer'}} onClick={() => {\n              if(getItem('login')){\n                if(getItem('portfolio')){\n                  window.open('/portfolio', '_self');\n                } else {\n                  setModalShow(true);\n                }\n              } else{\n                toast.warning('You need to Login first!', {\n                  position: \"top-center\",\n                  autoClose: 2000,\n                  hideProgressBar: true,\n                  closeOnClick: true,\n                  pauseOnHover: true,\n                  draggable: true,\n                  progress: undefined,\n                });\n              }\n            }} className=\"grow1 flexAlignCenter intro-button\"\n          >\n            Get Started\n          </a>\n          ) :\n            (\n              <button onClick={() => {\n                  getItem('portfolio') ? window.open('/portfolio', '_self') : ModalOpen()\n                }} \n                className=\"edit-your-portfolio grow1\"\n              >\n                {apicall === 'Success' || getItem('portfolio') ? 'Move to your Portfolio' : 'Edit your Portfolio'}\n              </button>\n            )\n        }\n        <MyVerticallyCenteredModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n        />\n      </>\n    );\n  }","F:\\Github\\zippy1\\src\\components\\modals\\ShareModal.js",[],"F:\\Github\\zippy1\\src\\components\\modals\\ContestProfileModal.js",["185"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Modal, Form } from 'react-bootstrap';\nimport {AiOutlineCloseCircle, AiOutlinePlusCircle} from 'react-icons/ai';\nimport { PortalMap, setItem, getItem } from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\n\nexport default function ContestProfileModal() {\n  const [modalShow, setModalShow] = React.useState(false);\n  var portal = \"Eg. GeeksforGeeks, CodeChef\";\n  const data = ['Geeks for Geeks', 'CodeChef', 'CodeForces', 'HackerRank', 'TopCoder', 'LeetCode'];\n  var contest = '';\n  var rank = '';\n  var username = '';\n\n  const formatPortal = portal => {\n    return portal.split(' ').join('').toLowerCase();\n  }\n\n  const createWidget = async () => {\n    if(portal && username && rank && contest){\n      const contestWidgetData = {\n        'rank' : getItem('Contestrank'),\n        'website_id' : getItem('website_id'),\n        'username' : getItem('Contestusername'),\n        'contest_name': getItem('Contestname')\n      }\n      AdminService.createContestWidget(contestWidgetData)\n        .then(response => {\n          toast.success('Details Entered!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n          AdminService.getUserData()\n            .then(resp => {\n              setItem('contestWidgets', resp.data.contest_widgets);\n              window.open('/portfolio', '_self');\n              setModalShow(false);\n            })\n            .catch(err => console.log(err));\n        })\n        .catch(error => {\n          toast.error('Error, Enter correct details!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        });\n    } else {\n      toast.error('Error, Fields cannot be empty!', {\n        position: \"top-center\",\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n  }\n\n  const getPortalDetails = (portal) => {\n    if(portal !== ''){\n      setItem('url', PortalMap.get(portal).url);\n      setItem('website_id', PortalMap.get(portal).id);\n      setItem('logo', PortalMap.get(portal).logo);\n    }\n  }\n\n  const UpdateCard = () => {\n    setItem('Contestportal', portal);\n    getPortalDetails(formatPortal(getItem('Contestportal')));\n    setItem('Contestusername', username);\n    setItem('Contestrank', rank);\n    setItem('Contestname', contest);\n    createWidget();\n  }\n\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">Add Contests won</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\" className=\" flexColumn mb-20\">\n              <Form.Label>Website Name</Form.Label>\n              <select defaultValue={portal} onChange={(e) => portal = (e.target.value)}>\n                <option value=\"Eg. GeeksforGeeks, CodeChef\" disabled>Eg. GeeksforGeeks, CodeChef</option>\n                {data.map(platform => (\n                  <option value={platform}>{platform}</option>\n                ))}\n              </select>\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword1\" className=\"mb-20\">\n              <Form.Label>Your Profile Username </Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. abc_234\" defaultValue={username} onChange={(e) => username = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword2\" className=\"mb-20\">\n              <Form.Label>Contest Name</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. 2020 Hackathon\" defaultValue={contest} onChange={(e) => contest = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword3\">\n              <Form.Label>Your Rank</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. 2514\" defaultValue={rank} onChange={(e) => rank = (e.target.value)} />\n            </Form.Group>\n  \n          </Form>\n  \n          <div className=\"share\" style={{justifyContent: 'center'}}>\n            <a onClick={() => UpdateCard()} className=\"flexAlignCenter modal-button\">Add to Profile</a>\n          </div>\n  \n        </div>\n      </Modal>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"grow1 flexColumn flexCenter flexAlignCenter add-card\" style={{height: 250}}>\n        <button onClick={() => setModalShow(true)}>\n          <AiOutlinePlusCircle style={{fontSize: 80, color: '#C0C0C0'}} />\n        </button>\n      </div>\n\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </>\n  );\n}\n","F:\\Github\\zippy1\\src\\components\\modals\\ProjectModal.js",["186"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Modal, Form } from 'react-bootstrap';\nimport {AiOutlineCloseCircle, AiOutlinePlusCircle} from 'react-icons/ai';\nimport { setItem, getItem } from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\n\nexport default function ProjectModal() {\n  const [modalShow, setModalShow] = React.useState(false);\n  var url = '';\n  var project = '';\n\n  const createWidget = async () => {\n    if(url.length > 0 && project.length > 0 ){\n      const projectWidgetData = {\n        'title' : getItem('Projectname'),\n        'link' : getItem('Projectid')\n      }\n      AdminService.createProjectWidget(projectWidgetData)\n        .then(response => {\n          console.log(response);\n          toast.success('Details Entered!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n          AdminService.getUserData()\n            .then(resp => {\n              setItem('projectWidgets', resp.data.personal_projects);\n              window.open('/portfolio', '_self');\n              setModalShow(false);\n            })\n            .catch(err => console.log(err));\n        })\n        .catch(error => {\n          toast.error('Error, Enter correct details!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        });\n    } else {\n      toast.error('Error, Fields cannot be empty!', {\n        position: \"top-center\",\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n  }\n\n  const UpdateCard = () => {\n    setItem('Projectname', project);\n    setItem('Projectid', url);\n    createWidget();\n    setModalShow(false);\n  }\n\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">Add your work</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\" className=\"mb-20\">\n              <Form.Label>Project Title</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. Automated System\" defaultValue={project} onChange={(e) => project = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword1\" className=\"mb-20\">\n              <Form.Label>Project URL</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"http://www.google.com/\" defaultValue={url} onChange={(e) => url = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword2\" className=\"mb-20\">\n              <Form.Label>Cover Image</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Click on “upload cover” to upload an image of less than 2MB for your website cover.\" />\n            </Form.Group>\n  \n            <div className=\"share\">\n              <a className=\"flexAlignCenter upload-button\">Upload Cover</a>\n            </div>\n  \n          </Form>\n  \n          <div className=\"share\" style={{justifyContent: 'center'}}>\n            <a onClick={() => UpdateCard()} className=\"flexAlignCenter modal-button\">Add to Profile</a>\n          </div>\n  \n        </div>\n      </Modal>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"grow1 flexColumn flexCenter flexAlignCenter add-card\" style={{height: 280}}>\n        <button onClick={() => setModalShow(true)}>\n          <AiOutlinePlusCircle style={{fontSize: 80, color: '#C0C0C0'}} />\n        </button>\n      </div>\n\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </>\n  );\n}","F:\\Github\\zippy1\\src\\components\\ContestCard\\ContestCard.js",["187"],"import React, { useState } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './ContestCard.css';\nimport {BsThreeDotsVertical} from 'react-icons/bs';\nimport deleted from '../../assets/images/Bin-Icon.png';\nimport edited from '../../assets/images/Edit-Icon.png';\nimport hidden from '../../assets/images/Hide-Icon.png';\nimport hidecards from '../../assets/images/hiddeeen.png';\nimport {setItem, PortalMap} from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\nimport UpdateContestProfile from '../UpdateModals/UpdateContestProfile';\n\nexport default function ContestCard({name, rank, id, logo, contest, card_id, hide}){\n\n    const [ bullets, setbullets ] = useState(true);\n    const [ drawer, setdrawer ] = useState(false);\n    const [option1, setoption1] = useState(false);\n    const [option2, setoption2] = useState(false);\n    const [option3, setoption3] = useState(false);\n    const [icon1, seticon1] = useState(true);\n    const [icon2, seticon2] = useState(true);\n    const [icon3, seticon3] = useState(true);     \n    var invisible = hide;\n    console.log(card_id);\n\n    const OptionDrawer = () => {\n        setdrawer(true);\n        setbullets(false);\n    }\n    const CloseOptionDrawer = () => {\n        setdrawer(false);\n        setbullets(true);\n    }\n\n    const formatPortal = portal => {\n        return portal.split(' ').join('').toLowerCase();\n    }\n\n    const updateWidget = async () => {  \n        var website_name = formatPortal(name);\n        var website_id = PortalMap.get(website_name).id;\n        const updateWidgetData = {\n            'rank' : rank,\n            'website_id' : website_id,\n            'username' : name,\n            'contest_name' : contest,\n            'invisible': invisible,\n          }\n        console.log(updateWidgetData);\n        AdminService.updateContestWidget(card_id, updateWidgetData)\n          .then(response => {\n            toast.success('Card Updated!', {\n              position: \"top-center\",\n              autoClose: 2000,\n              hideProgressBar: true,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            AdminService.getUserData()\n              .then(resp => {\n                setItem('contestWidgets', resp.data.contest_widgets);\n                window.open('/portfolio', '_self')\n              })\n              .catch(err => console.log(err));\n          })\n          .catch(error => {\n            toast.error('Error updating!', {\n              position: \"top-center\",\n              autoClose: 2000,\n              hideProgressBar: true,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n          });\n      }\n\n    const unHideCard = () => {\n      invisible = false;\n      updateWidget();\n    }\n\n    const HideCard = () => {\n      invisible = true;\n      updateWidget()\n    }\n\n    const DeleteCard = async (card_id) => {\n        \n        AdminService.deleteContestWidget(card_id)\n            .then(response => {\n                toast.success('Card deleted successfully!', {\n                    position: \"top-center\",\n                    autoClose: 2000,\n                    hideProgressBar: true,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n                AdminService.getUserData()\n                    .then(resp => {\n                      setItem('contestWidgets', resp.data.contest_widgets);\n                      window.open('/portfolio', '_self')\n                    })\n                    .catch(err => console.log(err));\n                })\n            .catch(error => {\n                toast.error('Error, Cannot delete this card!', {\n                    position: \"top-center\",\n                    autoClose: 2000,\n                    hideProgressBar: true,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                })\n            });\n    }\n\n    return(\n        <div className=\"grow1 card11 flexColumn achievement-card\" onMouseLeave={() => CloseOptionDrawer()}>\n            {\n                invisible ? (\n                    <div id=\"overlay\" onClick={() => unHideCard()} className=\"flexColumn flexCenter flexAlignCenter\">\n                        <img src={hidecards} alt=\"hidden\" className=\"hide-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\n                        <p className=\"options-text\" style={{color: 'white'}}>Hidden</p>\n                    </div>\n                ) : null\n            }\n            <div className=\"flexRow flexCenter\" style={{position: 'relative'}}>\n                {logo === \"\" ? (\n                    <div className=\"flexRow flexCenter flexAlignCenter empty-logo\">\n                        <p className=\"profile-name\" style={{fontWeight: 700, color: 'white'}}>LOGO</p>\n                    </div>\n                ) : (\n                    <img className=\"logo\" src={logo} alt=\"logo\" />\n                )}\n                { bullets ? (\n                    <div onClick={() => OptionDrawer()} className=\"flexRow option-drawer flexCenter flexAlignCenter iconcontainer\">\n                        <BsThreeDotsVertical className=\"portfolio-icon\" size=\"20\" />                    \n                    </div>\n                    ) : null \n                }\n                { drawer ? (\n                    <div className=\"flexColumn flexStart options\" style={{position: 'absolute', top: '-15%', right:'-2%'}}>\n                        {icon1 ? (<img src={deleted} alt=\"delete\" onMouseEnter={() => {setoption1(true); seticon1(false);}} className=\"delete-icon\" style={{height:30, width: 30, marginBottom: 10, marginLeft: option2 ? 50 : null || option3 ? 50 : null}} />) : null }\n                        { option1 ? (\n                            <div className=\"flexRow flexAlignCenter option delete-option\" onClick={() => DeleteCard(card_id)} onMouseLeave={() => {setoption1(false); seticon1(true);}} style={{ marginBottom: 10, position: 'relative', left: 40 }}>\n                                <img src={deleted} alt=\"delete\" style={{height:30, width: 30, marginRight: 10}} />\n                                <p className=\"options-text\">Delete</p>\n                            </div>                            \n                            ) : null\n                        }\n                        {icon2 ? (<img src={edited} alt=\"edit\" onMouseEnter={() => {setoption2(true); seticon2(false);}} className=\"edit-icon\" style={{height:30, width: 30, marginBottom: 10, marginLeft: option1 ? 50 : null || option3 ? 50 : null}} />) : null}\n                        { option2 ? (\n                            <div className=\"flexRow flexAlignCenter option edit-option\" onMouseLeave={() => {setoption2(false); seticon2(true);}} style={{ marginBottom: 10, position: 'relative', left: 40 }}>\n                                <UpdateContestProfile portalName={name} Rank={rank} userName={id} id={card_id} ContestName={contest} />\n                                <p className=\"options-text\">Edit</p>\n                            </div>\n                            ) : null\n                        }\n                        {icon3 ? (<img src={hidden} alt=\"hide\" onMouseEnter={() => {setoption3(true); seticon3(false);}} className=\"hide-icon\" style={{height:30, width: 30, marginBottom: 10, marginLeft: option2 ? 50 : null || option1 ? 50 : null}} />) : null}\n                        { option3 ? (\n                            <div className=\"flexRow flexAlignCenter option hide-option\" onClick={() => HideCard()} onMouseLeave={() => {setoption3(false); seticon3(true);}} style={{ marginBottom: 10, position: 'relative', left: 40 }}>\n                                <img src={hidden} alt=\"hide\" style={{height:30, width: 30, marginRight: 10}} />\n                                <p className=\"options-text\">Hide</p>\n                            </div>\n                            ) : null\n                        }\n                    </div>\n                    ) : null\n                }\n            </div>\n            <p className=\"profile-name pl-20 mb-10\"> {name === \"\" ? \"Company Name\" : name}</p>\n            <div className=\"flexRow flexBetween\"> \n                <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">ID:</span> {id === \"\" ?  \"Id here\" : id }</p>\n                <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">Rank:</span> {rank === \"\" ?  \"?\" : rank  }</p>\n            </div>\n            <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">Contest Name: </span>{contest === \"\" ? \"Contest Name\" : contest }</p>\n        </div>\n    );\n}","F:\\Github\\zippy1\\src\\components\\ProjectCard\\ProjectCard.js",["188","189"],"import React, { useState, useEffect } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './ProjectCard.css';\nimport deleted from '../../assets/images/Bin-Icon.png';\nimport hidden from '../../assets/images/Hide-Icon.png';\nimport {setItem} from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\nimport UpdateProject from '../UpdateModals/UpdateProject';\nimport hidecards from '../../assets/images/hiddeeen.png';\n\nexport default function ProjectCard({name, url, id, img, hide}){\n    var invisible = hide;\n    const [namecard, setcard] = useState(true);\n    const [detailcard, setdetail] = useState(false);\n\n    const HideCard = () => {\n        invisible = true;\n        updateWidget();\n    }\n\n    const unHideCard = () => {\n        invisible = false;\n        updateWidget();\n    }\n\n    const updateWidget = async () => {\n        const projectWidgetData = {\n            'title' : name,\n            'link' : url,\n            'invisible': invisible\n        }\n        AdminService.updateProjectWidget(id, projectWidgetData)\n            .then(response => {\n              toast.success('Card Updated!', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n              AdminService.getUserData()\n                .then(resp => {\n                    setItem('projectWidgets', resp.data.personal_projects);\n                    window.open('/portfolio', '_self')\n                })\n                .catch(err => console.log(err));\n            })\n            .catch(error => {\n              toast.error('Error updating, Retry!', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n            });\n        }\n\n    const DeleteCard = async (project_id) => {        \n        AdminService.deleteProjectWidget(project_id)\n            .then(response => {\n                toast.success('Card deleted successfully!', {\n                    position: \"top-center\",\n                    autoClose: 2000,\n                    hideProgressBar: true,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n                AdminService.getUserData()\n                    .then(resp => {\n                        setItem('projectWidgets', resp.data.personal_projects);\n                        window.open('/portfolio', '_self')\n                    })\n                    .catch(err => console.log(err));\n                })\n            .catch(error => {\n                toast.error('Error, Cannot delete this card!', {\n                    position: \"top-center\",\n                    autoClose: 2000,\n                    hideProgressBar: true,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                })\n            });\n    }\n\n    return(\n        <>\n            {\n                invisible ? (\n                    <div className=\"grow1 flexColumn project-card flexEnd\" \n                        style={{  \n                            backgroundImage: img === \"\" ? null : `url(\"${img}\")`,\n                            backgroundColor: 'rgba(219,219,219,1)',\n                            backgroundSize: 'cover',\n                            backgroundRepeat: 'no-repeat'\n                        }}\n                    >                 \n                        <div id=\"overlay\" onClick={() => unHideCard()} className=\"flexColumn flexCenter flexAlignCenter\">\n                            <img src={hidecards} alt=\"hidden\" className=\"hide-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\n                            <p className=\"options-text\" style={{color: 'white'}}>Hidden</p>\n                        </div>                    \n                        <div onMouseEnter={() => {setcard(false); setdetail(true);}} className=\"flexColumn flexCenter flexAlignCenter project-textbox\">\n                            <p className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p>\n                        </div>\n                    </div>  \n                ) : (\n                    <div className=\"grow1 flexColumn project-card flexEnd\" \n                        style={{  \n                            backgroundImage: img === \"\" ? null : `url(\"${img}\")`,\n                            backgroundColor: 'rgba(219,219,219,1)',\n                            backgroundSize: 'cover',\n                            backgroundRepeat: 'no-repeat'\n                        }}\n                    >             \n                        {\n                            namecard ? (\n                                <div onMouseEnter={() => {setcard(false); setdetail(true);}} className=\"flexColumn flexCenter flexAlignCenter project-textbox\">\n                                    <p className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p>\n                                </div>\n                            ) : null\n                        }\n                        {\n                            detailcard ? (\n                                <div onMouseLeave={() => {setdetail(false); setcard(true);}} className=\"flexColumn flexCenter flexAlignCenter project-textbox1\">\n                                    <p className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p>\n                                    <div className=\"flexRow flexAround flexAlignCenter\" style={{position: 'absolute', bottom: 30, width: '75%'}}>\n                                        <img src={deleted} onClick={() => DeleteCard(id)} alt=\"delete\" className=\"delete-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\n                                        <UpdateProject projectName={name} projectlink={url} projectImage={img} projectId={id}/>\n                                        <img src={hidden} onClick={() => HideCard()} alt=\"hidden\" className=\"delete-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\n                                    </div>\n                                </div>\n                            ) : null\n                        }\n                    </div>\n                )\n            }\n        </>\n    );\n}","F:\\Github\\zippy1\\src\\components\\ProjectCard\\ProjectCardDisplay.js",["190","191"],"import React, { useState, useEffect } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './ProjectCard.css';\n\nexport default function ProjectCardDisplay({name, img, url}){\n    const [namecard, setcard] = useState(true);\n    return(\n        <div className=\"grow1 flexColumn project-card flexEnd\" \n            style={{  \n                backgroundImage: img === \"\" ? null : `url(\"${img}\")`,\n                backgroundColor: 'rgba(219,219,219,1)',\n                backgroundSize: 'cover',\n                backgroundRepeat: 'no-repeat'\n            }}\n        >\n            {\n                namecard ? (\n                    <div className=\"flexColumn flexCenter flexAlignCenter project-textbox\">\n                        <p className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p>\n                    </div>\n                ) : null\n            }\n        </div>\n    );\n}","F:\\Github\\zippy1\\src\\components\\ContestCard\\ContestCardDisplay.js",[],"F:\\Github\\zippy1\\src\\components\\modals\\CodingProfileModal.js",["192","193","194"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Form, Modal } from 'react-bootstrap';\nimport {AiOutlineCloseCircle, AiOutlinePlusCircle} from 'react-icons/ai';\nimport { PortalMap, setItem, getItem } from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\nimport AdminService from '../../AdminServices/AdminService';\n\n  export default function CodingProfileModal() {\n    const [modalShow, setModalShow] = React.useState(false);\n    var username = \"\";\n    var rank = \"\";\n    var portal = \"Eg. GeeksforGeeks, CodeChef\";\n    const data = ['Geeks for Geeks', 'CodeChef', 'CodeForces', 'HackerRank', 'TopCoder', 'LeetCode'];\n\n    const formatPortal = portal => {\n      return portal.split(' ').join('').toLowerCase();\n    }\n\n    const createRankWidget = async () => {\n      if(portal.length > 0 && username.length > 0 && rank.length > 0){\n        const rankWidgetData = {\n          'rank' : getItem('Codingrank'),\n          'website_id' : getItem('website_id'),\n          'username' : getItem('Codingusername'),\n        }\n        AdminService.createRankWidget(rankWidgetData)\n          .then(response => {\n            toast.success('Details Entered!', {\n              position: \"top-center\",\n              autoClose: 2000,\n              hideProgressBar: true,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            AdminService.getUserData()\n              .then(resp => {\n                setItem('rankWidgets', resp.data.rank_widgets);\n                window.open('/portfolio', '_self');\n                setModalShow(false);\n              })\n              .catch(err => console.log(err));\n          })\n          .catch(error => {\n            toast.error('Error, Enter correct details!', {\n              position: \"top-center\",\n              autoClose: 2000,\n              hideProgressBar: true,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n          });\n      } else {\n        toast.error('Error, Fields cannot be empty!', {\n          position: \"top-center\",\n          autoClose: 2000,\n          hideProgressBar: true,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n      }\n    }\n\n    const getPortalDetails = (portal) => {\n      if(portal !== ''){\n        setItem('url', PortalMap.get(portal).url);\n        setItem('website_id', PortalMap.get(portal).id);\n        setItem('logo', PortalMap.get(portal).logo);\n      }\n    }\n\n    const UpdateCard = () => {\n      setItem('Codingportal', portal);\n      getPortalDetails(formatPortal(getItem('Codingportal')));\n      setItem('Codingusername', username);\n      setItem('Codingrank', rank);\n      createRankWidget();\n    }\n\n    function MyVerticallyCenteredModal(props) {\n      return (\n        <Modal\n          {...props}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">Add Coding Profile</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n\n            <Form.Group controlId=\"formBasicEmail\" className=\" flexColumn mb-20\">\n              <Form.Label>Website Name</Form.Label>\n              <select defaultValue={portal} onChange={(e) => portal = (e.target.value)}>\n                <option value=\"Eg. GeeksforGeeks, CodeChef\" disabled>Eg. GeeksforGeeks, CodeChef</option>\n                {data.map(platform => (\n                  <option value={platform}>{platform}</option>\n                ))}\n              </select>\n            </Form.Group>\n\n            {/* <Form.Group controlId=\"formBasicEmail\" className=\"mb-20\">\n              <Form.Label>Website Name</Form.Label>\n              <Form.Control placeholder=\"Eg. GeeksforGeeks, CodeChef\" type=\"text\" defaultValue={portal} onChange={(e) => portal = (e.target.value)} />\n            </Form.Group> */}\n  \n            <Form.Group controlId=\"formBasicPassword\" className=\"mb-20\">\n              <Form.Label>Your Profile Username </Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. abc_234\" defaultValue={username} onChange={(e) => username = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword1\">\n              <Form.Label>Your Rank</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. 2512\" defaultValue={rank} onChange={(e) => rank = (e.target.value)} />\n            </Form.Group>\n  \n          </Form>\n  \n          <div className=\"share\" style={{justifyContent: 'center'}}>\n            <a onClick={() => UpdateCard() } className=\"flexAlignCenter modal-button\">Add to Profile</a>\n          </div>\n  \n        </div>\n        </Modal>\n      );\n    }\n  \n    return (\n      <>\n        <div className=\"grow1 flexColumn flexCenter flexAlignCenter add-card\" style={{height: 250}}>\n            <button onClick={() => setModalShow(true)}>\n                <AiOutlinePlusCircle style={{fontSize: 80, color: '#C0C0C0'}} />\n            </button>\n        </div>\n  \n        <MyVerticallyCenteredModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n        />\n      </>\n    );\n  }","F:\\Github\\zippy1\\src\\components\\CodingCard\\CodingCardDisplay.js",[],"F:\\Github\\zippy1\\src\\components\\CodingCard\\CodingCard.js",["195","196"],"import React, { useState } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './CodingCard.css';\nimport {BsThreeDotsVertical} from 'react-icons/bs';\nimport deleted from '../../assets/images/Bin-Icon.png';\nimport edited from '../../assets/images/Edit-Icon.png';\nimport hidden from '../../assets/images/Hide-Icon.png';\nimport hidecards from '../../assets/images/hiddeeen.png';\nimport {setItem, getItem, PortalMap} from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\nimport UpdateCodingProfile from '../UpdateModals/UpdateCodingProfile';\n\nexport default function CodingCard({name, rank, id, logo, hide}){        \n    var invisible = hide;\n    const [ bullets, setbullets ] = useState(true);\n    const [ drawer, setdrawer ] = useState(false);\n    const [option1, setoption1] = useState(false);\n    const [option2, setoption2] = useState(false);\n    const [option3, setoption3] = useState(false);\n    const [icon1, seticon1] = useState(true);\n    const [icon2, seticon2] = useState(true);\n    const [icon3, seticon3] = useState(true);\n\n    const OptionDrawer = () => {\n        setdrawer(true);\n        setbullets(false);\n    }\n    const CloseOptionDrawer = () => {\n        setdrawer(false);\n        setbullets(true);\n    }\n\n    const formatPortal = portal => {\n        return portal.split(' ').join('').toLowerCase();\n    }\n\n    const updateRankWidget = async (name) => {        \n          var website_name = formatPortal(name);\n          var website_id = PortalMap.get(website_name).id;\n          const rankWidgetData = {\n            'website_id' : website_id,\n            'rank' : rank,\n            'username': id,\n            'invisible' : invisible,\n          }\n          console.log(rankWidgetData);\n          AdminService.updateRankWidget(rankWidgetData)\n            .then(response => {\n              toast.success('Card Updated!', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n              AdminService.getUserData()\n                .then(resp => {\n                  setItem('rankWidgets', resp.data.rank_widgets);\n                  window.open('/portfolio', '_self')\n                })\n                .catch(err => console.log(err));\n            })\n            .catch(error => {\n              toast.error('Error updating!', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n            });\n        }\n\n      const unHideCard = (name) => {\n        invisible = false;\n        updateRankWidget(name);\n      }\n  \n      const HideCard = (name) => {\n        invisible = true;\n        updateRankWidget(name)\n      }\n\n    const DeleteCard = async (name) => {\n        var website_name = formatPortal(name);\n        var website_id = PortalMap.get(website_name).id;\n\n        AdminService.deleteRankWidget(website_id)\n            .then(response => {\n                toast.success('Card deleted successfully!', {\n                    position: \"top-center\",\n                    autoClose: 2000,\n                    hideProgressBar: true,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n                AdminService.getUserData()\n                    .then(resp => {\n                      setItem('rankWidgets', resp.data.rank_widgets);\n                      window.open('/portfolio', '_self')\n                    })\n                    .catch(err => console.log(err));\n                })\n            .catch(error => {\n                toast.error('Error, Cannot delete this card!', {\n                    position: \"top-center\",\n                    autoClose: 2000,\n                    hideProgressBar: true,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                })\n            });\n    }\n\n    return(\n            <div className=\"grow1 card11 flexColumn profile-card\" onMouseLeave={() => CloseOptionDrawer()}>\n                {\n                    invisible ? (\n                        <div id=\"overlay\" onClick={() => unHideCard(name)} className=\"flexColumn flexCenter flexAlignCenter\">\n                            <img src={hidecards} alt=\"hidden\" className=\"hide-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\n                            <p className=\"options-text\" style={{color: 'white'}}>Hidden</p>\n                        </div>\n                    ) : null\n                }\n                <div className=\"flexRow flexCenter\" style={{position: 'relative'}}>\n                    {logo === \"\" ? (\n                        <div className=\"flexRow flexCenter flexAlignCenter empty-logo\">\n                            <p className=\"profile-name\" style={{fontWeight: 700, color: 'white'}}>LOGO</p>\n                        </div>\n                    ) : (\n                        <img className=\"logo\" src={logo} alt=\"logo\" />\n                    )}\n                    { bullets ? (\n                        <div onClick={() => OptionDrawer()} className=\"flexRow option-drawer flexCenter flexAlignCenter iconcontainer\">\n                            <BsThreeDotsVertical className=\"portfolio-icon\" size=\"20\" />                    \n                        </div>\n                        ) : null \n                    }\n                    { drawer ? (\n                        <div className=\"flexColumn flexStart options\" style={{position: 'absolute', top: '-15%', right:'-2%'}}>\n                            {icon1 ? (<img src={deleted} alt=\"delete\" onMouseEnter={() => {setoption1(true); seticon1(false);}} onClick={() => DeleteCard(name)} className=\"delete-icon\" style={{height:30, width: 30, marginBottom: 10, marginLeft: option2 ? 50 : null || option3 ? 50 : null}} />) : null }\n                            { option1 ? (\n                                <div className=\"flexRow flexAlignCenter option delete-option\" onClick={() => DeleteCard(name)} onMouseLeave={() => {setoption1(false); seticon1(true);}} style={{ marginBottom: 10, position: 'relative', left: 40 }}>\n                                    <img src={deleted} alt=\"delete\" style={{height:30, width: 30, marginRight: 10}} />\n                                    <p className=\"options-text\">Delete</p>\n                                </div>                            \n                                ) : null\n                            }\n                            {icon2 ? (<img src={edited} alt=\"edit\" onMouseEnter={() => {setoption2(true); seticon2(false);}} className=\"edit-icon\" style={{height:30, width: 30, marginBottom: 10, marginLeft: option1 ? 50 : null || option3 ? 50 : null}} />) : null}\n                            { option2 ? (\n                                <div className=\"flexRow flexAlignCenter option edit-option\" onMouseLeave={() => {setoption2(false); seticon2(true);}} style={{ marginBottom: 10, position: 'relative', left: 40 }}>\n                                    <UpdateCodingProfile portalName={name} Rank={rank} userName={id} />\n                                    <p className=\"options-text\">Edit</p>\n                                </div>\n                                ) : null\n                            }\n                            {icon3 ? (<img src={hidden} alt=\"hide\" onMouseEnter={() => {setoption3(true); seticon3(false);}} className=\"hide-icon\" style={{height:30, width: 30, marginBottom: 10, marginLeft: option2 ? 50 : null || option1 ? 50 : null}} />) : null}\n                            { option3 ? (\n                                <div className=\"flexRow flexAlignCenter option hide-option\" onClick={() => HideCard(name)} onMouseLeave={() => {setoption3(false); seticon3(true);}} style={{ marginBottom: 10, position: 'relative', left: 40 }}>\n                                    <img src={hidden} alt=\"hide\" style={{height:30, width: 30, marginRight: 10}} />\n                                    <p className=\"options-text\">Hide</p>\n                                </div>\n                                ) : null\n                            }\n                        </div>\n                        ) : null\n                    }\n                </div>\n                <p className=\"profile-name pl-20 mb-10\"> {name === \"\" ? \"Company Name\" : name}</p>\n                <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">ID:</span> {id === \"\" ?  \"Id here\" : id }</p>\n                <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">Rank:</span> {rank === \"\" ?  \"?\" : rank  }</p>\n            </div>\n    );\n}","F:\\Github\\zippy1\\src\\AdminServices\\AdminService.js",[],"F:\\Github\\zippy1\\src\\components\\GoogleBtn.js",["197"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {useState} from 'react'\nimport { GoogleLogin } from 'react-google-login';\nimport { getItem, setItem } from '../utility/localStorageControl';\nimport Axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport PortfolioModal from '../components/modals/PortfolioModal';\nimport AdminService from '../AdminServices/AdminService';\n\nconst CLIENT_ID = '148434873376-a1k8ubdj3g3oqkh53an00v8angbj2itd.apps.googleusercontent.com';\nconst API_ENDPOINT = 'https://whispering-eyrie-04211.herokuapp.com';\n\nconst GoogleBtn = () => {\n  const [isLogin, setLogin] = useState(false);\n\n  const loginSuccess = (response) => {\n    if(response.tokenId){\n      Axios.post(`${API_ENDPOINT}/login?idTokenString=${response.tokenId}`)\n        .then(function (response) {\n          setItem('login', true);\n          setLogin(true);\n          setItem('access_token', response.data.access_token);  \n          toast.success('Login Successful!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n          AdminService.getUserData()\n            .then(resp => {\n              setItem('user_id', resp.data.user_id);\n              setItem('name', resp.data.name);\n              setItem('image', resp.data.picture_url);\n              setItem('portfolio', resp.data.resume_present);\n              setItem('projectWidgets', resp.data.personal_projects);\n              setItem('rankWidgets', resp.data.rank_widgets);\n              setItem('contestWidgets', resp.data.contest_widgets);\n            })\n            .catch(err => console.log(err));\n        })\n        .catch(function (error) {\n          console.log(error);\n          toast.error('Login Failed, Retry!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        });\n\n    }\n  }\n\n  const loginFailure = (response) => {\n    toast.error('Login Failed, Retry!', {\n      position: \"top-center\",\n      autoClose: 2000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n  }\n    return (\n    <div>\n      { isLogin ?(\n        <>\n          <PortfolioModal home={false} />\n          <ToastContainer\n            position=\"top-center\"\n            autoClose={3000}\n            hideProgressBar={true}\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover\n          />\n        </>\n        )\n        : \n        (\n          <GoogleLogin\n            clientId={ CLIENT_ID }\n            buttonText='Sign in with Google'\n            onSuccess={ loginSuccess }\n            onFailure={ loginFailure }\n            cookiePolicy={ 'single_host_origin' }\n            responseType='code,token'\n            className=\"google-button\"\n          />\n        )\n      }\n    </div>\n  );\n}\n\nexport default GoogleBtn;","F:\\Github\\zippy1\\src\\AdminServices\\dataService.js",[],"F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateCodingProfile.js",["198"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport '../../styles/HelperStyles.css'\nimport { Form, Modal } from 'react-bootstrap';\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\nimport { PortalMap, setItem, getItem } from '../../utility/localStorageControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\nimport edited from '../../assets/images/Edit-Icon.png';\n\n  export default function UpdateCodingProfile(portalName, Rank, userName) {\n    const [modalShow, setModalShow] = React.useState(false);\n    var portal1 = portalName;\n    var portal = portal1.portalName;\n    const data = ['Geeks for Geeks', 'CodeChef', 'CodeForces', 'HackerRank', 'TopCoder', 'LeetCode'];\n    var username = portal1.userName;\n    var rank = portal1.Rank;\n\n    const formatPortal = portal => {\n      return portal.split(' ').join('').toLowerCase();\n    }\n\n    const updateRankWidget = async () => {\n      if(portal.length > 0 && username.length > 0 && rank.length > 0){\n        const rankWidgetData = {\n          'rank' : getItem('Codingrank'),\n          'website_id' : getItem('website_id'),\n          'username': getItem('Codingusername'),\n        }\n        AdminService.updateRankWidget(rankWidgetData)\n          .then(response => {\n            toast.success('Card Updated!', {\n              position: \"top-center\",\n              autoClose: 2000,\n              hideProgressBar: true,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            AdminService.getUserData()\n              .then(resp => {\n                setItem('rankWidgets', resp.data.rank_widgets);\n                window.open('/portfolio', '_self')\n                setModalShow(false);\n              })\n              .catch(err => console.log(err));\n          })\n          .catch(error => {\n            toast.error('Error, Enter correct details!', {\n              position: \"top-center\",\n              autoClose: 2000,\n              hideProgressBar: true,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n          });\n      } else {\n        toast.error('Error, Fields cannot be empty!', {\n          position: \"top-center\",\n          autoClose: 2000,\n          hideProgressBar: true,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n      }\n    }\n\n    const getPortalDetails = (portal) => {\n      if(portal !== ''){\n        setItem('url', PortalMap.get(portal).url);\n        setItem('website_id', PortalMap.get(portal).id);\n        setItem('logo', PortalMap.get(portal).logo);\n      }\n    }\n\n    const UpdateCard = () => {\n      setItem('Codingportal', portal);\n      getPortalDetails(formatPortal(getItem('Codingportal')));\n      setItem('Codingusername', username);\n      setItem('Codingrank', rank);\n      updateRankWidget();\n    }\n\n    function MyVerticallyCenteredModal(props) {\n      return (\n        <Modal\n          {...props}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <div className=\"flexColumn\">\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\n            <div style={{width: 20}}></div>\n            <h2 className=\"modal-head\">Update Coding Profile</h2>\n            <button onClick={props.onHide}>\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\n            </button>\n          </div>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\" className=\" flexColumn mb-20\">\n              <Form.Label>Website Name</Form.Label>\n              <select defaultValue={portal} onChange={(e) => portal = (e.target.value)}>\n                <option value=\"Eg. GeeksforGeeks, CodeChef\" disabled>Eg. GeeksforGeeks, CodeChef</option>\n                {data.map(platform => (\n                  <option value={platform}>{platform}</option>\n                ))}\n              </select>\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword\" className=\"mb-20\">\n              <Form.Label>Your Profile Username </Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. abc_234\" defaultValue={username} onChange={(e) => username = (e.target.value)} />\n            </Form.Group>\n  \n            <Form.Group controlId=\"formBasicPassword1\">\n              <Form.Label>Your Rank</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Eg. 2512\" defaultValue={rank} onChange={(e) => rank = (e.target.value)} />\n            </Form.Group>\n  \n          </Form>\n  \n          <div className=\"share\" style={{justifyContent: 'center'}}>\n            <a onClick={() => UpdateCard() } className=\"flexAlignCenter modal-button\">Update</a>\n          </div>\n  \n        </div>\n        </Modal>\n      );\n    }\n  \n    return (\n      <>\n        <img src={edited} alt=\"edit\" onClick={() => setModalShow(true)} style={{height:30, width: 30, marginRight: 10}} />\n  \n        <MyVerticallyCenteredModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n        />\n      </>\n    );\n  }","F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateContestProfile.js",[],"F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateProject.js",[],"F:\\Github\\zippy1\\src\\utility\\reducer.js",[],["199","200"],"F:\\Github\\zippy1\\src\\utility\\StateProvider.js",[],{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":3,"column":18,"nodeType":"207","messageId":"208","endLine":3,"endColumn":25},{"ruleId":"209","severity":1,"message":"210","line":114,"column":33,"nodeType":"211","endLine":114,"endColumn":77},{"ruleId":"205","severity":1,"message":"212","line":2,"column":16,"nodeType":"207","messageId":"208","endLine":2,"endColumn":25},{"ruleId":"205","severity":1,"message":"213","line":16,"column":10,"nodeType":"207","messageId":"208","endLine":16,"endColumn":17},{"ruleId":"205","severity":1,"message":"206","line":16,"column":19,"nodeType":"207","messageId":"208","endLine":16,"endColumn":26},{"ruleId":"205","severity":1,"message":"214","line":17,"column":26,"nodeType":"207","messageId":"208","endLine":17,"endColumn":31},{"ruleId":"205","severity":1,"message":"212","line":1,"column":17,"nodeType":"207","messageId":"208","endLine":1,"endColumn":26},{"ruleId":"205","severity":1,"message":"215","line":24,"column":16,"nodeType":"207","messageId":"208","endLine":24,"endColumn":23},{"ruleId":"205","severity":1,"message":"216","line":27,"column":23,"nodeType":"207","messageId":"208","endLine":27,"endColumn":37},{"ruleId":"205","severity":1,"message":"217","line":28,"column":26,"nodeType":"207","messageId":"208","endLine":28,"endColumn":43},{"ruleId":"205","severity":1,"message":"218","line":29,"column":26,"nodeType":"207","messageId":"208","endLine":29,"endColumn":43},{"ruleId":"205","severity":1,"message":"219","line":1,"column":16,"nodeType":"207","messageId":"208","endLine":1,"endColumn":24},{"ruleId":"205","severity":1,"message":"213","line":7,"column":19,"nodeType":"207","messageId":"208","endLine":7,"endColumn":26},{"ruleId":"205","severity":1,"message":"219","line":1,"column":16,"nodeType":"207","messageId":"208","endLine":1,"endColumn":24},{"ruleId":"205","severity":1,"message":"220","line":7,"column":10,"nodeType":"207","messageId":"208","endLine":7,"endColumn":24},{"ruleId":"205","severity":1,"message":"220","line":7,"column":10,"nodeType":"207","messageId":"208","endLine":7,"endColumn":24},{"ruleId":"205","severity":1,"message":"220","line":7,"column":10,"nodeType":"207","messageId":"208","endLine":7,"endColumn":24},{"ruleId":"205","severity":1,"message":"220","line":10,"column":10,"nodeType":"207","messageId":"208","endLine":10,"endColumn":24},{"ruleId":"205","severity":1,"message":"212","line":1,"column":27,"nodeType":"207","messageId":"208","endLine":1,"endColumn":36},{"ruleId":"205","severity":1,"message":"220","line":7,"column":10,"nodeType":"207","messageId":"208","endLine":7,"endColumn":24},{"ruleId":"205","severity":1,"message":"212","line":1,"column":27,"nodeType":"207","messageId":"208","endLine":1,"endColumn":36},{"ruleId":"205","severity":1,"message":"221","line":6,"column":22,"nodeType":"207","messageId":"208","endLine":6,"endColumn":29},{"ruleId":"205","severity":1,"message":"220","line":7,"column":10,"nodeType":"207","messageId":"208","endLine":7,"endColumn":24},{"ruleId":"205","severity":1,"message":"222","line":9,"column":10,"nodeType":"207","messageId":"208","endLine":9,"endColumn":24},{"ruleId":"205","severity":1,"message":"223","line":9,"column":26,"nodeType":"207","messageId":"208","endLine":9,"endColumn":34},{"ruleId":"205","severity":1,"message":"206","line":9,"column":18,"nodeType":"207","messageId":"208","endLine":9,"endColumn":25},{"ruleId":"205","severity":1,"message":"220","line":10,"column":10,"nodeType":"207","messageId":"208","endLine":10,"endColumn":24},{"ruleId":"205","severity":1,"message":"206","line":4,"column":10,"nodeType":"207","messageId":"208","endLine":4,"endColumn":17},{"ruleId":"205","severity":1,"message":"220","line":7,"column":10,"nodeType":"207","messageId":"208","endLine":7,"endColumn":24},{"ruleId":"201","replacedBy":"224"},{"ruleId":"203","replacedBy":"225"},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],"no-unused-vars","'getItem' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","'setItem' is defined but never used.","'toast' is defined but never used.","'setname' is assigned a value but never used.","'setrankwidgets' is assigned a value but never used.","'setcontestwidgets' is assigned a value but never used.","'setprojectwidgets' is assigned a value but never used.","'useState' is defined but never used.","'ToastContainer' is defined but never used.","'setcard' is assigned a value but never used.","'DropdownButton' is defined but never used.","'Dropdown' is defined but never used.",["226"],["227"],"no-global-assign","no-unsafe-negation"]