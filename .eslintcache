[{"F:\\Github\\zippy1\\src\\index.js":"1","F:\\Github\\zippy1\\src\\reportWebVitals.js":"2","F:\\Github\\zippy1\\src\\App.js":"3","F:\\Github\\zippy1\\src\\screens\\ContactScreen\\ContactScreen.js":"4","F:\\Github\\zippy1\\src\\screens\\HomeScreen\\HomeScreen.js":"5","F:\\Github\\zippy1\\src\\screens\\AboutScreen\\AboutScreen.js":"6","F:\\Github\\zippy1\\src\\screens\\DisplayScreen\\DisplayScreen.js":"7","F:\\Github\\zippy1\\src\\screens\\PortfolioScreen\\PortfolioScreen.js":"8","F:\\Github\\zippy1\\src\\utility\\localStorageControl.js":"9","F:\\Github\\zippy1\\src\\components\\FAQCard\\FAQCard.js":"10","F:\\Github\\zippy1\\src\\components\\AchievementCard\\AchievementCard.js":"11","F:\\Github\\zippy1\\src\\components\\Header\\Header1.js":"12","F:\\Github\\zippy1\\src\\components\\FeatureCard\\FeatureCard.js":"13","F:\\Github\\zippy1\\src\\components\\Footer\\Footer.js":"14","F:\\Github\\zippy1\\src\\components\\Header\\Header.js":"15","F:\\Github\\zippy1\\src\\components\\modals\\PortfolioModal.js":"16","F:\\Github\\zippy1\\src\\components\\modals\\ShareModal.js":"17","F:\\Github\\zippy1\\src\\components\\modals\\ContestProfileModal.js":"18","F:\\Github\\zippy1\\src\\components\\modals\\ProjectModal.js":"19","F:\\Github\\zippy1\\src\\components\\ContestCard\\ContestCard.js":"20","F:\\Github\\zippy1\\src\\components\\ProjectCard\\ProjectCard.js":"21","F:\\Github\\zippy1\\src\\components\\ProjectCard\\ProjectCardDisplay.js":"22","F:\\Github\\zippy1\\src\\components\\ContestCard\\ContestCardDisplay.js":"23","F:\\Github\\zippy1\\src\\components\\modals\\CodingProfileModal.js":"24","F:\\Github\\zippy1\\src\\components\\CodingCard\\CodingCardDisplay.js":"25","F:\\Github\\zippy1\\src\\components\\CodingCard\\CodingCard.js":"26","F:\\Github\\zippy1\\src\\AdminServices\\AdminService.js":"27","F:\\Github\\zippy1\\src\\components\\GoogleBtn.js":"28","F:\\Github\\zippy1\\src\\AdminServices\\dataService.js":"29","F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateCodingProfile.js":"30","F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateContestProfile.js":"31","F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateProject.js":"32","F:\\Github\\zippy1\\src\\screens\\PolicyScreen\\PolicyScreen.js":"33","F:\\Github\\zippy1\\src\\screens\\TermsScreen\\TermsScreen.js":"34","F:\\Github\\zippy1\\src\\components\\modals\\SendViaEmail.js":"35","F:\\Github\\zippy1\\src\\components\\modals\\AttachResume.js":"36","F:\\Github\\zippy1\\src\\components\\MailPreview\\MailPreview.js":"37","F:\\Github\\zippy1\\src\\components\\modals\\SentHistory.js":"38","F:\\Github\\zippy1\\src\\AdminServices\\baseUrl.js":"39","F:\\Github\\zippy1\\src\\store.js":"40","F:\\Github\\zippy1\\src\\reducers\\index.js":"41","F:\\Github\\zippy1\\src\\reducers\\userReducer.js":"42","F:\\Github\\zippy1\\src\\utility\\userContext.js":"43","F:\\Github\\zippy1\\src\\screens\\HomeScreen\\Hello.js":"44"},{"size":1939,"mtime":1614939752423,"results":"45","hashOfConfig":"46"},{"size":362,"mtime":1610430732000,"results":"47","hashOfConfig":"48"},{"size":364,"mtime":1614939751594,"results":"49","hashOfConfig":"46"},{"size":4819,"mtime":1611326115981,"results":"50","hashOfConfig":"46"},{"size":7140,"mtime":1614939752672,"results":"51","hashOfConfig":"46"},{"size":2386,"mtime":1611324498222,"results":"52","hashOfConfig":"46"},{"size":5079,"mtime":1614939752570,"results":"53","hashOfConfig":"46"},{"size":9667,"mtime":1614939752716,"results":"54","hashOfConfig":"46"},{"size":3041,"mtime":1614903040546,"results":"55","hashOfConfig":"46"},{"size":1298,"mtime":1610498564435,"results":"56","hashOfConfig":"46"},{"size":635,"mtime":1611680678327,"results":"57","hashOfConfig":"46"},{"size":3175,"mtime":1614939751755,"results":"58","hashOfConfig":"46"},{"size":572,"mtime":1611503969703,"results":"59","hashOfConfig":"46"},{"size":759,"mtime":1611351261128,"results":"60","hashOfConfig":"46"},{"size":1206,"mtime":1614939751724,"results":"61","hashOfConfig":"46"},{"size":6954,"mtime":1614940595257,"results":"62","hashOfConfig":"46"},{"size":2651,"mtime":1614939752380,"results":"63","hashOfConfig":"46"},{"size":6155,"mtime":1614939752126,"results":"64","hashOfConfig":"46"},{"size":4655,"mtime":1614939752222,"results":"65","hashOfConfig":"46"},{"size":11516,"mtime":1614939751700,"results":"66","hashOfConfig":"46"},{"size":9760,"mtime":1614939751846,"results":"67","hashOfConfig":"46"},{"size":893,"mtime":1610500837174,"results":"68","hashOfConfig":"46"},{"size":1323,"mtime":1610500821083,"results":"69","hashOfConfig":"46"},{"size":6631,"mtime":1614939752077,"results":"70","hashOfConfig":"46"},{"size":1130,"mtime":1610500809531,"results":"71","hashOfConfig":"46"},{"size":11712,"mtime":1614939751670,"results":"72","hashOfConfig":"46"},{"size":1952,"mtime":1614072226931,"results":"73","hashOfConfig":"46"},{"size":3895,"mtime":1614940243955,"results":"74","hashOfConfig":"46"},{"size":2303,"mtime":1614073198287,"results":"75","hashOfConfig":"46"},{"size":5952,"mtime":1614939751893,"results":"76","hashOfConfig":"46"},{"size":6238,"mtime":1614939751944,"results":"77","hashOfConfig":"46"},{"size":4757,"mtime":1614939751991,"results":"78","hashOfConfig":"46"},{"size":9007,"mtime":1611353178319,"results":"79","hashOfConfig":"46"},{"size":9010,"mtime":1611356514983,"results":"80","hashOfConfig":"46"},{"size":4993,"mtime":1614939752279,"results":"81","hashOfConfig":"46"},{"size":4083,"mtime":1614939752042,"results":"82","hashOfConfig":"46"},{"size":2380,"mtime":1614939751786,"results":"83","hashOfConfig":"46"},{"size":4348,"mtime":1614940725406,"results":"84","hashOfConfig":"46"},{"size":165,"mtime":1613930185166,"results":"85","hashOfConfig":"46"},{"size":428,"mtime":1614751501812,"results":"86","hashOfConfig":"46"},{"size":141,"mtime":1614757042309,"results":"87","hashOfConfig":"46"},{"size":1857,"mtime":1614757027927,"results":"88","hashOfConfig":"46"},{"size":956,"mtime":1614940647177,"results":"89","hashOfConfig":"46"},{"size":409,"mtime":1614939752612,"results":"90","hashOfConfig":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"94"},"17xg5nk",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zkvw33",{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"94"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"94"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"94"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"94"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"94"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"94"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"94"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"94"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"94"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"94"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"94"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"94"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"94"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"94"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"94"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"94"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"F:\\Github\\zippy1\\src\\index.js",["202","203","204","205","206"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport HomeScreen from './screens/HomeScreen/HomeScreen';\r\nimport PortfolioScreen from './screens/PortfolioScreen/PortfolioScreen';\r\nimport AboutScreen from './screens/AboutScreen/AboutScreen';\r\nimport ContactScreen from './screens/ContactScreen/ContactScreen';\r\nimport DisplayScreen from './screens/DisplayScreen/DisplayScreen';\r\nimport { Provider } from 'react-redux';\r\nimport PolicyScreen from './screens/PolicyScreen/PolicyScreen';\r\nimport TermsScreen from './screens/TermsScreen/TermsScreen';\r\n// import { StateProvider } from './utility/StateProvider';\r\n// import reducer, { initialState } from './utility/reducer';\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { logger } from 'redux-logger'\r\nimport { UserProvider } from './utility/userContext';\r\n// import store from \"./store\";\r\n// const store = createStore(\r\n//   applyMiddleware(thunk, logger)\r\n// )\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <Provider \r\n      store={store}\r\n    > */}\r\n    <UserProvider>\r\n      <Router>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={App} />\r\n            <Route exact path=\"/home\" component={HomeScreen} /> \r\n            <Route exact path=\"/portfolio\" component={PortfolioScreen} /> \r\n            <Route exact path=\"/d\" component={DisplayScreen} /> \r\n            <Route exact path=\"/about\" component={AboutScreen} /> \r\n            <Route exact path=\"/contact\" component={ContactScreen} />\r\n            <Route exact path=\"/policy\" component={PolicyScreen} />\r\n            <Route exact path=\"/terms\" component={TermsScreen} />\r\n        </Switch>            \r\n      </Router>\r\n    </UserProvider>\r\n    {/* </Provider> */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);",["207","208"],"F:\\Github\\zippy1\\src\\reportWebVitals.js",[],"F:\\Github\\zippy1\\src\\App.js",["209","210","211"],"import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport HomeScreen from './screens/HomeScreen/HomeScreen';\r\nimport Hello from './screens/HomeScreen/Hello';\r\nimport { UserProvider } from './utility/userContext';\r\n\r\nfunction App() {  \r\n  return (      \r\n      <div className=\"App\">\r\n        <HomeScreen />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\Github\\zippy1\\src\\screens\\ContactScreen\\ContactScreen.js",["212"],"import React, { useState } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './ContactScreen.css';\nimport Footer from '../../components/Footer/Footer';\nimport contactimg from '../../assets/images/Contactimg.png';\nimport {Form} from 'react-bootstrap';\nimport Header1 from '../../components/Header/Header1';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AdminService from '../../AdminServices/AdminService';\nimport { Animated } from 'react-animated-css';\n\nfunction ContactScreen() {\n    const [name, setName] = useState('');\n    const [subject, setSubject] = useState('');\n    const [message, setMessage] = useState('');\n\n    const SendMail = async () => {\n        if(name.length > 0 && subject.length > 0 && message.length > 0){\n            const mailContent = {\n                'subject': subject,\n                'text': message\n            }\n            AdminService.sendMail(mailContent)\n                .then(resp => {\n                    toast.success('Mail Sent!', {\n                        position: \"top-center\",\n                        autoClose: 2000,\n                        hideProgressBar: true,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        progress: undefined,\n                    });\n                    window.open('/contact', '_self')\n                })\n                .catch(err => {\n                    toast.error('Invalid entries!', {\n                        position: \"top-center\",\n                        autoClose: 2000,\n                        hideProgressBar: true,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        progress: undefined,\n                    });\n                })\n        } else{\n            toast.error('Error, Fields cannot be empty!', {\n                position: \"top-center\",\n                autoClose: 2000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n        }\n\n    }\n  return (\n    <div className=\"contact-screen\">\n        <Header1 />\n        <div id=\"contact-section\">\n          <div className=\"mw1100 flexColumn\">\n            <Animated isVisible={true} animationIn=\"slideInUp\">\n                <div className=\"flexColumn flexAlignCenter flexCenter mh-20 contact-header\">\n                    <img src={contactimg} alt=\"\" style={{width: '90%'}} />\n                </div>\n            </Animated>\n            <ToastContainer\n                position=\"top-center\"\n                autoClose={3000}\n                hideProgressBar={true}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n            />\n            <Animated isVisible={true} animationIn=\"slideInUp\">\n                <div className=\"flexColumn contact-section\">\n                    <h1 className=\"contact-heading\">Have anything to ask?</h1>\n                    <div className=\"flexColumn flexAround flexAlignCenter mv-40\">\n                        <Form style={{width: '75%'}}>\n                            <Form.Group controlId=\"formBasicEmail\" className=\"mb-20\">\n                                <Form.Label>Name*</Form.Label>\n                                <Form.Control type=\"name\" defaultValue={name} onChange={(e) => setName(e.target.value)} />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"formBasicPassword2\" className=\"mb-20\">\n                                <Form.Label>Subject*</Form.Label>\n                                <Form.Control type=\"text\" defaultValue={subject} onChange={(e) => setSubject(e.target.value)} />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"formBasicPassword3\">\n                                <Form.Label>Message*</Form.Label>\n                                <Form.Control as=\"textarea\" rows={5} defaultValue={message} onChange={(e) => setMessage(e.target.value)} />\n                            </Form.Group>\n\n                            <div className=\"share\" onClick={() => SendMail()} style={{cursor: 'pointer', justifyContent: 'flex-start', paddingLeft: 0, paddingTop: 30}}>\n                                <a className=\"flexAlignCenter modal-button\">Send</a>\n                            </div>\n                        </Form>\n                    </div>\n                </div>\n            </Animated>\n          </div>\n      </div>\n        <Footer />\n    </div>\n  );\n}\n\nexport default ContactScreen;\n","F:\\Github\\zippy1\\src\\screens\\HomeScreen\\HomeScreen.js",["213"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {useEffect, useState} from 'react';\r\nimport '../../styles/HelperStyles.css';\r\nimport './HomeScreen.css';\r\nimport Header from '../../components/Header/Header';\r\nimport introimg from '../../assets/images/handshake-colour.png';\r\nimport whytabber from '../../assets/images/drawkit-content-man-colour.png'\r\nimport {BiCheckCircle} from 'react-icons/bi';\r\nimport FeatureCard from '../../components/FeatureCard/FeatureCard';\r\nimport AchievementCard from '../../components/AchievementCard/AchievementCard';\r\nimport FAQCard from '../../components/FAQCard/FAQCard';\r\nimport Footer from '../../components/Footer/Footer';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport PortfolioModal from '../../components/modals/PortfolioModal';\r\nimport { Animated } from 'react-animated-css';\r\nimport Axios from 'axios';\r\nimport users from '../../assets/images/users.png';\r\nimport links from '../../assets/images/links.png';\r\nimport review from '../../assets/images/Review.png';\r\nimport onpoint from '../../assets/images/OnPoint.png';\r\nimport modify from '../../assets/images/Modifiable.png';\r\nimport nolimit from '../../assets/images/NoLimit.png';\r\nimport projects from '../../assets/images/Projects.png';\r\nimport achievements from '../../assets/images/Achievements.png';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport {API_ENDPOINT} from '../../AdminServices/baseUrl';\r\n\r\nfunction HomeScreen() {\r\n  const [QnA, setQnA] = useState([]);\r\n  const [Achievements, setAments] = useState([]);\r\n  const [Features, setFeatures] = useState([]);\r\n\r\n  const getData = async () =>{\r\n    Axios.get(`${API_ENDPOINT}/fe/get?page_type=Home&key=QnA`)\r\n      .then(resp => {\r\n        setQnA(resp.data.value);\r\n      })\r\n    .catch(err => toast.error(\"Some Error Occured.\", {\r\n      position: \"top-center\",\r\n      autoClose: 2000,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    }))\r\n    Axios.get(`${API_ENDPOINT}/fe/get?page_type=Home&key=Achievements`)\r\n      .then(resp => {\r\n        setAments(resp.data.value)\r\n      }).catch(err => toast.error(\"Some Error Occured.\", {\r\n        position: \"top-center\",\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      }))\r\n    Axios.get(`${API_ENDPOINT}/fe/get?page_type=Home&key=Features`)\r\n      .then(resp => {\r\n        setFeatures(resp.data.value)\r\n      }).catch(err => toast.error(\"Some Error Occured.\", {\r\n        position: \"top-center\",\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      }))\r\n  }\r\n\r\n  window.onload = () => {\r\n    getData();\r\n  }\r\n  \r\n  return (\r\n    <div className=\"#home-screen\">\r\n      <Header />\r\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\r\n        <div id=\"intro-section\">\r\n          <div className=\"mw1100 mobile-column flexRow flexAround flexAlignCenter\">\r\n            <img className=\"intro-img\" src={introimg} alt=\"intro\" />\r\n            <div className=\"mw600 mobile-center flexColumn\">\r\n                <h1 className=\"intro-text\">\r\n                    Improve your chances of getting hired, just Tab it for \r\n                    <span style={{color: 'rgba(0,229,216,1)'}}> FREE</span>\r\n                </h1>\r\n                <PortfolioModal home={true} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Animated>\r\n      <ToastContainer\r\n        position=\"top-center\"\r\n        autoClose={3000}\r\n        hideProgressBar={true}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\r\n      <div id=\"why-tabber\">\r\n        <div className=\"mw1100 flexRow mobile-column flexAround flexAlignCenter\">\r\n          <div className=\"mw600 flexColumn mv-40\">\r\n              <h1 className=\"whytabber-heading\">Why <span style={{color: '#077A73'}}>tabber?</span></h1>\r\n              <p className=\"whytabber-text\">Are you tired of sending <strong>each and every link</strong> to recruiters taking the hassle of mentioning each and every <strong>rank</strong>? Say no more! because Tabber is here to make this a possibility.</p>\r\n              <p className=\"whytabber-features mt-50 mb-20\">The features which are covered in this</p>\r\n              <p className=\"ml-20 whytabber-point flexAlignCenter\"><BiCheckCircle style={{color: '#077A73', marginRight: 10}} />Add all your portfolio profiles.</p>\r\n              <p className=\"ml-20 whytabber-point flexAlignCenter\"><BiCheckCircle style={{color: '#077A73', marginRight: 10}} />Edit your resume live on the go.</p>\r\n              <p className=\"ml-20 pb-100 whytabber-point flexAlignCenter\"><BiCheckCircle style={{color: '#077A73', marginRight: 10}} />Get a single shareable link.</p>\r\n          </div>\r\n          <img className=\"intro-img\" src={whytabber} alt=\"why-tabber\" />\r\n        </div>\r\n      </div>\r\n      </Animated>\r\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\r\n      <div id=\"tabberfeatures\">\r\n        <div className=\"mw1100 pl-40 flexColumn\">\r\n          <h1 className=\"tabberfeatures-heading\">What we got you</h1>\r\n          <div className=\"flexRow flexBetween\" style={{flexWrap: 'wrap'}}>\r\n              {Features.map(feature => (\r\n                  <FeatureCard key={feature.sr} name={feature.name} desc={feature.desc} \r\n                    img={feature.sr === 1 ? review :\r\n                      feature.sr === 2 ? onpoint : \r\n                      feature.sr === 3 ? modify : \r\n                      feature.sr === 4 ? nolimit :\r\n                      feature.sr === 5 ? projects : achievements} \r\n                  />\r\n              ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      </Animated>\r\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\r\n      <div id=\"achievements\">\r\n        <div className=\"mw1100 pl-40 flexColumn\">\r\n          <h1 className=\"achievements-heading\">Achievements we have made, so far</h1>\r\n          <div className=\"flexRow flexCenter\" style={{flexWrap: 'wrap'}}>\r\n              {Achievements.map(achievement => (\r\n                  <AchievementCard key={achievement.sr} name={achievement.name} desc={achievement.desc} image={achievement.sr === 1 ? users : links} />\r\n              ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      </Animated>\r\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\r\n      <div id=\"faq\">\r\n        <div className=\"mw1100 ph-40 flexColumn\">\r\n          <h1 className=\"tabberfeatures-heading\">Frequently Asked Questions</h1>\r\n          {QnA.map(ques => (\r\n              <FAQCard key={ques.sr} ques={ques.ques} ans={ques.ans} />\r\n          ))}\r\n        </div>\r\n       </div>\r\n      </Animated>\r\n      <Animated animationIn=\"slideInUp\" isVisible={true}>\r\n        <Footer />\r\n      </Animated>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeScreen;\r\n","F:\\Github\\zippy1\\src\\screens\\AboutScreen\\AboutScreen.js",[],"F:\\Github\\zippy1\\src\\screens\\DisplayScreen\\DisplayScreen.js",[],"F:\\Github\\zippy1\\src\\screens\\PortfolioScreen\\PortfolioScreen.js",["214","215"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport '../../styles/HelperStyles.css';\r\nimport './PortfolioScreen.css';\r\nimport Footer from '../../components/Footer/Footer';\r\nimport CodingCard from '../../components/CodingCard/CodingCard';\r\nimport ContestCard from '../../components/ContestCard/ContestCard';\r\nimport ProjectCard from '../../components/ProjectCard/ProjectCard';\r\nimport CodingProfileModal from '../../components/modals/CodingProfileModal';\r\nimport ContestProfileModal from '../../components/modals/ContestProfileModal';\r\nimport ProjectModal from '../../components/modals/ProjectModal';\r\nimport ShareModal from '../../components/modals/ShareModal';\r\nimport SentHistoryModal from '../../components/modals/SentHistory';\r\nimport { AiOutlineCheck, AiOutlineEdit, AiOutlinePlusCircle} from 'react-icons/ai';\r\nimport $ from 'jquery';\r\nimport Header1 from '../../components/Header/Header1';\r\nimport { getItem, setItem, ReversePortalMap } from '../../utility/localStorageControl';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {isMobile} from 'react-device-detect';\r\nimport AttachResumeModal from '../../components/modals/AttachResume';\r\nimport SendViaEmail from '../../components/modals/SendViaEmail';\r\nimport { ProgrammerContext } from '../../utility/userContext';\r\nconst API_KEY = 'AFjzy7b0VSvCEJhKDtcQ6z';\r\nconst processAPI = 'https://cdn.filestackcontent.com';\r\n\r\nfunction PortfolioScreen() {\r\n  const [user, setUser] = useContext(ProgrammerContext);\r\n  var title = user.portfolio.title;\r\n  var desc = user.portfolio.description;\r\n  const [edit1, setedit] = useState(true);\r\n  const [edit2, setedit2] = useState(true);\r\n\r\n  const Edit1 = () => {\r\n    $(\".title\").prop(\"readonly\", false);\r\n    setedit(false);\r\n  } \r\n  const Edit2 = () => {\r\n    $(\".desc\").prop(\"readonly\", false);\r\n    setedit2(false);\r\n  } \r\n  const Save1 = () => {\r\n    $(\".title\").prop(\"readonly\", true);\r\n    setedit(true);\r\n    setItem('titlePortfolio', title);\r\n    UpdatePortfolio();\r\n  } \r\n  const Save2 = () => {\r\n    $(\".desc\").prop(\"readonly\", true);\r\n    setedit2(true);\r\n    setItem('descPortfolio', desc);\r\n    UpdatePortfolio();\r\n  } \r\n  const UpdatePortfolio = async () =>{\r\n    if(desc.length > 0 && title.length > 0){\r\n      const UpdatePortfolioData = {\r\n        'title': title,\r\n        'description': desc,\r\n      }\r\n      AdminService.updatePortfolio(UpdatePortfolioData)\r\n        .then(resp => {\r\n          toast.success('Details Updated!', {\r\n            position: \"top-center\",\r\n            autoClose: 2000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n          AdminService.getUserData()\r\n            .then(resp => {\r\n              setUser(prevUser => ({...prevUser,\r\n                portfolio: resp.data.portfolio,\r\n              }));\r\n            })\r\n            .catch(err => toast.error(\"Some Error Occured.\", {\r\n              position: \"top-center\",\r\n              autoClose: 2000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            }));\r\n        })\r\n        .catch(err => {\r\n          toast.error('Error, Please retry!', {\r\n            position: \"top-center\",\r\n            autoClose: 2000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n        });\r\n    } else {\r\n      toast.error('Error, Fields cannot be empty!', {\r\n        position: \"top-center\",\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"#portfolio-screen\">      \r\n      <ToastContainer\r\n        position=\"top-center\"\r\n        autoClose={3000}\r\n        hideProgressBar={true}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n      <Header1 />\r\n      <div className=\"flexRow mw1100 flexBetween\" style={{}}>\r\n        <SendViaEmail />\r\n        <SentHistoryModal />\r\n        <ShareModal id={getItem('user_id')} />\r\n      </div>\r\n      <div className=\"mw1100\">\r\n        <div className=\"p-40 flexColumn portfolio-section\">\r\n          <div className=\"flexColumn\">\r\n            <div className=\"flexRow flexCenter flexAlignCenter\">\r\n              <input type=\"text\" style={{backgroundColor: edit1 ? 'inherit' : 'white', width: '75%'}} autoComplete=\"off\" autoCorrect=\"off\" autoCapitalize=\"off\" spellCheck=\"false\" className=\"title\" defaultValue={title} onChange={(event) => title = event.target.value} placeholder=\"Portfolio Title\" readOnly />\r\n              <div className=\"flexRow flexCenter flexAlignCenter iconcontainer1\" style={{left: -15, top: -15}}>\r\n                {\r\n                  edit1 ? <AiOutlineEdit className=\"portfolio-icon\" onClick={()=>Edit1()} style={{cursor: 'pointer'}} />\r\n                  : <AiOutlineCheck className=\"portfolio-icon\" onClick={()=>Save1()} style={{cursor: 'pointer'}} />\r\n                }\r\n              </div>\r\n            </div>\r\n            <hr style={{color : '#717070', width: '80%', margin: 'auto', marginTop: 10}} />\r\n            <div className=\"flexColumn info-sec\">\r\n              <p className=\"name mb-20 pl-20\">Hello! I am <strong>{user.name}</strong></p>\r\n              <div className=\"flexRow\">\r\n                <textarea style={{backgroundColor: edit2 ? 'inherit' : 'white'}} autocomplete=\"off\" autoCorrect=\"off\" autoCapitalize=\"off\" spellCheck=\"false\" rows=\"5\" className=\"desc\" defaultValue={desc} onChange={(event) => desc = event.target.value} readOnly placeholder=\"Enter your College and profile description here\" />\r\n                <div className=\"flexRow flexCenter flexAlignCenter iconcontainer1\" style={{left: -15, top: -15}}>\r\n                {\r\n                  edit2 ?<AiOutlineEdit className=\"portfolio-icon\" onClick={()=>Edit2()} style={{cursor: 'pointer'}} />\r\n                  : <AiOutlineCheck className=\"portfolio-icon\" onClick={()=>Save2()} style={{cursor: 'pointer'}} />\r\n                }\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"flexColumn mv-20\">\r\n              <p className=\"card-heading mb-20\">Resume</p>\r\n              <AttachResumeModal />\r\n            </div>\r\n            <div className=\"coding-profile mv-20\">\r\n              <p className=\"card-heading mb-20\">Coding Profile</p>\r\n              <div className=\"flexRow flexWrap\">\r\n                { user.rank_widgets !== [''] ?\r\n                    (\r\n                      user.rank_widgets.map(profile => (\r\n                        <CodingCard name={ReversePortalMap.get(profile.website_id.toString()).name} id={profile.website_username} rank={profile.rank} logo={ReversePortalMap.get(profile.website_id.toString()).logo} hide={profile.invisible} />\r\n                      ))\r\n                    ) : null\r\n                }\r\n                {\r\n                  user.rank_widgets.length < 3 ? (\r\n                    <CodingProfileModal />\r\n                  ) : null\r\n                }\r\n              </div>\r\n            </div>\r\n            <div className=\"coding-profile mv-20\">\r\n              <p className=\"card-heading mb-20\">Contests Won</p>\r\n              <div className=\"flexRow flexWrap\">\r\n                { user.contest_widgets !== [''] ?\r\n                    (\r\n                      user.contest_widgets.map(profile => (\r\n                        <ContestCard card_id={profile.id} name={ReversePortalMap.get(profile.website_id.toString()).name} id={profile.website_username} rank={profile.rank} logo={ReversePortalMap.get(profile.website_id.toString()).logo} contest={profile.contest_name} hide={profile.invisible} />\r\n                      ))\r\n                    ) : null\r\n                }\r\n                {\r\n                  user.contest_widgets.length < 3 ? (\r\n                    <ContestProfileModal />\r\n                  ) : null\r\n                }\r\n              </div>\r\n            </div>\r\n            <div className=\"coding-profile mv-20\">\r\n              <p className=\"card-heading mb-20\">Personal Projects</p>\r\n              <div className=\"flexRow flexWrap\">\r\n                { user.project_widgets !== [''] ?\r\n                    (\r\n                      user.project_widgets.map(project => (\r\n                        <ProjectCard name={project.title} url={project.link} img={`${processAPI}/${API_KEY}/urlscreenshot=agent:${isMobile ? 'mobile' : 'desktop'}/${project.link}`} id={project.id} hide={project.invisible} />\r\n                      ))\r\n                    ) : null\r\n                }   \r\n                {\r\n                  user.project_widgets.length < 3 ? ( \r\n                    <ProjectModal />\r\n                  ) : null\r\n                }             \r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"flexRow flexCenter end-section ph-20 flexAlignCenter mv-40\">\r\n            <hr style={{width: '35%', color: 'rgba(154,154,154,1)'}} />\r\n            <p className=\"end-text\">Thats all folks</p>\r\n            <hr style={{width: '35%', color: 'rgba(154,154,154,1)'}} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PortfolioScreen;\r\n","F:\\Github\\zippy1\\src\\utility\\localStorageControl.js",[],"F:\\Github\\zippy1\\src\\components\\FAQCard\\FAQCard.js",[],"F:\\Github\\zippy1\\src\\components\\AchievementCard\\AchievementCard.js",[],"F:\\Github\\zippy1\\src\\components\\Header\\Header1.js",["216"],"import {React, useState, useContext} from 'react';\r\nimport './Header.css';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport splashlogo from '../../assets/images/logo.png';\r\nimport GoogleBtn from '../GoogleBtn';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { getItem, setItem } from '../../utility/localStorageControl';\r\nimport { toast } from 'react-toastify';\r\nimport {ProgrammerContext} from '../../utility/userContext';\r\n\r\nfunction Header1(){\r\n    const [user, setUser] = useContext(ProgrammerContext);  \r\n\r\n    const SignOut = () => {\r\n        toast.success('Successfully Logged Out!', {\r\n            position: \"top-center\",\r\n            autoClose: 2000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        });\r\n        setUser(prevUser => ({...prevUser,\r\n            login: false,\r\n            token: null,\r\n            user_id: null,\r\n            name: '',\r\n            email: '',\r\n            image: '',\r\n            resume_present: false,\r\n            portfolio: [],\r\n            rank_widgets: [],\r\n            contest_widgets: [],\r\n            project_widgets: [],\r\n            resumeLink: '',\r\n          }));\r\n        setTimeout(() => {\r\n            window.open('/home', '_self');\r\n        }, [500])\r\n    }\r\n\r\n    const [dropdown, setdropdown] = useState(false);\r\n    return (\r\n        <header className=\"header\">\r\n            <Navbar sticky=\"top\" expand=\"lg\" className=\"flexRow flexAlignCenter navbar\">\r\n                <Navbar.Brand className=\"flexColumn flexAlignCenter\" href=\"/home\">\r\n                    <img src={splashlogo} width=\"150\" height=\"30\" className=\"d-inline-block mr-80\" alt=\"logo\" />\r\n                </Navbar.Brand>\r\n                <div className=\"w100 flexRow flexAlignCenter flexBetween\">\r\n                    <Nav className=\"mr-auto flexRow\">\r\n                        <Nav.Link className=\"grow2\" href=\"/about\">About</Nav.Link>\r\n                        <Nav.Link className=\"grow2\" href=\"/home#faq\">FAQ</Nav.Link>\r\n                        <Nav.Link className=\"grow2\" href=\"/contact\">Contact</Nav.Link>\r\n                    </Nav>\r\n                    {user.login ? (\r\n                        dropdown ? (\r\n                            <button onClick={() => SignOut()} \r\n                                className=\"edit-your-portfolio grow1\" style={{fontWeight: 500}}\r\n                            >\r\n                                Sign Out\r\n                            </button>\r\n                        ) : (                            \r\n                            <div className=\"avatar\" style={{cursor: 'pointer'}} onClick={() => setdropdown(true)}>\r\n                                <Avatar alt=\"img\" src={getItem('image')} />\r\n                                <p className=\"avatar-name\">Welcome<br/><p className=\"name\">{getItem('name')}</p></p>\r\n                            </div>\r\n                        )\r\n                    ) : (\r\n                        <GoogleBtn />\r\n                    )}\r\n                </div>\r\n            </Navbar>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header1;","F:\\Github\\zippy1\\src\\components\\FeatureCard\\FeatureCard.js",[],"F:\\Github\\zippy1\\src\\components\\Footer\\Footer.js",[],"F:\\Github\\zippy1\\src\\components\\Header\\Header.js",["217","218"],"import {React, useState} from 'react';\r\nimport './Header.css';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport splashlogo from '../../assets/images/logo.png';\r\nimport GoogleBtn from '../GoogleBtn';\r\nimport Hello from '../../screens/HomeScreen/Hello';\r\n\r\nfunction Header(){\r\n    return (\r\n        <header className=\"header\">\r\n            <Navbar sticky=\"top\" expand=\"lg\" className=\"flexRow flexAlignCenter navbar\">\r\n                <Navbar.Brand className=\"flexColumn flexAlignCenter\" href=\"/home\">\r\n                    <img src={splashlogo} width=\"150\" height=\"30\" className=\"d-inline-block mr-80\" alt=\"logo\" />\r\n                </Navbar.Brand>\r\n                <div className=\"w100 flexRow flexAlignCenter flexBetween\">\r\n                    <Nav className=\"mr-auto flexRow\">\r\n                        <Nav.Link className=\"grow2\" href=\"/about\">About</Nav.Link>\r\n                        <Nav.Link className=\"grow2\" href=\"/home#faq\">FAQ</Nav.Link>\r\n                        <Nav.Link className=\"grow2\" href=\"/contact\">Contact</Nav.Link>\r\n                    </Nav>\r\n                    <GoogleBtn />\r\n                </div>\r\n            </Navbar>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","F:\\Github\\zippy1\\src\\components\\modals\\PortfolioModal.js",[],"F:\\Github\\zippy1\\src\\components\\modals\\ShareModal.js",["219","220","221"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {useState, useRef, useContext} from 'react';\r\nimport '../../styles/HelperStyles.css'\r\nimport { Modal, Form } from 'react-bootstrap';\r\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport { ProgrammerContext } from '../../utility/userContext';\r\n\r\nexport default function ShareModal({id}) {\r\n  const [user, setUser] = useContext(ProgrammerContext);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const url = `http://localhost:3000/d?id=${user.user_id}`;\r\n  const textAreaRef = useRef(null);\r\n\r\n  const CopyText = (e) => {\r\n    textAreaRef.current.select();\r\n    document.execCommand('copy');\r\n    toast.success('Link Copied!', {\r\n      position: \"top-center\",\r\n      autoClose: 2000,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    });\r\n    setModalShow(false);\r\n  }\r\n\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <div className=\"flexColumn\">\r\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\r\n            <div style={{width: 20}}></div>\r\n            <h2 className=\"modal-head\">Share Portfolio</h2>\r\n            <button onClick={props.onHide}>\r\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\r\n            </button>\r\n          </div>\r\n          <Form>\r\n            <Form.Group controlId=\"formBasicEmail\" className=\"flexColumn mb-20\">\r\n              <Form.Label>Just copy and share this simple link !</Form.Label>\r\n              <input type=\"text\" class=\"form-control\" ref={textAreaRef} defaultValue={url} placeholder=\"https://tabber.com/123\" readOnly />\r\n            </Form.Group>\r\n          </Form>\r\n  \r\n          <div className=\"share\" style={{justifyContent: 'center'}}>\r\n            <a onClick={(e) => CopyText(e)} className=\"flexAlignCenter modal-button\">Copy Link</a>\r\n          </div>\r\n  \r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"share\">\r\n        <button className=\"flexAlignCenter share-button\" style={{outline: 'none'}} onClick={() => {setModalShow(true);}}>\r\n          Share        \r\n        </button>\r\n      </div>\r\n\r\n      <MyVerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","F:\\Github\\zippy1\\src\\components\\modals\\ContestProfileModal.js",["222"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useContext } from 'react';\r\nimport '../../styles/HelperStyles.css'\r\nimport { Modal, Form } from 'react-bootstrap';\r\nimport {AiOutlineCloseCircle, AiOutlinePlusCircle} from 'react-icons/ai';\r\nimport { PortalMap, setItem, getItem } from '../../utility/localStorageControl';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport { ProgrammerContext } from '../../utility/userContext';\r\n\r\nexport default function ContestProfileModal() {\r\n  const [user, setUser] = useContext(ProgrammerContext);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  var portal = \"Eg. GeeksforGeeks, CodeChef\";\r\n  const data = ['Geeks for Geeks', 'CodeChef', 'CodeForces', 'HackerRank', 'TopCoder', 'LeetCode'];\r\n  var contest = '';\r\n  var rank = '';\r\n  var username = '';\r\n\r\n  const formatPortal = portal => {\r\n    return portal.split(' ').join('').toLowerCase();\r\n  }\r\n\r\n  const createWidget = async () => {\r\n    if(portal && username && rank && contest){\r\n      const contestWidgetData = {\r\n        'rank' : getItem('Contestrank'),\r\n        'website_id' : getItem('website_id'),\r\n        'username' : getItem('Contestusername'),\r\n        'contest_name': getItem('Contestname')\r\n      }\r\n      AdminService.createContestWidget(contestWidgetData)\r\n        .then(response => {\r\n          toast.success('Details Entered!', {\r\n            position: \"top-center\",\r\n            autoClose: 2000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n          AdminService.getUserData()\r\n            .then(resp => {\r\n              setUser(prevUser => ({...prevUser,\r\n                contest_widgets: resp.data.contest_widgets,\r\n              }));\r\n              setModalShow(false);\r\n            })\r\n            .catch(err => toast.error(\"Some Error Occured.\", {\r\n              position: \"top-center\",\r\n              autoClose: 2000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            }));\r\n        })\r\n        .catch(error => {\r\n          toast.error('Error, Enter correct details!', {\r\n            position: \"top-center\",\r\n            autoClose: 2000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n        });\r\n    } else {\r\n      toast.error('Error, Fields cannot be empty!', {\r\n        position: \"top-center\",\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n  const getPortalDetails = (portal) => {\r\n    if(portal !== ''){\r\n      setItem('url', PortalMap.get(portal).url);\r\n      setItem('website_id', PortalMap.get(portal).id);\r\n      setItem('logo', PortalMap.get(portal).logo);\r\n    }\r\n  }\r\n\r\n  const UpdateCard = () => {\r\n    setItem('Contestportal', portal);\r\n    getPortalDetails(formatPortal(getItem('Contestportal')));\r\n    setItem('Contestusername', username);\r\n    setItem('Contestrank', rank);\r\n    setItem('Contestname', contest);\r\n    createWidget();\r\n  }\r\n\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <div className=\"flexColumn\">\r\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\r\n            <div style={{width: 20}}></div>\r\n            <h2 className=\"modal-head\">Add Contests won</h2>\r\n            <button onClick={props.onHide}>\r\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\r\n            </button>\r\n          </div>\r\n          <Form>\r\n            <Form.Group controlId=\"formBasicEmail\" className=\" flexColumn mb-20\">\r\n              <Form.Label>Website Name</Form.Label>\r\n              <select defaultValue={portal} onChange={(e) => portal = (e.target.value)}>\r\n                <option value=\"Eg. GeeksforGeeks, CodeChef\" disabled>Eg. GeeksforGeeks, CodeChef</option>\r\n                {data.map(platform => (\r\n                  <option value={platform}>{platform}</option>\r\n                ))}\r\n              </select>\r\n            </Form.Group>\r\n  \r\n            <Form.Group controlId=\"formBasicPassword1\" className=\"mb-20\">\r\n              <Form.Label>Your Profile Username </Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Eg. abc_234\" defaultValue={username} onChange={(e) => username = (e.target.value)} />\r\n            </Form.Group>\r\n  \r\n            <Form.Group controlId=\"formBasicPassword2\" className=\"mb-20\">\r\n              <Form.Label>Contest Name</Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Eg. 2020 Hackathon\" defaultValue={contest} onChange={(e) => contest = (e.target.value)} />\r\n            </Form.Group>\r\n  \r\n            <Form.Group controlId=\"formBasicPassword3\">\r\n              <Form.Label>Your Rank</Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Eg. 2514\" defaultValue={rank} onChange={(e) => rank = (e.target.value)} />\r\n            </Form.Group>\r\n  \r\n          </Form>\r\n  \r\n          <div className=\"share\" style={{justifyContent: 'center'}}>\r\n            <a onClick={() => UpdateCard()} className=\"flexAlignCenter modal-button\">Add to Profile</a>\r\n          </div>\r\n  \r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"grow1 flexColumn flexCenter flexAlignCenter add-card1\" style={{height: 250}}>\r\n        <button onClick={() => setModalShow(true)}>\r\n          <AiOutlinePlusCircle style={{fontSize: 80, color: '#C0C0C0'}} />\r\n        </button>\r\n      </div>\r\n\r\n      <MyVerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","F:\\Github\\zippy1\\src\\components\\modals\\ProjectModal.js",["223","224"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {useContext} from 'react';\r\nimport '../../styles/HelperStyles.css'\r\nimport { Modal, Form } from 'react-bootstrap';\r\nimport {AiOutlineCloseCircle, AiOutlinePlusCircle} from 'react-icons/ai';\r\nimport { setItem, getItem } from '../../utility/localStorageControl';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport { ProgrammerContext } from '../../utility/userContext';\r\n\r\nexport default function ProjectModal() {\r\n  const [user, setUser] = useContext(ProgrammerContext);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  var url = '';\r\n  var project = '';\r\n\r\n  const createWidget = async () => {\r\n    if(url.length > 0 && project.length > 0 ){\r\n      const projectWidgetData = {\r\n        'title' : getItem('Projectname'),\r\n        'link' : getItem('Projectid')\r\n      }\r\n      AdminService.createProjectWidget(projectWidgetData)\r\n        .then(response => {\r\n          console.log(response);\r\n          toast.success('Details Entered!', {\r\n            position: \"top-center\",\r\n            autoClose: 2000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n          AdminService.getUserData()\r\n            .then(resp => {\r\n              setUser(prevUser => ({...prevUser,\r\n                project_widgets: resp.data.personal_projects,\r\n              }));\r\n              setModalShow(false);\r\n            })\r\n            .catch(err => toast.error(\"Some Error Occured.\", {\r\n              position: \"top-center\",\r\n              autoClose: 2000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            }));\r\n        })\r\n        .catch(error => {\r\n          toast.error('Error, Enter correct details!', {\r\n            position: \"top-center\",\r\n            autoClose: 2000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n        });\r\n    } else {\r\n      toast.error('Error, Fields cannot be empty!', {\r\n        position: \"top-center\",\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n  const UpdateCard = () => {\r\n    setItem('Projectname', project);\r\n    setItem('Projectid', url);\r\n    createWidget();\r\n    setModalShow(false);\r\n  }\r\n\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <div className=\"flexColumn\">\r\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\r\n            <div style={{width: 20}}></div>\r\n            <h2 className=\"modal-head\">Add your work</h2>\r\n            <button onClick={props.onHide}>\r\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\r\n            </button>\r\n          </div>\r\n          <Form>\r\n            <Form.Group controlId=\"formBasicEmail\" className=\"mb-20\">\r\n              <Form.Label>Project Title</Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Eg. Automated System\" defaultValue={project} onChange={(e) => project = (e.target.value)} />\r\n            </Form.Group>\r\n  \r\n            <Form.Group controlId=\"formBasicPassword1\" className=\"mb-20\">\r\n              <Form.Label>Project URL</Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"http://www.google.com/\" defaultValue={url} onChange={(e) => url = (e.target.value)} />\r\n            </Form.Group>\r\n  \r\n          </Form>\r\n  \r\n          <div className=\"share\" style={{justifyContent: 'center'}}>\r\n            <a onClick={() => UpdateCard()} className=\"flexAlignCenter modal-button\">Add to Profile</a>\r\n          </div>\r\n  \r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"grow1 flexColumn flexCenter flexAlignCenter add-card\" style={{height: 280}}>\r\n        <button onClick={() => setModalShow(true)}>\r\n          <AiOutlinePlusCircle style={{fontSize: 80, color: '#C0C0C0'}} />\r\n        </button>\r\n      </div>\r\n\r\n      <MyVerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n    </>\r\n  );\r\n}","F:\\Github\\zippy1\\src\\components\\ContestCard\\ContestCard.js",["225","226","227"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useState, useContext } from 'react';\r\nimport '../../styles/HelperStyles.css';\r\nimport './ContestCard.css';\r\nimport {BsThreeDotsVertical} from 'react-icons/bs';\r\nimport deleted from '../../assets/images/Bin-Icon.png';\r\nimport edited from '../../assets/images/Edit-Icon.png';\r\nimport hidden from '../../assets/images/Hide-Icon.png';\r\nimport hidecards from '../../assets/images/hiddeeen.png';\r\nimport {setItem, PortalMap} from '../../utility/localStorageControl';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport UpdateContestProfile from '../UpdateModals/UpdateContestProfile';\r\nimport { Form, Modal } from 'react-bootstrap';\r\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\r\nimport { ProgrammerContext } from '../../utility/userContext';\r\n\r\nexport default function ContestCard({name, rank, id, logo, contest, card_id, hide}){ \r\n    const [user, setUser] = useContext(ProgrammerContext); \r\n    const [ bullets, setbullets ] = useState(true);\r\n    const [ drawer, setdrawer ] = useState(false);\r\n    const [option1, setoption1] = useState(false);\r\n    const [option2, setoption2] = useState(false);\r\n    const [option3, setoption3] = useState(false);\r\n    const [icon1, seticon1] = useState(true);\r\n    const [icon2, seticon2] = useState(true);\r\n    const [icon3, seticon3] = useState(true); \r\n    const [modalShow, setModalShow] = useState(false);    \r\n    var invisible = hide;\r\n\r\n    const OptionDrawer = () => {\r\n        setdrawer(true);\r\n        setbullets(false);\r\n    }\r\n    const CloseOptionDrawer = () => {\r\n        setdrawer(false);\r\n        setbullets(true);\r\n    }\r\n\r\n    const formatPortal = portal => {\r\n        return portal.split(' ').join('').toLowerCase();\r\n    }\r\n\r\n    const updateWidget = async () => {  \r\n        var website_name = formatPortal(name);\r\n        var website_id = PortalMap.get(website_name).id;\r\n        const updateWidgetData = {\r\n            'rank' : rank,\r\n            'website_id' : website_id,\r\n            'username' : name,\r\n            'contest_name' : contest,\r\n            'invisible': invisible,\r\n          }\r\n        console.log(updateWidgetData);\r\n        AdminService.updateContestWidget(card_id, updateWidgetData)\r\n          .then(response => {\r\n            toast.success('Card Updated!', {\r\n              position: \"top-center\",\r\n              autoClose: 2000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            });\r\n            AdminService.getUserData()\r\n              .then(resp => {\r\n                setUser(prevUser => ({...prevUser,\r\n                  contest_widgets: resp.data.contest_widgets,\r\n                }));\r\n              })\r\n              .catch(err => toast.error(\"Some Error Occured.\", {\r\n                position: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n              }));\r\n          })\r\n          .catch(error => {\r\n            toast.error('Error updating!', {\r\n              position: \"top-center\",\r\n              autoClose: 2000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            });\r\n          });\r\n      }\r\n\r\n    const unHideCard = () => {\r\n      invisible = false;\r\n      updateWidget();\r\n    }\r\n\r\n    const HideCard = () => {\r\n      invisible = true;\r\n      updateWidget()\r\n    }\r\n\r\n    function DeleteModal(props) {\r\n        return (\r\n          <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n          >\r\n            <div className=\"flexColumn\">\r\n              <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\r\n                <div style={{width: 20}}></div>\r\n                <h2 className=\"modal-head\">Delete Card</h2>\r\n                <button onClick={props.onHide}>\r\n                  <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\r\n                </button>\r\n              </div>\r\n              <Form>\r\n                <Form.Group controlId=\"formBasicEmail\" className=\"flexColumn mb-20\">\r\n                  <Form.Label style={{textAlign: 'center'}}>Are you sure you want to delete this card?</Form.Label>\r\n                </Form.Group>\r\n              </Form>\r\n      \r\n              <div className=\"share\" style={{justifyContent: 'center'}}>\r\n                <a onClick={(e) => {DeleteCard(card_id); setModalShow(false);}} style={{marginRight: 10}} className=\"flexAlignCenter modal-button\">Delete</a>\r\n                <a onClick={props.onHide} className=\"flexAlignCenter modal-button\">Cancel</a>\r\n              </div>\r\n      \r\n            </div>\r\n          </Modal>\r\n        );\r\n      }\r\n\r\n    const DeleteCard = async (card_id) => {\r\n        \r\n        AdminService.deleteContestWidget(card_id)\r\n            .then(response => {\r\n                toast.success('Card deleted successfully!', {\r\n                    position: \"top-center\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                AdminService.getUserData()\r\n                    .then(resp => {\r\n                      setUser(prevUser => ({...prevUser,\r\n                        contest_widgets: resp.data.contest_widgets,\r\n                      }));\r\n                    })\r\n                    .catch(err => console.log(err));\r\n                })\r\n            .catch(error => {\r\n                toast.error('Error, Cannot delete this card!', {\r\n                    position: \"top-center\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                })\r\n            });\r\n    }\r\n\r\n    const DeleteCardPortal = (card_id) => {\r\n        setModalShow(true);\r\n    }\r\n\r\n    return(\r\n        <div className=\"grow1 card11 flexColumn achievement-card\" onMouseLeave={() => CloseOptionDrawer()}>\r\n            {\r\n                invisible ? (\r\n                    <div id=\"overlay\" onClick={() => unHideCard()} className=\"flexColumn flexCenter flexAlignCenter\">\r\n                        <img src={hidecards} alt=\"hidden\" className=\"hide-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\r\n                        <p className=\"options-text\" style={{color: 'white'}}>Hidden</p>\r\n                    </div>\r\n                ) : null\r\n            }\r\n            <div className=\"flexRow flexCenter\" style={{position: 'relative'}}>\r\n                {logo === \"\" ? (\r\n                    <div className=\"flexRow flexCenter flexAlignCenter empty-logo\">\r\n                        <p className=\"profile-name\" style={{fontWeight: 700, color: 'white'}}>LOGO</p>\r\n                    </div>\r\n                ) : (\r\n                    <img className=\"logo\" src={logo} alt=\"logo\" />\r\n                )}\r\n                { bullets ? (\r\n                    <div onClick={() => OptionDrawer()} className=\"flexRow option-drawer flexCenter flexAlignCenter iconcontainer\">\r\n                        <BsThreeDotsVertical className=\"portfolio-icon\" />                    \r\n                    </div>\r\n                    ) : null \r\n                }\r\n                { drawer ? (\r\n                    <div className=\"flexColumn flexStart options\" style={{position: 'absolute', top: '-15%', right:'-2%'}}>\r\n                        {icon1 ? (<img src={deleted} alt=\"delete\" onMouseEnter={() => {setoption1(true); seticon1(false);}} className=\"delete-icon\" style={{height:30, width: 30, marginBottom: 10, marginLeft: option2 ? 50 : null || option3 ? 50 : null, cursor: 'pointer'}} />) : null }\r\n                        { option1 ? (\r\n                            <div className=\"flexRow flexAlignCenter option delete-option\" onClick={() => DeleteCardPortal(card_id)} onMouseLeave={() => {setoption1(false); seticon1(true);}} style={{ marginBottom: 10, position: 'relative', left: 40, cursor: 'pointer' }}>\r\n                                <img src={deleted} alt=\"delete\" style={{height:30, width: 30, marginRight: 10}} />\r\n                                <p className=\"options-text\">Delete</p>\r\n                            </div>                            \r\n                            ) : null\r\n                        }\r\n                        {icon2 ? (<img src={edited} alt=\"edit\" onMouseEnter={() => {setoption2(true); seticon2(false);}} className=\"edit-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer', marginLeft: option1 ? 50 : null || option3 ? 50 : null}} />) : null}\r\n                        { option2 ? (\r\n                            <div className=\"flexRow flexAlignCenter option edit-option\" onMouseLeave={() => {setoption2(false); seticon2(true);}} style={{ marginBottom: 10, position: 'relative', left: 40, cursor: 'pointer' }}>\r\n                                <UpdateContestProfile portalName={name} Rank={rank} userName={id} id={card_id} ContestName={contest} />\r\n                                <p className=\"options-text\">Edit</p>\r\n                            </div>\r\n                            ) : null\r\n                        }\r\n                        {icon3 ? (<img src={hidden} alt=\"hide\" onMouseEnter={() => {setoption3(true); seticon3(false);}} className=\"hide-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer', marginLeft: option2 ? 50 : null || option1 ? 50 : null}} />) : null}\r\n                        { option3 ? (\r\n                            <div className=\"flexRow flexAlignCenter option hide-option\" onClick={() => HideCard()} onMouseLeave={() => {setoption3(false); seticon3(true);}} style={{ marginBottom: 10, position: 'relative', left: 40, cursor: 'pointer' }}>\r\n                                <img src={hidden} alt=\"hide\" style={{height:30, width: 30, marginRight: 10}} />\r\n                                <p className=\"options-text\">Hide</p>\r\n                            </div>\r\n                            ) : null\r\n                        }\r\n                    </div>\r\n                    ) : null\r\n                }\r\n            </div>\r\n            <DeleteModal\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n            />\r\n            <p className=\"profile-head mb-10\"> {name === \"\" ? \"Company Name\" : name}</p>\r\n            <div className=\"flexRow flexBetween conv\"> \r\n                <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">ID:</span> {id === \"\" ?  \"Id here\" : id }</p>\r\n                <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">Rank:</span> {rank === \"\" ?  \"?\" : rank  }</p>\r\n            </div>\r\n            <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">Contest Name: </span>{contest === \"\" ? \"Contest Name\" : contest }</p>\r\n        </div>\r\n    );\r\n}","F:\\Github\\zippy1\\src\\components\\ProjectCard\\ProjectCard.js",["228","229","230","231"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport '../../styles/HelperStyles.css';\r\nimport './ProjectCard.css';\r\nimport deleted from '../../assets/images/Bin-Icon.png';\r\nimport hidden from '../../assets/images/Hide-Icon.png';\r\nimport {setItem} from '../../utility/localStorageControl';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport UpdateProject from '../UpdateModals/UpdateProject';\r\nimport hidecards from '../../assets/images/hiddeeen.png';\r\nimport { Form, Modal } from 'react-bootstrap';\r\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\r\nimport { ProgrammerContext } from '../../utility/userContext';\r\n\r\nexport default function ProjectCard({name, url, id, img, hide}){\r\n    const [user, setUser] = useContext(ProgrammerContext);\r\n    var invisible = hide;\r\n    const [namecard, setcard] = useState(true);\r\n    const [detailcard, setdetail] = useState(false);\r\n    const [modalShow, setModalShow] = useState(false);\r\n\r\n    const HideCard = () => {\r\n        invisible = true;\r\n        updateWidget();\r\n    }\r\n\r\n    const unHideCard = () => {\r\n        invisible = false;\r\n        updateWidget();\r\n    }\r\n\r\n    const updateWidget = async () => {\r\n        const projectWidgetData = {\r\n            'title' : name,\r\n            'link' : url,\r\n            'invisible': invisible\r\n        }\r\n        AdminService.updateProjectWidget(id, projectWidgetData)\r\n            .then(response => {\r\n              toast.success('Card Updated!', {\r\n                position: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n              });\r\n              AdminService.getUserData()\r\n                .then(resp => {\r\n                    setUser(prevUser => ({...prevUser,\r\n                        project_widgets: resp.data.personal_projects,\r\n                    }));\r\n                    setModalShow(false);\r\n                })\r\n                .catch(err => toast.error(\"Some Error Occured.\", {\r\n                    position: \"top-center\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                  }));\r\n            })\r\n            .catch(error => {\r\n              toast.error('Error updating, Retry!', {\r\n                position: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n              });\r\n            });\r\n        }\r\n\r\n        function DeleteModal(props) {\r\n            return (\r\n              <Modal\r\n                {...props}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n              >\r\n                <div className=\"flexColumn\">\r\n                  <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\r\n                    <div style={{width: 20}}></div>\r\n                    <h2 className=\"modal-head\">Delete Card</h2>\r\n                    <button onClick={props.onHide}>\r\n                      <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\r\n                    </button>\r\n                  </div>\r\n                  <Form>\r\n                    <Form.Group controlId=\"formBasicEmail\" className=\"flexColumn mb-20\">\r\n                      <Form.Label style={{textAlign: 'center'}}>Are you sure you want to delete this card?</Form.Label>\r\n                    </Form.Group>\r\n                  </Form>\r\n          \r\n                  <div className=\"share\" style={{justifyContent: 'center'}}>\r\n                    <a onClick={(e) => DeleteCard(id)} className=\"flexAlignCenter modal-button\" style={{marginRight: 10}}>Delete</a>\r\n                    <a onClick={props.onHide} className=\"flexAlignCenter modal-button\">Cancel</a>\r\n                  </div>\r\n          \r\n                </div>\r\n              </Modal>\r\n            );\r\n          }\r\n\r\n    const DeleteCard = async (project_id) => {        \r\n        AdminService.deleteProjectWidget(project_id)\r\n            .then(response => {\r\n                toast.success('Card deleted successfully!', {\r\n                    position: \"top-center\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                AdminService.getUserData()\r\n                    .then(resp => {\r\n                        setUser(prevUser => ({...prevUser,\r\n                            project_widgets: resp.data.personal_projects,\r\n                        }));\r\n                        setModalShow(false);\r\n                    })\r\n                    .catch(err => toast.error(\"Some Error Occured.\", {\r\n                        position: \"top-center\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: true,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                      }));\r\n                })\r\n            .catch(error => {\r\n                toast.error('Error, Cannot delete this card!', {\r\n                    position: \"top-center\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                })\r\n            });\r\n    }\r\n\r\n    const DeleteCardPortal = (id) => {\r\n        setModalShow(true);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <DeleteModal\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n            />\r\n            {\r\n                invisible ? (\r\n                    <div className=\"grow1 flexColumn project-card flexEnd\" \r\n                        style={{  \r\n                            backgroundImage: img === \"\" ? null : `url(\"${img}\")`,\r\n                            backgroundColor: 'rgba(219,219,219,1)',\r\n                            backgroundSize: 'cover',\r\n                            backgroundRepeat: 'no-repeat'\r\n                        }}\r\n                    >                 \r\n                        <div id=\"overlay\" onClick={() => unHideCard()} className=\"flexColumn flexCenter flexAlignCenter\">\r\n                            <img src={hidecards} alt=\"hidden\" className=\"hide-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\r\n                            <p className=\"options-text\" style={{color: 'white'}}>Hidden</p>\r\n                        </div>                    \r\n                        <div onMouseEnter={() => {setcard(false); setdetail(true);}} className=\"flexColumn flexCenter flexAlignCenter project-textbox\">\r\n                            <p className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p>\r\n                        </div>\r\n                    </div>  \r\n                ) : (\r\n                    <div className=\"grow1 flexColumn project-card flexEnd\" \r\n                        style={{  \r\n                            backgroundImage: img === \"\" ? null : `url(\"${img}\")`,\r\n                            backgroundColor: 'rgba(219,219,219,1)',\r\n                            backgroundSize: 'cover',\r\n                            backgroundRepeat: 'no-repeat'\r\n                        }}\r\n                    >             \r\n                        {\r\n                            namecard ? (\r\n                                <div onMouseEnter={() => {setcard(false); setdetail(true);}} className=\"flexColumn flexCenter flexAlignCenter project-textbox\">\r\n                                    <p className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p>\r\n                                </div>\r\n                            ) : null\r\n                        }\r\n                        {\r\n                            detailcard ? (\r\n                                <div onMouseLeave={() => {setdetail(false); setcard(true);}} className=\"flexColumn flexCenter flexAlignCenter project-textbox1\">\r\n                                    <p className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p>\r\n                                    <div className=\"flexRow flexAround flexAlignCenter\" style={{position: 'absolute', bottom: 30, width: '75%'}}>\r\n                                        <img src={deleted} onClick={() => DeleteCardPortal(id)} alt=\"delete\" className=\"delete-card-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer'}} />\r\n                                        <UpdateProject projectName={name} projectlink={url} projectImage={img} projectId={id}/>\r\n                                        <img src={hidden} onClick={() => HideCard()} alt=\"hidden\" className=\"delete-card-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer'}} />\r\n                                    </div>\r\n                                </div>\r\n                            ) : null\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}","F:\\Github\\zippy1\\src\\components\\ProjectCard\\ProjectCardDisplay.js",["232","233"],"import React, { useState, useEffect } from 'react';\nimport '../../styles/HelperStyles.css';\nimport './ProjectCard.css';\n\nexport default function ProjectCardDisplay({name, img, url}){\n    const [namecard, setcard] = useState(true);\n    return(\n        <div className=\"grow1 flexColumn project-card flexEnd\" \n            style={{  \n                backgroundImage: img === \"\" ? null : `url(\"${img}\")`,\n                backgroundColor: 'rgba(219,219,219,1)',\n                backgroundSize: 'cover',\n                backgroundRepeat: 'no-repeat'\n            }}\n        >\n            {\n                namecard ? (\n                    <div className=\"flexColumn flexCenter flexAlignCenter project-textbox\">\n                        <p className=\"project-name\">{ name.length > 0 ? name : \"Sample Webpage\"}</p>\n                    </div>\n                ) : null\n            }\n        </div>\n    );\n}","F:\\Github\\zippy1\\src\\components\\ContestCard\\ContestCardDisplay.js",[],"F:\\Github\\zippy1\\src\\components\\modals\\CodingProfileModal.js",[],"F:\\Github\\zippy1\\src\\components\\CodingCard\\CodingCardDisplay.js",[],"F:\\Github\\zippy1\\src\\components\\CodingCard\\CodingCard.js",["234","235","236","237"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useState, useContext } from 'react';\r\nimport '../../styles/HelperStyles.css';\r\nimport './CodingCard.css';\r\nimport {BsThreeDotsVertical} from 'react-icons/bs';\r\nimport deleted from '../../assets/images/Bin-Icon.png';\r\nimport edited from '../../assets/images/Edit-Icon.png';\r\nimport hidden from '../../assets/images/Hide-Icon.png';\r\nimport hidecards from '../../assets/images/hiddeeen.png';\r\nimport {setItem, getItem, PortalMap} from '../../utility/localStorageControl';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport UpdateCodingProfile from '../UpdateModals/UpdateCodingProfile';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\r\nimport { Form } from 'react-bootstrap';\r\nimport { ProgrammerContext } from '../../utility/userContext';\r\n\r\nexport default function CodingCard({name, rank, id, logo, hide}){       \r\n  const [user, setUser] = useContext(ProgrammerContext); \r\n    var invisible = hide;\r\n    const [ bullets, setbullets ] = useState(true);\r\n    const [ drawer, setdrawer ] = useState(false);\r\n    const [option1, setoption1] = useState(false);\r\n    const [option2, setoption2] = useState(false);\r\n    const [option3, setoption3] = useState(false);\r\n    const [icon1, seticon1] = useState(true);\r\n    const [icon2, seticon2] = useState(true);\r\n    const [icon3, seticon3] = useState(true);\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n\r\n    const OptionDrawer = () => {\r\n        setdrawer(true);\r\n        setbullets(false);\r\n    }\r\n    const CloseOptionDrawer = () => {\r\n        setdrawer(false);\r\n        setbullets(true);\r\n    }\r\n\r\n    const formatPortal = portal => {\r\n        return portal.split(' ').join('').toLowerCase();\r\n    }\r\n\r\n    const updateRankWidget = async (name) => {        \r\n          var website_name = formatPortal(name);\r\n          var website_id = PortalMap.get(website_name).id;\r\n          const rankWidgetData = {\r\n            'website_id' : website_id,\r\n            'rank' : rank,\r\n            'username': id,\r\n            'invisible' : invisible,\r\n          }\r\n          console.log(rankWidgetData);\r\n          AdminService.updateRankWidget(rankWidgetData)\r\n            .then(response => {\r\n              toast.success('Card Updated!', {\r\n                position: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n              });\r\n              AdminService.getUserData()\r\n                .then(resp => {\r\n                  setUser(prevUser => ({...prevUser,\r\n                    rank_widgets: resp.data.rank_widgets,\r\n                  }));\r\n                })\r\n                .catch(err => toast.error(\"Some Error Occured.\", {\r\n                  position: \"top-center\",\r\n                  autoClose: 2000,\r\n                  hideProgressBar: true,\r\n                  closeOnClick: true,\r\n                  pauseOnHover: true,\r\n                  draggable: true,\r\n                  progress: undefined,\r\n                }));\r\n            })\r\n            .catch(error => {\r\n              toast.error('Error updating!', {\r\n                position: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n              });\r\n            });\r\n        }\r\n\r\n      const unHideCard = (name) => {\r\n        invisible = false;\r\n        updateRankWidget(name);\r\n      }\r\n  \r\n      const HideCard = (name) => {\r\n        invisible = true;\r\n        updateRankWidget(name)\r\n      }\r\n\r\n      function DeleteModal(props) {\r\n        return (\r\n          <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n          >\r\n            <div className=\"flexColumn\">\r\n              <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\r\n                <div style={{width: 20}}></div>\r\n                <h2 className=\"modal-head\">Delete Card</h2>\r\n                <button onClick={props.onHide}>\r\n                  <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\r\n                </button>\r\n              </div>\r\n              <Form>\r\n                <Form.Group controlId=\"formBasicEmail\" className=\"flexColumn mb-20\">\r\n                  <Form.Label style={{textAlign: 'center'}}>Are you sure you want to delete this card?</Form.Label>\r\n                </Form.Group>\r\n              </Form>\r\n      \r\n              <div className=\"share\" style={{justifyContent: 'center'}}>\r\n                <a onClick={(e) => {DeleteCard(name); setModalShow(false); }} style={{marginRight: 10}} className=\"flexAlignCenter modal-button\">Delete</a>\r\n                <a onClick={props.onHide} className=\"flexAlignCenter modal-button\">Cancel</a>\r\n              </div>\r\n      \r\n            </div>\r\n          </Modal>\r\n        );\r\n      }\r\n\r\n    const DeleteCard = async (name) => {\r\n        var website_name = formatPortal(name);\r\n        var website_id = PortalMap.get(website_name).id;\r\n\r\n        AdminService.deleteRankWidget(website_id)\r\n            .then(response => {\r\n                toast.success('Card deleted successfully!', {\r\n                    position: \"top-center\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                AdminService.getUserData()\r\n                    .then(resp => {\r\n                      setUser(prevUser => ({...prevUser,\r\n                        rank_widgets: resp.data.rank_widgets,\r\n                      }));\r\n                    })\r\n                    .catch(err => console.log(err));\r\n                })\r\n            .catch(error => {\r\n                toast.error('Error, Cannot delete this card!', {\r\n                    position: \"top-center\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                })\r\n            });\r\n    }\r\n\r\n    const DeleteCardPortal = (name) => {\r\n        setModalShow(true);\r\n    }\r\n\r\n    return(\r\n            <div className=\"grow1 card11 flexColumn profile-card\" onMouseLeave={() => CloseOptionDrawer()}>\r\n                {\r\n                    invisible ? (\r\n                        <div id=\"overlay\" onClick={() => unHideCard(name)} className=\"flexColumn flexCenter flexAlignCenter\">\r\n                            <img src={hidecards} alt=\"hidden\" className=\"hide-card-icon\" style={{height:30, width: 30, marginBottom: 10}} />\r\n                            <p className=\"options-text\" style={{color: 'white'}}>Hidden</p>\r\n                        </div>\r\n                    ) : null\r\n                }\r\n                <div className=\"flexRow flexCenter\" style={{position: 'relative'}}>\r\n                    {logo === \"\" ? (\r\n                        <div className=\"flexRow flexCenter flexAlignCenter empty-logo\">\r\n                            <p className=\"profile-name\" style={{fontWeight: 700, color: 'white'}}>LOGO</p>\r\n                        </div>\r\n                    ) : (\r\n                        <img className=\"logo\" src={logo} alt=\"logo\" />\r\n                    )}\r\n                    { bullets ? (\r\n                        <div onClick={() => OptionDrawer()} className=\"flexRow option-drawer flexCenter flexAlignCenter iconcontainer\">\r\n                            <BsThreeDotsVertical className=\"portfolio-icon\" />                    \r\n                        </div>\r\n                        ) : null \r\n                    }\r\n                    { drawer ? (\r\n                        <div className=\"flexColumn flexStart options\" style={{position: 'absolute', top: '-15%', right:'-2%'}}>\r\n                            {icon1 ? (<img src={deleted} alt=\"delete\" onMouseEnter={() => {setoption1(true); seticon1(false);}} onClick={() => DeleteCardPortal(name)} className=\"delete-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer', marginLeft: option2 ? 50 : null || option3 ? 50 : null}} />) : null }\r\n                            { option1 ? (\r\n                                <div className=\"flexRow flexAlignCenter option delete-option\" onClick={() => DeleteCardPortal(name)} onMouseLeave={() => {setoption1(false); seticon1(true);}} style={{ marginBottom: 10, position: 'relative', left: 40, cursor: 'pointer' }}>\r\n                                    <img src={deleted} alt=\"delete\" style={{height:30, width: 30, marginRight: 10}} />\r\n                                    <p className=\"options-text\">Delete</p>\r\n                                </div>                            \r\n                                ) : null\r\n                            }\r\n                            {icon2 ? (<img src={edited} alt=\"edit\" onMouseEnter={() => {setoption2(true); seticon2(false);}} className=\"edit-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer', marginLeft: option1 ? 50 : null || option3 ? 50 : null}} />) : null}\r\n                            { option2 ? (\r\n                                <div className=\"flexRow flexAlignCenter option edit-option\" onMouseLeave={() => {setoption2(false); seticon2(true);}} style={{ marginBottom: 10, position: 'relative', left: 40, cursor: 'pointer' }}>\r\n                                    <UpdateCodingProfile portalName={name} Rank={rank} userName={id} />\r\n                                    <p className=\"options-text\">Edit</p>\r\n                                </div>\r\n                                ) : null\r\n                            }\r\n                            {icon3 ? (<img src={hidden} alt=\"hide\" onMouseEnter={() => {setoption3(true); seticon3(false);}} className=\"hide-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer', marginLeft: option2 ? 50 : null || option1 ? 50 : null}} />) : null}\r\n                            { option3 ? (\r\n                                <div className=\"flexRow flexAlignCenter option hide-option\" onClick={() => HideCard(name)} onMouseLeave={() => {setoption3(false); seticon3(true);}} style={{ marginBottom: 10, position: 'relative', left: 40, cursor: 'pointer' }}>\r\n                                    <img src={hidden} alt=\"hide\" style={{height:30, width: 30, marginRight: 10}} />\r\n                                    <p className=\"options-text\">Hide</p>\r\n                                </div>\r\n                                ) : null\r\n                            }\r\n                        </div>\r\n                        ) : null\r\n                    }\r\n                </div>\r\n                <DeleteModal\r\n                    show={modalShow}\r\n                    onHide={() => setModalShow(false)}\r\n                />\r\n                <p className=\"profile-head mb-10\"> {name === \"\" ? \"Company Name\" : name}</p>\r\n                <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">ID:</span> {id === \"\" ?  \"Id here\" : id }</p>\r\n                <p className=\"profile-name ph-20 mb-10\"><span className=\"profile-heading\">Rank:</span> {rank === \"\" ?  \"?\" : rank  }</p>\r\n            </div>\r\n    );\r\n}","F:\\Github\\zippy1\\src\\AdminServices\\AdminService.js",[],"F:\\Github\\zippy1\\src\\components\\GoogleBtn.js",["238","239","240","241","242"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {useState, useContext, useEffect} from 'react'\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport { getItem, setItem } from '../utility/localStorageControl';\r\nimport Axios from 'axios';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport PortfolioModal from '../components/modals/PortfolioModal';\r\nimport AdminService from '../AdminServices/AdminService';\r\nimport {API_ENDPOINT} from '../AdminServices/baseUrl';\r\nimport {ProgrammerContext} from '../utility/userContext';\r\n\r\nconst CLIENT_ID = '148434873376-a1k8ubdj3g3oqkh53an00v8angbj2itd.apps.googleusercontent.com';\r\n\r\nconst GoogleBtn = () => {\r\n  const [user, setUser] = useContext(ProgrammerContext);\r\n  const [isLogin, setLogin] = useState(user.login);\r\n  const loginSuccess = (response) => {\r\n    console.log(response);\r\n    if(response.tokenId){\r\n      Axios.post(`${API_ENDPOINT}/login?idTokenString=${response.tokenId}`)\r\n        .then(function (response) {\r\n          setLogin(true);\r\n          setUser(prevUser => ({...prevUser, login: true, token: response.data.access_token }));\r\n          toast.success('Login Successful!', {\r\n            position: \"top-center\",\r\n            autoClose: 2000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n          AdminService.getUserData()\r\n            .then(resp => {\r\n              setUser(prevUser => ({...prevUser,\r\n                user_id: resp.data.user_id,\r\n                name: resp.data.name,\r\n                email: resp.data.email,\r\n                image: resp.data.picture_url,\r\n                resume_present: resp.data.resume_present,\r\n                portfolio: resp.data.portfolio,\r\n                rank_widgets: resp.data.rank_widgets,\r\n                contest_widgets: resp.data.contest_widgets,\r\n                project_widgets: resp.data.personal_projects,\r\n              }));\r\n              if(resp.data.portfolio){\r\n                if(resp.data.portfolio.cloud_resume_link){\r\n                  setUser(prevUser => ({...prevUser, resumeLink: resp.data.portfolio.cloud_resume_link}));\r\n                }\r\n              }\r\n            })\r\n            .catch(err => toast.error(\"Some Error Occured.\", {\r\n              position: \"top-center\",\r\n              autoClose: 2000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            }));\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n          toast.error('Login Failed, Retry!', {\r\n            position: \"top-center\",\r\n            autoClose: 2000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n        });\r\n\r\n    }\r\n  }\r\n\r\n  const loginFailure = (response) => {\r\n    toast.error('Login Failed, Retry!', {\r\n      position: \"top-center\",\r\n      autoClose: 2000,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    });\r\n  }\r\n    return (\r\n    <div>\r\n      { user.login ? (\r\n        <>\r\n          <PortfolioModal home={false} />\r\n        </>\r\n        )\r\n        : \r\n        (\r\n          <GoogleLogin\r\n            clientId={ CLIENT_ID }\r\n            buttonText='Sign in with Google'\r\n            onSuccess={ loginSuccess }\r\n            onFailure={ loginFailure }\r\n            cookiePolicy={ 'single_host_origin' }\r\n            responseType='code,token'\r\n            className=\"google-button\"\r\n          />\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GoogleBtn;","F:\\Github\\zippy1\\src\\AdminServices\\dataService.js",[],"F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateCodingProfile.js",["243","244"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useContext } from 'react';\r\nimport '../../styles/HelperStyles.css'\r\nimport { Form, Modal } from 'react-bootstrap';\r\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\r\nimport { PortalMap, setItem, getItem } from '../../utility/localStorageControl';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport edited from '../../assets/images/Edit-Icon.png';\r\nimport { ProgrammerContext } from '../../utility/userContext';\r\n\r\n  export default function UpdateCodingProfile(portalName, Rank, userName) {\r\n    const [user, setUser] = useContext(ProgrammerContext);\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    var portal1 = portalName;\r\n    var portal = portal1.portalName;\r\n    const data = ['Geeks for Geeks', 'CodeChef', 'CodeForces', 'HackerRank', 'TopCoder', 'LeetCode'];\r\n    var username = portal1.userName;\r\n    var rank = portal1.Rank;\r\n\r\n    const formatPortal = portal => {\r\n      return portal.split(' ').join('').toLowerCase();\r\n    }\r\n\r\n    const updateRankWidget = async () => {\r\n      if(portal && username && rank){\r\n        const rankWidgetData = {\r\n          'rank' : getItem('Codingrank'),\r\n          'website_id' : getItem('website_id'),\r\n          'username': getItem('Codingusername'),\r\n        }\r\n        console.log(rankWidgetData);\r\n        AdminService.updateRankWidget(rankWidgetData)\r\n          .then(response => {\r\n            toast.success('Card Updated!', {\r\n              position: \"top-center\",\r\n              autoClose: 2000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            });\r\n            AdminService.getUserData()\r\n              .then(resp => {\r\n                setUser(prevUser => ({...prevUser,\r\n                    rank_widgets: resp.data.rank_widgets,\r\n                }));\r\n                setModalShow(false);\r\n              })\r\n              .catch(err => toast.error(\"Some Error Occured.\", {\r\n                position: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n              }));\r\n          })\r\n          .catch(error => {\r\n            toast.error('Error, Enter correct details!', {\r\n              position: \"top-center\",\r\n              autoClose: 2000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            });\r\n          });\r\n      } else {\r\n        toast.error('Error, Fields cannot be empty!', {\r\n          position: \"top-center\",\r\n          autoClose: 2000,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n      }\r\n    }\r\n\r\n    const getPortalDetails = (portal) => {\r\n      if(portal !== ''){\r\n        setItem('url', PortalMap.get(portal).url);\r\n        setItem('website_id', PortalMap.get(portal).id);\r\n        setItem('logo', PortalMap.get(portal).logo);\r\n      }\r\n    }\r\n\r\n    const UpdateCard = () => {\r\n      setItem('Codingportal', portal);\r\n      getPortalDetails(formatPortal(getItem('Codingportal')));\r\n      setItem('Codingusername', username);\r\n      setItem('Codingrank', rank);\r\n      updateRankWidget();\r\n    }\r\n\r\n    function MyVerticallyCenteredModal(props) {\r\n      return (\r\n        <Modal\r\n          {...props}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <div className=\"flexColumn\">\r\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\r\n            <div style={{width: 20}}></div>\r\n            <h2 className=\"modal-head\">Update Coding Profile</h2>\r\n            <button onClick={props.onHide}>\r\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\r\n            </button>\r\n          </div>\r\n          <Form>\r\n            <Form.Group controlId=\"formBasicEmail\" className=\" flexColumn mb-20\">\r\n              <Form.Label>Website Name</Form.Label>\r\n              <select defaultValue={portal} onChange={(e) => portal = (e.target.value)}>\r\n                <option value=\"Eg. GeeksforGeeks, CodeChef\" disabled>Eg. GeeksforGeeks, CodeChef</option>\r\n                {data.map(platform => (\r\n                  <option value={platform}>{platform}</option>\r\n                ))}\r\n              </select>\r\n            </Form.Group>\r\n  \r\n            <Form.Group controlId=\"formBasicPassword\" className=\"mb-20\">\r\n              <Form.Label>Your Profile Username </Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Eg. abc_234\" defaultValue={username} onChange={(e) => username = (e.target.value)} />\r\n            </Form.Group>\r\n  \r\n            <Form.Group controlId=\"formBasicPassword1\">\r\n              <Form.Label>Your Rank</Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Eg. 2512\" defaultValue={rank} onChange={(e) => rank = (e.target.value)} />\r\n            </Form.Group>\r\n  \r\n          </Form>\r\n  \r\n          <div className=\"share\" style={{justifyContent: 'center'}}>\r\n            <a onClick={() => UpdateCard() } className=\"flexAlignCenter modal-button\">Update Profile</a>\r\n          </div>\r\n  \r\n        </div>\r\n        </Modal>\r\n      );\r\n    }\r\n  \r\n    return (\r\n      <>\r\n        <img src={edited} alt=\"edit\" onClick={() => setModalShow(true)} style={{height:30, width: 30, marginRight: 10}} />\r\n  \r\n        <MyVerticallyCenteredModal\r\n          show={modalShow}\r\n          onHide={() => setModalShow(false)}\r\n        />\r\n      </>\r\n    );\r\n  }","F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateContestProfile.js",["245"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useContext } from 'react';\r\nimport '../../styles/HelperStyles.css'\r\nimport { Modal, Form } from 'react-bootstrap';\r\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\r\nimport { PortalMap, setItem, getItem } from '../../utility/localStorageControl';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport edited from '../../assets/images/Edit-Icon.png';\r\nimport { ProgrammerContext } from '../../utility/userContext';\r\n\r\nexport default function UpdateContestProfile(portalName, Rank, userName, id, ContestName) {\r\n  const [user, setUser] = useContext(ProgrammerContext);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  var portal1 = portalName;\r\n  var portal = portal1.portalName;\r\n  const data = ['Geeks for Geeks', 'CodeChef', 'CodeForces', 'HackerRank', 'TopCoder', 'LeetCode'];\r\n  var contest = portal1.ContestName;\r\n  var rank = portal1.Rank;\r\n  var username = portal1.userName;\r\n  var card_id = portal1.id;\r\n\r\n  const formatPortal = portal => {\r\n    return portal.split(' ').join('').toLowerCase();\r\n  }\r\n\r\n  const updateWidget = async (card_id) => {\r\n    if(portal && username && rank && contest){\r\n      const updateWidgetData = {\r\n        'rank' : getItem('Contestrank'),\r\n        'website_id' : getItem('website_id'),\r\n        'username' : getItem('Contestusername'),\r\n        'contest_name' : getItem('Contestname')\r\n      }\r\n      AdminService.updateContestWidget(card_id, updateWidgetData)\r\n        .then(response => {\r\n          toast.success('Card Updated!', {\r\n            position: \"top-center\",\r\n            autoClose: 2000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n          AdminService.getUserData()\r\n            .then(resp => {\r\n              setUser(prevUser => ({...prevUser,\r\n                contest_widgets: resp.data.contest_widgets,\r\n              }));\r\n              setModalShow(false);\r\n            })\r\n            .catch(err => toast.error(\"Some Error Occured.\", {\r\n              position: \"top-center\",\r\n              autoClose: 2000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            }));\r\n        })\r\n        .catch(error => {\r\n          toast.error('Error, Enter correct details!', {\r\n            position: \"top-center\",\r\n            autoClose: 2000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n        });\r\n    } else {\r\n      toast.error('Error, Fields cannot be empty!', {\r\n        position: \"top-center\",\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n  \r\n  const getPortalDetails = (portal) => {\r\n    if(portal !== ''){\r\n      setItem('url', PortalMap.get(portal).url);\r\n      setItem('website_id', PortalMap.get(portal).id);\r\n      setItem('logo', PortalMap.get(portal).logo);\r\n    }\r\n  }\r\n\r\n  const UpdateCard = (card_id) => {\r\n    setItem('Contestportal', portal);\r\n    getPortalDetails(formatPortal(getItem('Contestportal')));\r\n    setItem('Contestusername', username);\r\n    setItem('Contestrank', rank);\r\n    setItem('Contestname', contest);\r\n    updateWidget(card_id);\r\n  }\r\n\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <div className=\"flexColumn\">\r\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\r\n            <div style={{width: 20}}></div>\r\n            <h2 className=\"modal-head\">Update Contests won</h2>\r\n            <button onClick={props.onHide}>\r\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\r\n            </button>\r\n          </div>\r\n          <Form>\r\n            <Form.Group controlId=\"formBasicEmail\" className=\" flexColumn mb-20\">\r\n              <Form.Label>Website Name</Form.Label>\r\n              <select defaultValue={portal} onChange={(e) => portal = (e.target.value)}>\r\n                <option value=\"Eg. GeeksforGeeks, CodeChef\" disabled>Eg. GeeksforGeeks, CodeChef</option>\r\n                {data.map(platform => (\r\n                  <option value={platform}>{platform}</option>\r\n                ))}\r\n              </select>\r\n            </Form.Group>\r\n  \r\n            <Form.Group controlId=\"formBasicPassword1\" className=\"mb-20\">\r\n              <Form.Label>Your Profile Username </Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Eg. abc_234\" defaultValue={username} onChange={(e) => username = (e.target.value)} />\r\n            </Form.Group>\r\n  \r\n            <Form.Group controlId=\"formBasicPassword2\" className=\"mb-20\">\r\n              <Form.Label>Contest Name</Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Eg. 2020 Hackathon\" defaultValue={contest} onChange={(e) => contest = (e.target.value)} />\r\n            </Form.Group>\r\n  \r\n            <Form.Group controlId=\"formBasicPassword3\">\r\n              <Form.Label>Your Rank</Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Eg. 2514\" defaultValue={rank} onChange={(e) => rank = (e.target.value)} />\r\n            </Form.Group>\r\n  \r\n          </Form>\r\n  \r\n          <div className=\"share\" style={{justifyContent: 'center'}}>\r\n            <a onClick={() => UpdateCard(card_id)} className=\"flexAlignCenter modal-button\">Update Profile</a>\r\n          </div>\r\n  \r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n        <img src={edited} alt=\"edit\" onClick={() => setModalShow(true)} style={{height:30, width: 30, marginRight: 10}} />\r\n  \r\n        <MyVerticallyCenteredModal\r\n            show={modalShow}\r\n            onHide={() => setModalShow(false)}\r\n        />\r\n    </>\r\n  );\r\n}\r\n","F:\\Github\\zippy1\\src\\components\\UpdateModals\\UpdateProject.js",["246"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useContext } from 'react';\r\nimport '../../styles/HelperStyles.css'\r\nimport { Modal, Form } from 'react-bootstrap';\r\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\r\nimport { setItem, getItem } from '../../utility/localStorageControl';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport edited from '../../assets/images/Edit-Icon.png';\r\nimport { ProgrammerContext } from '../../utility/userContext';\r\n\r\nexport default function UpdateProject(projectName, projectlink, projectImage, projectId) {\r\n  const [user, setUser] = useContext(ProgrammerContext);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  var project1 = projectName;\r\n  var url = project1.projectlink;\r\n  var project = project1.projectName;\r\n  var project_id = project1.projectId;\r\n\r\n  const updateWidget = async (id) => {\r\n    if(url.length > 0 && project.length > 0 ){\r\n        const projectWidgetData = {\r\n          'title' : getItem('Projectname'),\r\n          'link' : getItem('Projectid')\r\n        }\r\n      AdminService.updateProjectWidget(id, projectWidgetData)\r\n        .then(response => {\r\n          toast.success('Card Updated!', {\r\n            position: \"top-center\",\r\n            autoClose: 2000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n          AdminService.getUserData()\r\n            .then(resp => {\r\n              setUser(prevUser => ({...prevUser,\r\n                project_widgets: resp.data.personal_projects,\r\n              }));\r\n              setModalShow(false);\r\n            })\r\n            .catch(err => toast.error(\"Some Error Occured.\", {\r\n              position: \"top-center\",\r\n              autoClose: 2000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            }));\r\n        })\r\n        .catch(error => {\r\n          toast.error('Error, Enter correct details!', {\r\n            position: \"top-center\",\r\n            autoClose: 2000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n        });\r\n    } else {\r\n      toast.error('Error, Fields cannot be empty!', {\r\n        position: \"top-center\",\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n  const UpdateCard = (id) => {\r\n    setItem('Projectname', project);\r\n    setItem('Projectid', url);\r\n    updateWidget(id);\r\n    setModalShow(false);\r\n  }\r\n\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <div className=\"flexColumn\">\r\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\r\n            <div style={{width: 20}}></div>\r\n            <h2 className=\"modal-head\">Update your Project</h2>\r\n            <button onClick={props.onHide}>\r\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\r\n            </button>\r\n          </div>\r\n          <Form>\r\n            <Form.Group controlId=\"formBasicEmail\" className=\"mb-20\">\r\n              <Form.Label>Project Title</Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Eg. Automated System\" defaultValue={project} onChange={(e) => project = (e.target.value)} />\r\n            </Form.Group>\r\n  \r\n            <Form.Group controlId=\"formBasicPassword\" className=\"mb-20\">\r\n              <Form.Label>Project URL</Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"http://www.google.com/\" defaultValue={url} onChange={(e) => url = (e.target.value)} />\r\n            </Form.Group>\r\n  \r\n          </Form>\r\n  \r\n          <div className=\"share\" style={{justifyContent: 'center'}}>\r\n            <a onClick={() => UpdateCard(project_id)} className=\"flexAlignCenter modal-button\">Update Portfolio</a>\r\n          </div>\r\n  \r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n        <img src={edited} alt=\"hidden\" onClick={() => setModalShow(true)} className=\"edit-card-icon\" style={{height:30, width: 30, marginBottom: 10, cursor: 'pointer'}} />\r\n  \r\n        <MyVerticallyCenteredModal\r\n            show={modalShow}\r\n            onHide={() => setModalShow(false)}\r\n        />\r\n    </>\r\n  );\r\n}","F:\\Github\\zippy1\\src\\screens\\PolicyScreen\\PolicyScreen.js",[],"F:\\Github\\zippy1\\src\\screens\\TermsScreen\\TermsScreen.js",[],"F:\\Github\\zippy1\\src\\components\\modals\\SendViaEmail.js",["247","248","249","250","251","252"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {useContext, useState} from 'react';\r\nimport '../../styles/HelperStyles.css'\r\nimport { Modal, Form } from 'react-bootstrap';\r\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport MailPreview from '../MailPreview/MailPreview';\r\nimport { getItem, setItem } from '../../utility/localStorageControl';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport { ProgrammerContext } from '../../utility/userContext';\r\n\r\nexport default function SendViaEmail() {\r\n  const [user, setUser] = useContext(ProgrammerContext);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n     var mails = \"\";\r\n     var resume = \"\";\r\n     const resumeData = new FormData();\r\n\r\n     const OptionalHeader = {\r\n      'Content-Type': 'multipart/form-data; boundary=<calculated when request is sent>',\r\n     }\r\n\r\n     const handleInput = (event) => {\r\n      resume = event.target.files[0]\r\n     }\r\n\r\n    const SendMail =  async () => {\r\n      resumeData.append('file', resume)\r\n      AdminService.sendMailwithAttachment(mails, resumeData, OptionalHeader)\r\n        .then(resp => {\r\n          if(resp.data.status === \"success\"){\r\n            toast.success('Email Succesfully Sent!', {\r\n              position: \"top-center\",\r\n              autoClose: 2000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            });\r\n            setModalShow(false);\r\n          } else{\r\n            toast.error(resp.data.message, {\r\n              position: \"top-center\",\r\n              autoClose: 2000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            });\r\n          }\r\n        })\r\n        .catch(err => toast.error(\r\n          \"Some Error occured.\", {\r\n          position: \"top-center\",\r\n          autoClose: 2000,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }));\r\n    }\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <div className=\"flexColumn\">\r\n            <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\r\n              <div style={{width: 20}}></div>\r\n              <h2 className=\"modal-head\">Send via Email</h2>\r\n              <button onClick={props.onHide}>\r\n                <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\r\n              </button>\r\n            </div>\r\n            <Form>\r\n              <Form.Group controlId=\"formBasic1\" className=\"mb-20\">\r\n                <Form.Label>Enter the mail ID you would like to send the mail to<span style={{color: 'red'}}>*</span> </Form.Label>\r\n                <Form.Control type=\"text\" defaultValue={mails} onChange={(event) => mails = (event.target.value)} placeholder=\"example: anything@gmail.com\" />\r\n              </Form.Group>    \r\n              <Form.Group controlId=\"formBasic12\" className=\"mb-20\">\r\n                <Form.Label>Upload Resume (Optional)</Form.Label>\r\n                <Form.Control type=\"file\" defaultValue={resume} onChange={(event) => handleInput(event)} placeholder=\"Click on Upload to attach resume\" />\r\n              </Form.Group>   \r\n            </Form>\r\n\r\n            <div className=\"flexRow flexBetween\">\r\n                <div className=\"flexColumn\">\r\n                    <span className=\"modal-list\">• File size should not more than 10 MB.</span>\r\n                    <span className=\"modal-list\">• File should be in PDF format.</span>\r\n                </div>\r\n            </div>\r\n    \r\n            <div className=\"share\" style={{justifyContent: 'center'}}>\r\n              <a onClick={SendMail} className=\"flexAlignCenter modal-button\">Send Mail</a>\r\n            </div>\r\n\r\n            <div className=\"flexRow flexCenter end-section ph-20 flexAlignCenter mv-40\">\r\n                <hr style={{width: '35%', color: 'rgba(154,154,154,1)'}} />\r\n                <p className=\"end-text\" style={{fontSize: 16}}>Mail Preview</p>\r\n                <hr style={{width: '35%', color: 'rgba(154,154,154,1)'}} />\r\n            </div>\r\n\r\n            <MailPreview />\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"share\" style={{justifyContent: 'center'}}>\r\n        <a className=\"flexAlignCenter modal-button\" style={{cursor: 'pointer'}} onClick={() => setModalShow(true)}>Send Email with Profile</a>\r\n      </div>\r\n\r\n      <MyVerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","F:\\Github\\zippy1\\src\\components\\modals\\AttachResume.js",["253","254","255"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {useContext, useState} from 'react';\r\nimport '../../styles/HelperStyles.css'\r\nimport { Modal, Form } from 'react-bootstrap';\r\nimport {AiOutlinePlusCircle, AiOutlineCloseCircle, AiOutlineCloudDownload} from 'react-icons/ai';\r\nimport {BsFillEyeFill} from 'react-icons/bs'\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport { getItem, setItem } from '../../utility/localStorageControl';\r\nimport { ProgrammerContext } from '../../utility/userContext';\r\n\r\nexport default function AttachResumeModal() {\r\n  const [user, setUser] = useContext(ProgrammerContext);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  var url = user.resumeLink;\r\n\r\n  const ResumeAttach = async () => {\r\n    if(url !== user.resumeLink){\r\n      setUser(prevUser => ({...prevUser, resumeLink: url}));\r\n    }\r\n    AdminService.AttachResume(url)\r\n      .then(resp => {\r\n        toast.success('Resume Link Added!', {\r\n          position: \"top-center\",\r\n          autoClose: 2000,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n        setModalShow(false);\r\n      })\r\n      .catch(err => toast.error(\"Some Error Occured.\", {\r\n        position: \"top-center\",\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      }));\r\n  }\r\n\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <div className=\"flexColumn\">\r\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\r\n            <div style={{width: 20}}></div>\r\n            <h2 className=\"modal-head\">Attach your Resume</h2>\r\n            <button onClick={props.onHide}>\r\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\r\n            </button>\r\n          </div>\r\n          <Form>\r\n            <Form.Group controlId=\"formBasicEmail\" className=\"flexColumn mb-20\">\r\n              <Form.Label style={{fontStyle: 'Poppins'}}>Enter your Resume link in the form of PDF below</Form.Label>\r\n              <textarea style={{fontStyle: 'Poppins', borderRadius: 32, margin: '10px 0'}} rows={5} type=\"text\" class=\"form-control\" defaultValue={url} placeholder=\"Example https://www.gdrive.com/profile/abc,.pdf\" onChange={(event) => url = event.target.value} />\r\n            </Form.Group>\r\n          </Form>\r\n\r\n          <span className=\"modal-list\">• Enter a proper Gdrive/Dropbox or any cloud link.</span>\r\n          <span className=\"modal-list\">• Upload the file in cloud in pdf format (Recommended).</span>\r\n\r\n          <div className=\"share\" style={{justifyContent: 'center'}}>\r\n            <a className=\"flexAlignCenter modal-button\" onClick={() => ResumeAttach()}>Add to profile</a>\r\n          </div>\r\n  \r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"grow1 attach-resume flexRow flexAlignCenter flexEvenly\">\r\n        <p className=\"resume-head\">{url ? 'View attached PDF' : 'Attach your Resume'}</p>\r\n        {url.length > 0 ?\r\n        (<div style={{display: 'flex', gap: 20}}>\r\n          <AiOutlineCloudDownload onClick={() => setModalShow(true)} className=\"grow2\" style={{fontSize: 40, color: '#C0C0C0', cursor: 'pointer'}} />\r\n          <BsFillEyeFill onClick={() => window.open(url)} className=\"grow2\" style={{fontSize: 40, color: '#C0C0C0', cursor: 'pointer'}} />\r\n        </div>) :\r\n        (\r\n          <AiOutlinePlusCircle onClick={() => setModalShow(true)} className=\"grow2\" style={{fontSize: 40, color: '#C0C0C0', cursor: 'pointer'}} />\r\n        )}\r\n      </div>\r\n\r\n      <MyVerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","F:\\Github\\zippy1\\src\\components\\MailPreview\\MailPreview.js",["256","257","258","259","260"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {useContext, useState} from 'react';\r\nimport '../../styles/HelperStyles.css';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport {setItem, getItem} from '../../utility/localStorageControl'\r\n\r\nimport splashlogo from '../../assets/images/logo.png';\r\nimport { ProgrammerContext } from '../../utility/userContext';\r\n\r\nexport default function MailPreview(){\r\n    const [user, setUser] = useContext(ProgrammerContext);\r\n    return(\r\n        <div className=\"mail-box\">\r\n            <img src={splashlogo} width=\"200\" height=\"40\" style={{alignSelf: 'center'}} className=\"d-inline-block\" alt=\"logo\" />\r\n            <div className=\"mail-content-box\">\r\n                <div style={{backgroundColor: 'rgba(255,217,135,1)', borderTopLeftRadius: 8, borderTopRightRadius: 8}}>\r\n                    <h6 className=\"mailcontent-header\">{user.portfolio.title}</h6>\r\n                </div>\r\n                <div style={{padding: 20, gap: 30}} className=\"flexRow\">\r\n                    <img src={user.image} className=\"profile-pic\" alt=\"profile\" />\r\n                    <div className=\"flexColumn\">\r\n                        <h2 className=\"mailcontent-name\">{user.name}</h2>\r\n                        <h4 className=\"mailcontent-mail\">{user.email}</h4>\r\n                        <div className=\"flexRow\" style={{alignItems: 'baseline', gap: 50}}>\r\n                            <div className=\"flexRow\" style={{alignItems: 'baseline', gap: 10}}>\r\n                                <h1 className=\"mailcontent-number\">{user.rank_widgets.length}</h1>\r\n                                <h5 className=\"mailcontent-sec\">Profiles</h5>\r\n                            </div>\r\n                            <div className=\"flexRow\" style={{alignItems: 'baseline', gap: 10}}>\r\n                                <h1 className=\"mailcontent-number\">{user.contest_widgets.length}</h1>\r\n                                <h5 className=\"mailcontent-sec\">Coding Contests</h5>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"share\" style={{justifyContent: 'center', padding: 0}} >\r\n                <a href={`/d?id=${user.user_id}`} className=\"flexAlignCenter modal-button\">Visit Profile</a>\r\n            </div>\r\n        </div>\r\n    );\r\n}","F:\\Github\\zippy1\\src\\components\\modals\\SentHistory.js",["261","262","263","264"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {useContext, useState} from 'react';\r\nimport '../../styles/HelperStyles.css'\r\nimport { Modal, Form, Table, Pagination } from 'react-bootstrap';\r\nimport {AiOutlineCloseCircle} from 'react-icons/ai';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport AdminService from '../../AdminServices/AdminService';\r\nimport { setItem, getItem } from '../../utility/localStorageControl';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { ProgrammerContext } from '../../utility/userContext';\r\n\r\nexport default function SentHistoryModal() {\r\n    const [user, setUser] = useContext(ProgrammerContext);\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    const [active, setActive] = useState(1);\r\n    let items = [];\r\n    const pages = user.total_mails_sent/5 + 1;\r\n    for (let number = 1; number <= pages; number++) {\r\n    items.push(\r\n        <Pagination.Item key={number} active={number === active} onClick={() => {\r\n          setActive(number);\r\n          GetHistory(number, 5)}}>\r\n        {number}\r\n        </Pagination.Item>,\r\n    );\r\n    }\r\n\r\n    const GetHistory = async (page, item) => {\r\n      AdminService.SentHistory(page, item)\r\n        .then(resp => {\r\n          setUser(prevUser => ({...prevUser,\r\n            sent_history: resp.data.mail_history,\r\n            total_mails_sent: resp.data.total_items\r\n          }));          \r\n        })\r\n        .catch(err => {toast.error(\"Some Error Occured.\", {\r\n          position: \"top-center\",\r\n          autoClose: 2000,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });});\r\n    }\r\n\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <div className=\"flexColumn\">\r\n          <div className=\"flexRow flexBetween flexAlignCenter mb-40\">\r\n            <div style={{width: 20}}></div>\r\n            <h2 className=\"modal-head\">List of E-mail Sent History</h2>\r\n            <button onClick={props.onHide}>\r\n              <AiOutlineCloseCircle style={{fontSize: 40, color: 'black'}} />\r\n            </button>\r\n          </div>\r\n          <Table striped bordered hover style={{borderRadius: 8}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"table-head\">Date</th>\r\n                        <th className=\"table-head\">Email ID</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                  props.history ? (\r\n                  props.history.map((table) => (\r\n                    <tr>\r\n                        <td className=\"table-date\">{table.date.split(' ')[0]}</td>\r\n                        <td className=\"table-element\">{table.email}</td>\r\n                    </tr>\r\n                  ))) : null\r\n                }\r\n                </tbody>\r\n            </Table>\r\n            <div>\r\n                <Pagination className=\"pageNumbers\">\r\n                  <Pagination.Item key=\"First\" active={1 === active} disabled={active===1 ? true : false} onClick={() => {\r\n                    setActive(active === 1 ? 1 : active-1); \r\n                    GetHistory(active === 1 ? 1 : active-1,5);\r\n                  }}>\r\n                    Prev\r\n                  </Pagination.Item>\r\n                  {items}\r\n                  <Pagination.Item key=\"Next\" active={true} disabled={active===10 ? true : false} onClick={() => {\r\n                    setActive(active+1); \r\n                    GetHistory(active+1,5);\r\n                  }}>\r\n                    Next\r\n                  </Pagination.Item>\r\n                </Pagination>\r\n            </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"history\">\r\n          <button className=\"flexAlignCenter history-button\" style={{outline: 'none'}} onClick={() => {setModalShow(true); GetHistory(1, 5);}} >\r\n              View Sent History        \r\n          </button>\r\n        </div>\r\n\r\n      <MyVerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        history = {user.sent_history}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","F:\\Github\\zippy1\\src\\AdminServices\\baseUrl.js",[],"F:\\Github\\zippy1\\src\\store.js",[],"F:\\Github\\zippy1\\src\\reducers\\index.js",[],"F:\\Github\\zippy1\\src\\reducers\\userReducer.js",[],"F:\\Github\\zippy1\\src\\utility\\userContext.js",[],"F:\\Github\\zippy1\\src\\screens\\HomeScreen\\Hello.js",[],{"ruleId":"265","severity":1,"message":"266","line":11,"column":10,"nodeType":"267","messageId":"268","endLine":11,"endColumn":18},{"ruleId":"265","severity":1,"message":"269","line":16,"column":10,"nodeType":"267","messageId":"268","endLine":16,"endColumn":21},{"ruleId":"265","severity":1,"message":"270","line":16,"column":23,"nodeType":"267","messageId":"268","endLine":16,"endColumn":38},{"ruleId":"265","severity":1,"message":"271","line":17,"column":8,"nodeType":"267","messageId":"268","endLine":17,"endColumn":13},{"ruleId":"265","severity":1,"message":"272","line":18,"column":10,"nodeType":"267","messageId":"268","endLine":18,"endColumn":16},{"ruleId":"273","replacedBy":"274"},{"ruleId":"275","replacedBy":"276"},{"ruleId":"265","severity":1,"message":"277","line":1,"column":16,"nodeType":"267","messageId":"268","endLine":1,"endColumn":25},{"ruleId":"265","severity":1,"message":"278","line":4,"column":8,"nodeType":"267","messageId":"268","endLine":4,"endColumn":13},{"ruleId":"265","severity":1,"message":"279","line":5,"column":10,"nodeType":"267","messageId":"268","endLine":5,"endColumn":22},{"ruleId":"280","severity":1,"message":"281","line":103,"column":33,"nodeType":"282","endLine":103,"endColumn":77},{"ruleId":"265","severity":1,"message":"277","line":2,"column":16,"nodeType":"267","messageId":"268","endLine":2,"endColumn":25},{"ruleId":"265","severity":1,"message":"277","line":1,"column":29,"nodeType":"267","messageId":"268","endLine":1,"endColumn":38},{"ruleId":"265","severity":1,"message":"283","line":13,"column":41,"nodeType":"267","messageId":"268","endLine":13,"endColumn":60},{"ruleId":"265","severity":1,"message":"284","line":7,"column":19,"nodeType":"267","messageId":"268","endLine":7,"endColumn":26},{"ruleId":"265","severity":1,"message":"285","line":1,"column":16,"nodeType":"267","messageId":"268","endLine":1,"endColumn":24},{"ruleId":"265","severity":1,"message":"278","line":6,"column":8,"nodeType":"267","messageId":"268","endLine":6,"endColumn":13},{"ruleId":"265","severity":1,"message":"285","line":2,"column":16,"nodeType":"267","messageId":"268","endLine":2,"endColumn":24},{"ruleId":"265","severity":1,"message":"286","line":8,"column":8,"nodeType":"267","messageId":"268","endLine":8,"endColumn":20},{"ruleId":"265","severity":1,"message":"287","line":12,"column":16,"nodeType":"267","messageId":"268","endLine":12,"endColumn":23},{"ruleId":"265","severity":1,"message":"288","line":13,"column":10,"nodeType":"267","messageId":"268","endLine":13,"endColumn":14},{"ruleId":"265","severity":1,"message":"289","line":7,"column":10,"nodeType":"267","messageId":"268","endLine":7,"endColumn":24},{"ruleId":"265","severity":1,"message":"288","line":13,"column":10,"nodeType":"267","messageId":"268","endLine":13,"endColumn":14},{"ruleId":"265","severity":1,"message":"284","line":10,"column":9,"nodeType":"267","messageId":"268","endLine":10,"endColumn":16},{"ruleId":"265","severity":1,"message":"289","line":11,"column":10,"nodeType":"267","messageId":"268","endLine":11,"endColumn":24},{"ruleId":"265","severity":1,"message":"288","line":20,"column":12,"nodeType":"267","messageId":"268","endLine":20,"endColumn":16},{"ruleId":"265","severity":1,"message":"277","line":2,"column":27,"nodeType":"267","messageId":"268","endLine":2,"endColumn":36},{"ruleId":"265","severity":1,"message":"284","line":7,"column":9,"nodeType":"267","messageId":"268","endLine":7,"endColumn":16},{"ruleId":"265","severity":1,"message":"289","line":8,"column":10,"nodeType":"267","messageId":"268","endLine":8,"endColumn":24},{"ruleId":"265","severity":1,"message":"288","line":18,"column":12,"nodeType":"267","messageId":"268","endLine":18,"endColumn":16},{"ruleId":"265","severity":1,"message":"277","line":1,"column":27,"nodeType":"267","messageId":"268","endLine":1,"endColumn":36},{"ruleId":"265","severity":1,"message":"290","line":6,"column":22,"nodeType":"267","messageId":"268","endLine":6,"endColumn":29},{"ruleId":"265","severity":1,"message":"284","line":10,"column":9,"nodeType":"267","messageId":"268","endLine":10,"endColumn":16},{"ruleId":"265","severity":1,"message":"291","line":10,"column":18,"nodeType":"267","messageId":"268","endLine":10,"endColumn":25},{"ruleId":"265","severity":1,"message":"289","line":11,"column":10,"nodeType":"267","messageId":"268","endLine":11,"endColumn":24},{"ruleId":"265","severity":1,"message":"288","line":21,"column":10,"nodeType":"267","messageId":"268","endLine":21,"endColumn":14},{"ruleId":"265","severity":1,"message":"277","line":2,"column":38,"nodeType":"267","messageId":"268","endLine":2,"endColumn":47},{"ruleId":"265","severity":1,"message":"291","line":4,"column":10,"nodeType":"267","messageId":"268","endLine":4,"endColumn":17},{"ruleId":"265","severity":1,"message":"284","line":4,"column":19,"nodeType":"267","messageId":"268","endLine":4,"endColumn":26},{"ruleId":"265","severity":1,"message":"289","line":6,"column":10,"nodeType":"267","messageId":"268","endLine":6,"endColumn":24},{"ruleId":"265","severity":1,"message":"292","line":17,"column":10,"nodeType":"267","messageId":"268","endLine":17,"endColumn":17},{"ruleId":"265","severity":1,"message":"289","line":7,"column":10,"nodeType":"267","messageId":"268","endLine":7,"endColumn":24},{"ruleId":"265","severity":1,"message":"288","line":14,"column":12,"nodeType":"267","messageId":"268","endLine":14,"endColumn":16},{"ruleId":"265","severity":1,"message":"288","line":14,"column":10,"nodeType":"267","messageId":"268","endLine":14,"endColumn":14},{"ruleId":"265","severity":1,"message":"288","line":14,"column":10,"nodeType":"267","messageId":"268","endLine":14,"endColumn":14},{"ruleId":"265","severity":1,"message":"285","line":2,"column":28,"nodeType":"267","messageId":"268","endLine":2,"endColumn":36},{"ruleId":"265","severity":1,"message":"291","line":8,"column":10,"nodeType":"267","messageId":"268","endLine":8,"endColumn":17},{"ruleId":"265","severity":1,"message":"284","line":8,"column":19,"nodeType":"267","messageId":"268","endLine":8,"endColumn":26},{"ruleId":"265","severity":1,"message":"289","line":9,"column":10,"nodeType":"267","messageId":"268","endLine":9,"endColumn":24},{"ruleId":"265","severity":1,"message":"288","line":14,"column":10,"nodeType":"267","messageId":"268","endLine":14,"endColumn":14},{"ruleId":"265","severity":1,"message":"287","line":14,"column":16,"nodeType":"267","messageId":"268","endLine":14,"endColumn":23},{"ruleId":"265","severity":1,"message":"285","line":2,"column":28,"nodeType":"267","messageId":"268","endLine":2,"endColumn":36},{"ruleId":"265","severity":1,"message":"291","line":10,"column":10,"nodeType":"267","messageId":"268","endLine":10,"endColumn":17},{"ruleId":"265","severity":1,"message":"284","line":10,"column":19,"nodeType":"267","messageId":"268","endLine":10,"endColumn":26},{"ruleId":"265","severity":1,"message":"285","line":2,"column":28,"nodeType":"267","messageId":"268","endLine":2,"endColumn":36},{"ruleId":"265","severity":1,"message":"286","line":4,"column":8,"nodeType":"267","messageId":"268","endLine":4,"endColumn":20},{"ruleId":"265","severity":1,"message":"284","line":5,"column":9,"nodeType":"267","messageId":"268","endLine":5,"endColumn":16},{"ruleId":"265","severity":1,"message":"291","line":5,"column":18,"nodeType":"267","messageId":"268","endLine":5,"endColumn":25},{"ruleId":"265","severity":1,"message":"287","line":11,"column":18,"nodeType":"267","messageId":"268","endLine":11,"endColumn":25},{"ruleId":"265","severity":1,"message":"293","line":4,"column":17,"nodeType":"267","messageId":"268","endLine":4,"endColumn":21},{"ruleId":"265","severity":1,"message":"284","line":8,"column":10,"nodeType":"267","messageId":"268","endLine":8,"endColumn":17},{"ruleId":"265","severity":1,"message":"291","line":8,"column":19,"nodeType":"267","messageId":"268","endLine":8,"endColumn":26},{"ruleId":"265","severity":1,"message":"289","line":9,"column":10,"nodeType":"267","messageId":"268","endLine":9,"endColumn":24},"no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","'createStore' is defined but never used.","'applyMiddleware' is defined but never used.","'thunk' is defined but never used.","'logger' is defined but never used.","no-native-reassign",["294"],"no-negated-in-lhs",["295"],"'useEffect' is defined but never used.","'Hello' is defined but never used.","'UserProvider' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'AiOutlinePlusCircle' is defined but never used.","'setItem' is defined but never used.","'useState' is defined but never used.","'AdminService' is defined but never used.","'setUser' is assigned a value but never used.","'user' is assigned a value but never used.","'ToastContainer' is defined but never used.","'setcard' is assigned a value but never used.","'getItem' is defined but never used.","'isLogin' is assigned a value but never used.","'Form' is defined but never used.","no-global-assign","no-unsafe-negation"]